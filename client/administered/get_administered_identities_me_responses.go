// Code generated by go-swagger; DO NOT EDIT.

package administered

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAdministeredIdentitiesMeReader is a Reader for the GetAdministeredIdentitiesMe structure.
type GetAdministeredIdentitiesMeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdministeredIdentitiesMeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdministeredIdentitiesMeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAdministeredIdentitiesMeOK creates a GetAdministeredIdentitiesMeOK with default headers values
func NewGetAdministeredIdentitiesMeOK() *GetAdministeredIdentitiesMeOK {
	return &GetAdministeredIdentitiesMeOK{}
}

/*
GetAdministeredIdentitiesMeOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetAdministeredIdentitiesMeOK struct {
	Payload *GetAdministeredIdentitiesMeOKBody
}

// IsSuccess returns true when this get administered identities me o k response has a 2xx status code
func (o *GetAdministeredIdentitiesMeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get administered identities me o k response has a 3xx status code
func (o *GetAdministeredIdentitiesMeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get administered identities me o k response has a 4xx status code
func (o *GetAdministeredIdentitiesMeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get administered identities me o k response has a 5xx status code
func (o *GetAdministeredIdentitiesMeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get administered identities me o k response a status code equal to that given
func (o *GetAdministeredIdentitiesMeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get administered identities me o k response
func (o *GetAdministeredIdentitiesMeOK) Code() int {
	return 200
}

func (o *GetAdministeredIdentitiesMeOK) Error() string {
	return fmt.Sprintf("[GET /administered/identities/me][%d] getAdministeredIdentitiesMeOK  %+v", 200, o.Payload)
}

func (o *GetAdministeredIdentitiesMeOK) String() string {
	return fmt.Sprintf("[GET /administered/identities/me][%d] getAdministeredIdentitiesMeOK  %+v", 200, o.Payload)
}

func (o *GetAdministeredIdentitiesMeOK) GetPayload() *GetAdministeredIdentitiesMeOKBody {
	return o.Payload
}

func (o *GetAdministeredIdentitiesMeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAdministeredIdentitiesMeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetAdministeredIdentitiesMeOKBody get administered identities me o k body
swagger:model GetAdministeredIdentitiesMeOKBody
*/
type GetAdministeredIdentitiesMeOKBody struct {

	// authentication
	Authentication *GetAdministeredIdentitiesMeOKBodyAuthentication `json:"authentication,omitempty"`

	// User email
	Email string `json:"email,omitempty"`

	// Last seen active on Dashboard UI
	// Format: date-time
	LastUsedDashboardAt strfmt.DateTime `json:"lastUsedDashboardAt,omitempty"`

	// Username
	Name string `json:"name,omitempty"`
}

// Validate validates this get administered identities me o k body
func (o *GetAdministeredIdentitiesMeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUsedDashboardAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBody) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.Authentication) { // not required
		return nil
	}

	if o.Authentication != nil {
		if err := o.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

func (o *GetAdministeredIdentitiesMeOKBody) validateLastUsedDashboardAt(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUsedDashboardAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getAdministeredIdentitiesMeOK"+"."+"lastUsedDashboardAt", "body", "date-time", o.LastUsedDashboardAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get administered identities me o k body based on the context it is used
func (o *GetAdministeredIdentitiesMeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBody) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.Authentication != nil {
		if err := o.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBody) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAdministeredIdentitiesMeOKBodyAuthentication Authentication info
swagger:model GetAdministeredIdentitiesMeOKBodyAuthentication
*/
type GetAdministeredIdentitiesMeOKBodyAuthentication struct {

	// api
	API *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI `json:"api,omitempty"`

	// Authentication mode
	Mode string `json:"mode,omitempty"`

	// saml
	Saml *GetAdministeredIdentitiesMeOKBodyAuthenticationSaml `json:"saml,omitempty"`

	// two factor
	TwoFactor *GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor `json:"twoFactor,omitempty"`
}

// Validate validates this get administered identities me o k body authentication
func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSaml(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) validateAPI(formats strfmt.Registry) error {
	if swag.IsZero(o.API) { // not required
		return nil
	}

	if o.API != nil {
		if err := o.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api")
			}
			return err
		}
	}

	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) validateSaml(formats strfmt.Registry) error {
	if swag.IsZero(o.Saml) { // not required
		return nil
	}

	if o.Saml != nil {
		if err := o.Saml.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "saml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "saml")
			}
			return err
		}
	}

	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) validateTwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFactor) { // not required
		return nil
	}

	if o.TwoFactor != nil {
		if err := o.TwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "twoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "twoFactor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get administered identities me o k body authentication based on the context it is used
func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSaml(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) contextValidateAPI(ctx context.Context, formats strfmt.Registry) error {

	if o.API != nil {
		if err := o.API.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api")
			}
			return err
		}
	}

	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) contextValidateSaml(ctx context.Context, formats strfmt.Registry) error {

	if o.Saml != nil {
		if err := o.Saml.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "saml")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "saml")
			}
			return err
		}
	}

	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) contextValidateTwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFactor != nil {
		if err := o.TwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "twoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "twoFactor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthentication) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBodyAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAdministeredIdentitiesMeOKBodyAuthenticationAPI API authentication
swagger:model GetAdministeredIdentitiesMeOKBodyAuthenticationAPI
*/
type GetAdministeredIdentitiesMeOKBodyAuthenticationAPI struct {

	// key
	Key *GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey `json:"key,omitempty"`
}

// Validate validates this get administered identities me o k body authentication API
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) validateKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if o.Key != nil {
		if err := o.Key.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api" + "." + "key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api" + "." + "key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get administered identities me o k body authentication API based on the context it is used
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) contextValidateKey(ctx context.Context, formats strfmt.Registry) error {

	if o.Key != nil {
		if err := o.Key.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api" + "." + "key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getAdministeredIdentitiesMeOK" + "." + "authentication" + "." + "api" + "." + "key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPI) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBodyAuthenticationAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey API key
swagger:model GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey
*/
type GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey struct {

	// If API key is created for this user
	Created bool `json:"created,omitempty"`
}

// Validate validates this get administered identities me o k body authentication API key
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get administered identities me o k body authentication API key based on context it is used
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBodyAuthenticationAPIKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAdministeredIdentitiesMeOKBodyAuthenticationSaml SAML authentication
swagger:model GetAdministeredIdentitiesMeOKBodyAuthenticationSaml
*/
type GetAdministeredIdentitiesMeOKBodyAuthenticationSaml struct {

	// If SAML authentication is enabled for this user
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this get administered identities me o k body authentication saml
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationSaml) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get administered identities me o k body authentication saml based on context it is used
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationSaml) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationSaml) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationSaml) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBodyAuthenticationSaml
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor TwoFactor authentication
swagger:model GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor
*/
type GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor struct {

	// If twoFactor authentication is enabled for this user
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this get administered identities me o k body authentication two factor
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get administered identities me o k body authentication two factor based on context it is used
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor) UnmarshalBinary(b []byte) error {
	var res GetAdministeredIdentitiesMeOKBodyAuthenticationTwoFactor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
