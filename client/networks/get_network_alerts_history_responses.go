// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkAlertsHistoryReader is a Reader for the GetNetworkAlertsHistory structure.
type GetNetworkAlertsHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkAlertsHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkAlertsHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkAlertsHistoryOK creates a GetNetworkAlertsHistoryOK with default headers values
func NewGetNetworkAlertsHistoryOK() *GetNetworkAlertsHistoryOK {
	return &GetNetworkAlertsHistoryOK{}
}

/*
GetNetworkAlertsHistoryOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkAlertsHistoryOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkAlertsHistoryOKBodyItems0
}

// IsSuccess returns true when this get network alerts history o k response has a 2xx status code
func (o *GetNetworkAlertsHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network alerts history o k response has a 3xx status code
func (o *GetNetworkAlertsHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network alerts history o k response has a 4xx status code
func (o *GetNetworkAlertsHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network alerts history o k response has a 5xx status code
func (o *GetNetworkAlertsHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network alerts history o k response a status code equal to that given
func (o *GetNetworkAlertsHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network alerts history o k response
func (o *GetNetworkAlertsHistoryOK) Code() int {
	return 200
}

func (o *GetNetworkAlertsHistoryOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/alerts/history][%d] getNetworkAlertsHistoryOK  %+v", 200, o.Payload)
}

func (o *GetNetworkAlertsHistoryOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/alerts/history][%d] getNetworkAlertsHistoryOK  %+v", 200, o.Payload)
}

func (o *GetNetworkAlertsHistoryOK) GetPayload() []*GetNetworkAlertsHistoryOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkAlertsHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0 get network alerts history o k body items0
swagger:model GetNetworkAlertsHistoryOKBodyItems0
*/
type GetNetworkAlertsHistoryOKBodyItems0 struct {

	// relevant data about the event that caused the alert
	AlertData interface{} `json:"alertData,omitempty"`

	// user friendly alert type
	AlertType string `json:"alertType,omitempty"`

	// type of alert
	AlertTypeID string `json:"alertTypeId,omitempty"`

	// destinations
	Destinations *GetNetworkAlertsHistoryOKBodyItems0Destinations `json:"destinations,omitempty"`

	// device
	Device *GetNetworkAlertsHistoryOKBodyItems0Device `json:"device,omitempty"`

	// time when the event occurred
	OccurredAt string `json:"occurredAt,omitempty"`
}

// Validate validates this get network alerts history o k body items0
func (o *GetNetworkAlertsHistoryOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestinations(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0) validateDestinations(formats strfmt.Registry) error {
	if swag.IsZero(o.Destinations) { // not required
		return nil
	}

	if o.Destinations != nil {
		if err := o.Destinations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(o.Device) { // not required
		return nil
	}

	if o.Device != nil {
		if err := o.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network alerts history o k body items0 based on the context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDestinations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0) contextValidateDestinations(ctx context.Context, formats strfmt.Registry) error {

	if o.Destinations != nil {
		if err := o.Destinations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if o.Device != nil {
		if err := o.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0Destinations the destinations this alert is configured to be delivered to
swagger:model GetNetworkAlertsHistoryOKBodyItems0Destinations
*/
type GetNetworkAlertsHistoryOKBodyItems0Destinations struct {

	// email
	Email *GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail `json:"email,omitempty"`

	// push
	Push *GetNetworkAlertsHistoryOKBodyItems0DestinationsPush `json:"push,omitempty"`

	// sms
	Sms *GetNetworkAlertsHistoryOKBodyItems0DestinationsSms `json:"sms,omitempty"`

	// webhook
	Webhook *GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook `json:"webhook,omitempty"`
}

// Validate validates this get network alerts history o k body items0 destinations
func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePush(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebhook(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if o.Email != nil {
		if err := o.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "email")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) validatePush(formats strfmt.Registry) error {
	if swag.IsZero(o.Push) { // not required
		return nil
	}

	if o.Push != nil {
		if err := o.Push.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "push")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "push")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) validateSms(formats strfmt.Registry) error {
	if swag.IsZero(o.Sms) { // not required
		return nil
	}

	if o.Sms != nil {
		if err := o.Sms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "sms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "sms")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) validateWebhook(formats strfmt.Registry) error {
	if swag.IsZero(o.Webhook) { // not required
		return nil
	}

	if o.Webhook != nil {
		if err := o.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "webhook")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network alerts history o k body items0 destinations based on the context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePush(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWebhook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if o.Email != nil {
		if err := o.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "email")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) contextValidatePush(ctx context.Context, formats strfmt.Registry) error {

	if o.Push != nil {
		if err := o.Push.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "push")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "push")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) contextValidateSms(ctx context.Context, formats strfmt.Registry) error {

	if o.Sms != nil {
		if err := o.Sms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "sms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "sms")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) contextValidateWebhook(ctx context.Context, formats strfmt.Registry) error {

	if o.Webhook != nil {
		if err := o.Webhook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinations" + "." + "webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinations" + "." + "webhook")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0Destinations) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0Destinations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail email destinations for this alert
swagger:model GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail
*/
type GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail struct {

	// time when the alert was sent to the user(s) for this channel
	SentAt string `json:"sentAt,omitempty"`
}

// Validate validates this get network alerts history o k body items0 destinations email
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network alerts history o k body items0 destinations email based on context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0DestinationsEmail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0DestinationsPush push destinations for this alert
swagger:model GetNetworkAlertsHistoryOKBodyItems0DestinationsPush
*/
type GetNetworkAlertsHistoryOKBodyItems0DestinationsPush struct {

	// time when the alert was sent to the user(s) for this channel
	SentAt string `json:"sentAt,omitempty"`
}

// Validate validates this get network alerts history o k body items0 destinations push
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsPush) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network alerts history o k body items0 destinations push based on context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsPush) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsPush) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsPush) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0DestinationsPush
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0DestinationsSms sms destinations for this alert
swagger:model GetNetworkAlertsHistoryOKBodyItems0DestinationsSms
*/
type GetNetworkAlertsHistoryOKBodyItems0DestinationsSms struct {

	// time when the alert was sent to the user(s) for this channel
	SentAt string `json:"sentAt,omitempty"`
}

// Validate validates this get network alerts history o k body items0 destinations sms
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsSms) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network alerts history o k body items0 destinations sms based on context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsSms) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsSms) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsSms) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0DestinationsSms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook webhook destinations for this alert
swagger:model GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook
*/
type GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook struct {

	// time when the alert was sent to the user(s) for this channel
	SentAt string `json:"sentAt,omitempty"`
}

// Validate validates this get network alerts history o k body items0 destinations webhook
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network alerts history o k body items0 destinations webhook based on context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0DestinationsWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkAlertsHistoryOKBodyItems0Device info related to the device that caused the alert
swagger:model GetNetworkAlertsHistoryOKBodyItems0Device
*/
type GetNetworkAlertsHistoryOKBodyItems0Device struct {

	// device serial
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get network alerts history o k body items0 device
func (o *GetNetworkAlertsHistoryOKBodyItems0Device) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network alerts history o k body items0 device based on context it is used
func (o *GetNetworkAlertsHistoryOKBodyItems0Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0Device) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkAlertsHistoryOKBodyItems0Device) UnmarshalBinary(b []byte) error {
	var res GetNetworkAlertsHistoryOKBodyItems0Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
