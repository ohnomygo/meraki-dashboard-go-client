// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkFirmwareUpgradesReader is a Reader for the UpdateNetworkFirmwareUpgrades structure.
type UpdateNetworkFirmwareUpgradesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkFirmwareUpgradesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkFirmwareUpgradesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkFirmwareUpgradesOK creates a UpdateNetworkFirmwareUpgradesOK with default headers values
func NewUpdateNetworkFirmwareUpgradesOK() *UpdateNetworkFirmwareUpgradesOK {
	return &UpdateNetworkFirmwareUpgradesOK{}
}

/*
UpdateNetworkFirmwareUpgradesOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkFirmwareUpgradesOK struct {
	Payload *UpdateNetworkFirmwareUpgradesOKBody
}

// IsSuccess returns true when this update network firmware upgrades o k response has a 2xx status code
func (o *UpdateNetworkFirmwareUpgradesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network firmware upgrades o k response has a 3xx status code
func (o *UpdateNetworkFirmwareUpgradesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network firmware upgrades o k response has a 4xx status code
func (o *UpdateNetworkFirmwareUpgradesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network firmware upgrades o k response has a 5xx status code
func (o *UpdateNetworkFirmwareUpgradesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network firmware upgrades o k response a status code equal to that given
func (o *UpdateNetworkFirmwareUpgradesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network firmware upgrades o k response
func (o *UpdateNetworkFirmwareUpgradesOK) Code() int {
	return 200
}

func (o *UpdateNetworkFirmwareUpgradesOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/firmwareUpgrades][%d] updateNetworkFirmwareUpgradesOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkFirmwareUpgradesOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/firmwareUpgrades][%d] updateNetworkFirmwareUpgradesOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkFirmwareUpgradesOK) GetPayload() *UpdateNetworkFirmwareUpgradesOKBody {
	return o.Payload
}

func (o *UpdateNetworkFirmwareUpgradesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkFirmwareUpgradesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkFirmwareUpgradesBody update network firmware upgrades body
// Example: {"products":{"appliance":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1001"}},"participateInNextBetaRelease":false},"camera":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1003"}},"participateInNextBetaRelease":false},"cellularGateway":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1004"}},"participateInNextBetaRelease":false},"sensor":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1005"}},"participateInNextBetaRelease":false},"switch":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1002"}},"participateInNextBetaRelease":false},"wireless":{"nextUpgrade":{"time":"2019-03-17T17:22:52Z","toVersion":{"id":"1000"}},"participateInNextBetaRelease":false}},"timezone":"America/Los_Angeles","upgradeWindow":{"dayOfWeek":"sun","hourOfDay":"4:00"}}
swagger:model UpdateNetworkFirmwareUpgradesBody
*/
type UpdateNetworkFirmwareUpgradesBody struct {

	// products
	Products *UpdateNetworkFirmwareUpgradesParamsBodyProducts `json:"products,omitempty"`

	// The timezone for the network
	Timezone string `json:"timezone,omitempty"`

	// upgrade window
	UpgradeWindow *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow `json:"upgradeWindow,omitempty"`
}

// Validate validates this update network firmware upgrades body
func (o *UpdateNetworkFirmwareUpgradesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpgradeWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) validateUpgradeWindow(formats strfmt.Registry) error {
	if swag.IsZero(o.UpgradeWindow) { // not required
		return nil
	}

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades body based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpgradeWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {
		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) contextValidateUpgradeWindow(ctx context.Context, formats strfmt.Registry) error {

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBody update network firmware upgrades o k body
swagger:model UpdateNetworkFirmwareUpgradesOKBody
*/
type UpdateNetworkFirmwareUpgradesOKBody struct {

	// products
	Products *UpdateNetworkFirmwareUpgradesOKBodyProducts `json:"products,omitempty"`

	// The timezone for the network
	Timezone string `json:"timezone,omitempty"`

	// upgrade window
	UpgradeWindow *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow `json:"upgradeWindow,omitempty"`
}

// Validate validates this update network firmware upgrades o k body
func (o *UpdateNetworkFirmwareUpgradesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpgradeWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBody) validateUpgradeWindow(formats strfmt.Registry) error {
	if swag.IsZero(o.UpgradeWindow) { // not required
		return nil
	}

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpgradeWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {
		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBody) contextValidateUpgradeWindow(ctx context.Context, formats strfmt.Registry) error {

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProducts The network devices to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProducts
*/
type UpdateNetworkFirmwareUpgradesOKBodyProducts struct {

	// appliance
	Appliance *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance `json:"appliance,omitempty"`

	// camera
	Camera *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera `json:"camera,omitempty"`

	// cellular gateway
	CellularGateway *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway `json:"cellularGateway,omitempty"`

	// sensor
	Sensor *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor `json:"sensor,omitempty"`

	// switch
	Switch *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch `json:"switch,omitempty"`

	// wireless
	Wireless *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless `json:"wireless,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products
func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppliance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCamera(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCellularGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWireless(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateAppliance(formats strfmt.Registry) error {
	if swag.IsZero(o.Appliance) { // not required
		return nil
	}

	if o.Appliance != nil {
		if err := o.Appliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateCamera(formats strfmt.Registry) error {
	if swag.IsZero(o.Camera) { // not required
		return nil
	}

	if o.Camera != nil {
		if err := o.Camera.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateCellularGateway(formats strfmt.Registry) error {
	if swag.IsZero(o.CellularGateway) { // not required
		return nil
	}

	if o.CellularGateway != nil {
		if err := o.CellularGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateSensor(formats strfmt.Registry) error {
	if swag.IsZero(o.Sensor) { // not required
		return nil
	}

	if o.Sensor != nil {
		if err := o.Sensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(o.Switch) { // not required
		return nil
	}

	if o.Switch != nil {
		if err := o.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) validateWireless(formats strfmt.Registry) error {
	if swag.IsZero(o.Wireless) { // not required
		return nil
	}

	if o.Wireless != nil {
		if err := o.Wireless.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCamera(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCellularGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWireless(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateAppliance(ctx context.Context, formats strfmt.Registry) error {

	if o.Appliance != nil {
		if err := o.Appliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateCamera(ctx context.Context, formats strfmt.Registry) error {

	if o.Camera != nil {
		if err := o.Camera.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateCellularGateway(ctx context.Context, formats strfmt.Registry) error {

	if o.CellularGateway != nil {
		if err := o.CellularGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateSensor(ctx context.Context, formats strfmt.Registry) error {

	if o.Sensor != nil {
		if err := o.Sensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if o.Switch != nil {
		if err := o.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) contextValidateWireless(ctx context.Context, formats strfmt.Registry) error {

	if o.Wireless != nil {
		if err := o.Wireless.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProducts) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products appliance based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsAppliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0 update network firmware upgrades o k body products appliance available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products appliance available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products appliance current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products appliance last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products appliance last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products appliance last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products appliance next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products appliance next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"appliance"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products appliance next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsApplianceNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCamera The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCamera
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCamera struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products camera based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCamera) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCamera
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0 update network firmware upgrades o k body products camera available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products camera available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products camera current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products camera last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products camera last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products camera last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products camera next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products camera next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"camera"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products camera next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCameraNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products cellular gateway based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0 update network firmware upgrades o k body products cellular gateway available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products cellular gateway available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products cellular gateway current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products cellular gateway last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products cellular gateway last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products cellular gateway last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products cellular gateway next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products cellular gateway next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"cellularGateway"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products cellular gateway next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsCellularGatewayNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensor The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensor
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensor struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products sensor based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensor) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0 update network firmware upgrades o k body products sensor available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products sensor available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products sensor current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products sensor last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products sensor last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products sensor last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products sensor next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products sensor next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"sensor"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products sensor next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSensorNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products switch based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0 update network firmware upgrades o k body products switch available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products switch available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products switch current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products switch last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products switch last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products switch last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products switch next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products switch next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"switch"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products switch next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsSwitchNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWireless The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWireless
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWireless struct {

	// Firmware versions available for upgrade
	AvailableVersions []*UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0 `json:"availableVersions"`

	// current version
	CurrentVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion `json:"currentVersion,omitempty"`

	// last upgrade
	LastUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade `json:"lastUpgrade,omitempty"`

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailableVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) validateAvailableVersions(formats strfmt.Registry) error {
	if swag.IsZero(o.AvailableVersions) { // not required
		return nil
	}

	for i := 0; i < len(o.AvailableVersions); i++ {
		if swag.IsZero(o.AvailableVersions[i]) { // not required
			continue
		}

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) validateCurrentVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.CurrentVersion) { // not required
		return nil
	}

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) validateLastUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.LastUpgrade) { // not required
		return nil
	}

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products wireless based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAvailableVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCurrentVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) contextValidateAvailableVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AvailableVersions); i++ {

		if o.AvailableVersions[i] != nil {
			if err := o.AvailableVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "availableVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "availableVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) contextValidateCurrentVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.CurrentVersion != nil {
		if err := o.CurrentVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "currentVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "currentVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) contextValidateLastUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.LastUpgrade != nil {
		if err := o.LastUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWireless) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWireless
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0 update network firmware upgrades o k body products wireless available versions items0
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0 struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless available versions items0
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products wireless available versions items0 based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessAvailableVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion Details of the current version on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless current version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"currentVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products wireless current version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessCurrentVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade Details of the last firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade struct {

	// from version
	FromVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion `json:"fromVersion,omitempty"`

	// Timestamp of the last successful firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless last upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"lastUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products wireless last upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "lastUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion Details of the version the device upgraded from
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless last upgrade from version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"lastUpgrade"+"."+"fromVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products wireless last upgrade from version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion Details of the version the device upgraded to
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless last upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"lastUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products wireless last upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessLastUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade Details of the next firmware upgrade on the device
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade struct {

	// Timestamp of the next scheduled firmware upgrade
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless next upgrade
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"nextUpgrade"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades o k body products wireless next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgradesOK" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion Details of the version the device will upgrade to if it exists
swagger:model UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion struct {

	// Name of the firmware version
	Firmware string `json:"firmware,omitempty"`

	// Firmware version identifier
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	// Format: date-time
	ReleaseDate strfmt.DateTime `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this update network firmware upgrades o k body products wireless next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(o.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateNetworkFirmwareUpgradesOK"+"."+"products"+"."+"wireless"+"."+"nextUpgrade"+"."+"toVersion"+"."+"releaseDate", "body", "date-time", o.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body products wireless next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyProductsWirelessNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow Upgrade window for devices in network
swagger:model UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow
*/
type UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow struct {

	// Day of the week
	// Enum: [fri friday mon monday sat saturday sun sunday thu thursday tue tuesday wed wednesday]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// Hour of the day
	// Enum: [0:00 10:00 11:00 12:00 13:00 14:00 15:00 16:00 17:00 18:00 19:00 1:00 20:00 21:00 22:00 23:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 9:00]
	HourOfDay string `json:"hourOfDay,omitempty"`
}

// Validate validates this update network firmware upgrades o k body upgrade window
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHourOfDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fri","friday","mon","monday","sat","saturday","sun","sunday","thu","thursday","tue","tuesday","wed","wednesday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeDayOfWeekPropEnum = append(updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeDayOfWeekPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekFri captures enum value "fri"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekFri string = "fri"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekFriday captures enum value "friday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekFriday string = "friday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekMon captures enum value "mon"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekMon string = "mon"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekMonday captures enum value "monday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekMonday string = "monday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSat captures enum value "sat"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSat string = "sat"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSaturday captures enum value "saturday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSaturday string = "saturday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSun captures enum value "sun"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSun string = "sun"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSunday captures enum value "sunday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekSunday string = "sunday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekThu captures enum value "thu"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekThu string = "thu"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekThursday captures enum value "thursday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekThursday string = "thursday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekTue captures enum value "tue"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekTue string = "tue"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekTuesday captures enum value "tuesday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekTuesday string = "tuesday"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekWed captures enum value "wed"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekWed string = "wed"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekWednesday captures enum value "wednesday"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowDayOfWeekWednesday string = "wednesday"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(o.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := o.validateDayOfWeekEnum("updateNetworkFirmwareUpgradesOK"+"."+"upgradeWindow"+"."+"dayOfWeek", "body", o.DayOfWeek); err != nil {
		return err
	}

	return nil
}

var updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeHourOfDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","1:00","20:00","21:00","22:00","23:00","2:00","3:00","4:00","5:00","6:00","7:00","8:00","9:00"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeHourOfDayPropEnum = append(updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeHourOfDayPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr000 captures enum value "0:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr000 string = "0:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1000 captures enum value "10:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1000 string = "10:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1100 captures enum value "11:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1100 string = "11:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1200 captures enum value "12:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1200 string = "12:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1300 captures enum value "13:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1300 string = "13:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1400 captures enum value "14:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1400 string = "14:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1500 captures enum value "15:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1500 string = "15:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1600 captures enum value "16:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1600 string = "16:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1700 captures enum value "17:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1700 string = "17:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1800 captures enum value "18:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1800 string = "18:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1900 captures enum value "19:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr1900 string = "19:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr100 captures enum value "1:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr100 string = "1:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2000 captures enum value "20:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2000 string = "20:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2100 captures enum value "21:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2100 string = "21:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2200 captures enum value "22:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2200 string = "22:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2300 captures enum value "23:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr2300 string = "23:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr200 captures enum value "2:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr200 string = "2:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr300 captures enum value "3:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr300 string = "3:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr400 captures enum value "4:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr400 string = "4:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr500 captures enum value "5:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr500 string = "5:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr600 captures enum value "6:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr600 string = "6:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr700 captures enum value "7:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr700 string = "7:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr800 captures enum value "8:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr800 string = "8:00"

	// UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr900 captures enum value "9:00"
	UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindowHourOfDayNr900 string = "9:00"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) validateHourOfDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesOKBodyUpgradeWindowTypeHourOfDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) validateHourOfDay(formats strfmt.Registry) error {
	if swag.IsZero(o.HourOfDay) { // not required
		return nil
	}

	// value enum
	if err := o.validateHourOfDayEnum("updateNetworkFirmwareUpgradesOK"+"."+"upgradeWindow"+"."+"hourOfDay", "body", o.HourOfDay); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades o k body upgrade window based on context it is used
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesOKBodyUpgradeWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProducts Contains information about the network to update
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProducts
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProducts struct {

	// appliance
	Appliance *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance `json:"appliance,omitempty"`

	// camera
	Camera *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera `json:"camera,omitempty"`

	// cellular gateway
	CellularGateway *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway `json:"cellularGateway,omitempty"`

	// sensor
	Sensor *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor `json:"sensor,omitempty"`

	// switch
	Switch *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch `json:"switch,omitempty"`

	// wireless
	Wireless *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless `json:"wireless,omitempty"`
}

// Validate validates this update network firmware upgrades params body products
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppliance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCamera(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCellularGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWireless(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateAppliance(formats strfmt.Registry) error {
	if swag.IsZero(o.Appliance) { // not required
		return nil
	}

	if o.Appliance != nil {
		if err := o.Appliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateCamera(formats strfmt.Registry) error {
	if swag.IsZero(o.Camera) { // not required
		return nil
	}

	if o.Camera != nil {
		if err := o.Camera.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateCellularGateway(formats strfmt.Registry) error {
	if swag.IsZero(o.CellularGateway) { // not required
		return nil
	}

	if o.CellularGateway != nil {
		if err := o.CellularGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateSensor(formats strfmt.Registry) error {
	if swag.IsZero(o.Sensor) { // not required
		return nil
	}

	if o.Sensor != nil {
		if err := o.Sensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(o.Switch) { // not required
		return nil
	}

	if o.Switch != nil {
		if err := o.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateWireless(formats strfmt.Registry) error {
	if swag.IsZero(o.Wireless) { // not required
		return nil
	}

	if o.Wireless != nil {
		if err := o.Wireless.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCamera(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCellularGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWireless(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateAppliance(ctx context.Context, formats strfmt.Registry) error {

	if o.Appliance != nil {
		if err := o.Appliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateCamera(ctx context.Context, formats strfmt.Registry) error {

	if o.Camera != nil {
		if err := o.Camera.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateCellularGateway(ctx context.Context, formats strfmt.Registry) error {

	if o.CellularGateway != nil {
		if err := o.CellularGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateSensor(ctx context.Context, formats strfmt.Registry) error {

	if o.Sensor != nil {
		if err := o.Sensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if o.Switch != nil {
		if err := o.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateWireless(ctx context.Context, formats strfmt.Registry) error {

	if o.Wireless != nil {
		if err := o.Wireless.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products appliance based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products appliance next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products appliance next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products camera based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products camera next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products camera next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products cellular gateway based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products cellular gateway next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products cellular gateway next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products sensor based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products sensor next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products sensor next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products switch based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products switch next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products switch next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products wireless based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products wireless next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products wireless next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow Upgrade window for devices in network
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow
*/
type UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow struct {

	// Day of the week
	// Enum: [fri friday mon monday sat saturday sun sunday thu thursday tue tuesday wed wednesday]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// Hour of the day
	// Enum: [0:00 10:00 11:00 12:00 13:00 14:00 15:00 16:00 17:00 18:00 19:00 1:00 20:00 21:00 22:00 23:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 9:00]
	HourOfDay string `json:"hourOfDay,omitempty"`
}

// Validate validates this update network firmware upgrades params body upgrade window
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHourOfDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fri","friday","mon","monday","sat","saturday","sun","sunday","thu","thursday","tue","tuesday","wed","wednesday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum = append(updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFri captures enum value "fri"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFri string = "fri"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFriday captures enum value "friday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFriday string = "friday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMon captures enum value "mon"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMon string = "mon"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMonday captures enum value "monday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMonday string = "monday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSat captures enum value "sat"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSat string = "sat"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSaturday captures enum value "saturday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSaturday string = "saturday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSun captures enum value "sun"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSun string = "sun"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSunday captures enum value "sunday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSunday string = "sunday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThu captures enum value "thu"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThu string = "thu"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThursday captures enum value "thursday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThursday string = "thursday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTue captures enum value "tue"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTue string = "tue"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTuesday captures enum value "tuesday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTuesday string = "tuesday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWed captures enum value "wed"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWed string = "wed"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWednesday captures enum value "wednesday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWednesday string = "wednesday"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(o.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := o.validateDayOfWeekEnum("updateNetworkFirmwareUpgrades"+"."+"upgradeWindow"+"."+"dayOfWeek", "body", o.DayOfWeek); err != nil {
		return err
	}

	return nil
}

var updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","1:00","20:00","21:00","22:00","23:00","2:00","3:00","4:00","5:00","6:00","7:00","8:00","9:00"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum = append(updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr000 captures enum value "0:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr000 string = "0:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1000 captures enum value "10:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1000 string = "10:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1100 captures enum value "11:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1100 string = "11:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1200 captures enum value "12:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1200 string = "12:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1300 captures enum value "13:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1300 string = "13:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1400 captures enum value "14:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1400 string = "14:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1500 captures enum value "15:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1500 string = "15:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1600 captures enum value "16:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1600 string = "16:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1700 captures enum value "17:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1700 string = "17:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1800 captures enum value "18:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1800 string = "18:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1900 captures enum value "19:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1900 string = "19:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr100 captures enum value "1:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr100 string = "1:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2000 captures enum value "20:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2000 string = "20:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2100 captures enum value "21:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2100 string = "21:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2200 captures enum value "22:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2200 string = "22:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2300 captures enum value "23:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2300 string = "23:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr200 captures enum value "2:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr200 string = "2:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr300 captures enum value "3:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr300 string = "3:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr400 captures enum value "4:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr400 string = "4:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr500 captures enum value "5:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr500 string = "5:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr600 captures enum value "6:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr600 string = "6:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr700 captures enum value "7:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr700 string = "7:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr800 captures enum value "8:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr800 string = "8:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr900 captures enum value "9:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr900 string = "9:00"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateHourOfDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateHourOfDay(formats strfmt.Registry) error {
	if swag.IsZero(o.HourOfDay) { // not required
		return nil
	}

	// value enum
	if err := o.validateHourOfDayEnum("updateNetworkFirmwareUpgrades"+"."+"upgradeWindow"+"."+"hourOfDay", "body", o.HourOfDay); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades params body upgrade window based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
