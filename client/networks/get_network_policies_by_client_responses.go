// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkPoliciesByClientReader is a Reader for the GetNetworkPoliciesByClient structure.
type GetNetworkPoliciesByClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkPoliciesByClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkPoliciesByClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkPoliciesByClientOK creates a GetNetworkPoliciesByClientOK with default headers values
func NewGetNetworkPoliciesByClientOK() *GetNetworkPoliciesByClientOK {
	return &GetNetworkPoliciesByClientOK{}
}

/*
GetNetworkPoliciesByClientOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkPoliciesByClientOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkPoliciesByClientOKBodyItems0
}

// IsSuccess returns true when this get network policies by client o k response has a 2xx status code
func (o *GetNetworkPoliciesByClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network policies by client o k response has a 3xx status code
func (o *GetNetworkPoliciesByClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network policies by client o k response has a 4xx status code
func (o *GetNetworkPoliciesByClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network policies by client o k response has a 5xx status code
func (o *GetNetworkPoliciesByClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network policies by client o k response a status code equal to that given
func (o *GetNetworkPoliciesByClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network policies by client o k response
func (o *GetNetworkPoliciesByClientOK) Code() int {
	return 200
}

func (o *GetNetworkPoliciesByClientOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/policies/byClient][%d] getNetworkPoliciesByClientOK  %+v", 200, o.Payload)
}

func (o *GetNetworkPoliciesByClientOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/policies/byClient][%d] getNetworkPoliciesByClientOK  %+v", 200, o.Payload)
}

func (o *GetNetworkPoliciesByClientOK) GetPayload() []*GetNetworkPoliciesByClientOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkPoliciesByClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkPoliciesByClientOKBodyItems0 get network policies by client o k body items0
swagger:model GetNetworkPoliciesByClientOKBodyItems0
*/
type GetNetworkPoliciesByClientOKBodyItems0 struct {

	// Assigned policies
	Assigned []*GetNetworkPoliciesByClientOKBodyItems0AssignedItems0 `json:"assigned"`

	// ID of client
	ClientID string `json:"clientId,omitempty"`

	// Name of client
	Name string `json:"name,omitempty"`
}

// Validate validates this get network policies by client o k body items0
func (o *GetNetworkPoliciesByClientOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkPoliciesByClientOKBodyItems0) validateAssigned(formats strfmt.Registry) error {
	if swag.IsZero(o.Assigned) { // not required
		return nil
	}

	for i := 0; i < len(o.Assigned); i++ {
		if swag.IsZero(o.Assigned[i]) { // not required
			continue
		}

		if o.Assigned[i] != nil {
			if err := o.Assigned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network policies by client o k body items0 based on the context it is used
func (o *GetNetworkPoliciesByClientOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAssigned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkPoliciesByClientOKBodyItems0) contextValidateAssigned(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Assigned); i++ {

		if o.Assigned[i] != nil {
			if err := o.Assigned[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assigned" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assigned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkPoliciesByClientOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkPoliciesByClientOKBodyItems0AssignedItems0 get network policies by client o k body items0 assigned items0
swagger:model GetNetworkPoliciesByClientOKBodyItems0AssignedItems0
*/
type GetNetworkPoliciesByClientOKBodyItems0AssignedItems0 struct {

	// id of policy
	GroupPolicyID string `json:"groupPolicyId,omitempty"`

	// name of policy
	Name string `json:"name,omitempty"`

	// ssid
	Ssid []*GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0 `json:"ssid"`

	// type of policy
	Type string `json:"type,omitempty"`
}

// Validate validates this get network policies by client o k body items0 assigned items0
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSsid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) validateSsid(formats strfmt.Registry) error {
	if swag.IsZero(o.Ssid) { // not required
		return nil
	}

	for i := 0; i < len(o.Ssid); i++ {
		if swag.IsZero(o.Ssid[i]) { // not required
			continue
		}

		if o.Ssid[i] != nil {
			if err := o.Ssid[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ssid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ssid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network policies by client o k body items0 assigned items0 based on the context it is used
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSsid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) contextValidateSsid(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Ssid); i++ {

		if o.Ssid[i] != nil {
			if err := o.Ssid[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ssid" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ssid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkPoliciesByClientOKBodyItems0AssignedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0 get network policies by client o k body items0 assigned items0 ssid items0
swagger:model GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0
*/
type GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0 struct {

	// number of ssid
	SsidNumber int64 `json:"ssidNumber,omitempty"`
}

// Validate validates this get network policies by client o k body items0 assigned items0 ssid items0
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network policies by client o k body items0 assigned items0 ssid items0 based on context it is used
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkPoliciesByClientOKBodyItems0AssignedItems0SsidItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
