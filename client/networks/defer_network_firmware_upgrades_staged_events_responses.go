// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeferNetworkFirmwareUpgradesStagedEventsReader is a Reader for the DeferNetworkFirmwareUpgradesStagedEvents structure.
type DeferNetworkFirmwareUpgradesStagedEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeferNetworkFirmwareUpgradesStagedEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeferNetworkFirmwareUpgradesStagedEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeferNetworkFirmwareUpgradesStagedEventsOK creates a DeferNetworkFirmwareUpgradesStagedEventsOK with default headers values
func NewDeferNetworkFirmwareUpgradesStagedEventsOK() *DeferNetworkFirmwareUpgradesStagedEventsOK {
	return &DeferNetworkFirmwareUpgradesStagedEventsOK{}
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOK describes a response with status code 200, with default header values.

Successful operation
*/
type DeferNetworkFirmwareUpgradesStagedEventsOK struct {
	Payload *DeferNetworkFirmwareUpgradesStagedEventsOKBody
}

// IsSuccess returns true when this defer network firmware upgrades staged events o k response has a 2xx status code
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this defer network firmware upgrades staged events o k response has a 3xx status code
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this defer network firmware upgrades staged events o k response has a 4xx status code
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this defer network firmware upgrades staged events o k response has a 5xx status code
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this defer network firmware upgrades staged events o k response a status code equal to that given
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the defer network firmware upgrades staged events o k response
func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) Code() int {
	return 200
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/firmwareUpgrades/staged/events/defer][%d] deferNetworkFirmwareUpgradesStagedEventsOK  %+v", 200, o.Payload)
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/firmwareUpgrades/staged/events/defer][%d] deferNetworkFirmwareUpgradesStagedEventsOK  %+v", 200, o.Payload)
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) GetPayload() *DeferNetworkFirmwareUpgradesStagedEventsOKBody {
	return o.Payload
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeferNetworkFirmwareUpgradesStagedEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBody defer network firmware upgrades staged events o k body
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBody
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBody struct {

	// products
	Products *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts `json:"products,omitempty"`

	// Reasons for the rollback
	Reasons []*DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 `json:"reasons"`

	// The ordered stages in the network
	Stages []*DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 `json:"stages"`
}

// Validate validates this defer network firmware upgrades staged events o k body
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) validateReasons(formats strfmt.Registry) error {
	if swag.IsZero(o.Reasons) { // not required
		return nil
	}

	for i := 0; i < len(o.Reasons); i++ {
		if swag.IsZero(o.Reasons[i]) { // not required
			continue
		}

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) validateStages(formats strfmt.Registry) error {
	if swag.IsZero(o.Stages) { // not required
		return nil
	}

	for i := 0; i < len(o.Stages); i++ {
		if swag.IsZero(o.Stages[i]) { // not required
			continue
		}

		if o.Stages[i] != nil {
			if err := o.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this defer network firmware upgrades staged events o k body based on the context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {
		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reasons); i++ {

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Stages); i++ {

		if o.Stages[i] != nil {
			if err := o.Stages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBody) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts The network devices to be updated
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts struct {

	// switch
	Switch *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch `json:"switch,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body products
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(o.Switch) { // not required
		return nil
	}

	if o.Switch != nil {
		if err := o.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this defer network firmware upgrades staged events o k body products based on the context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if o.Switch != nil {
		if err := o.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch The Switch network to be updated
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch struct {

	// next upgrade
	NextUpgrade *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body products switch
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this defer network firmware upgrades staged events o k body products switch based on the context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade Details of the next firmware upgrade
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade struct {

	// to version
	ToVersion *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body products switch next upgrade
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this defer network firmware upgrades staged events o k body products switch next upgrade based on the context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deferNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion Details of the version the device will upgrade to
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion struct {

	// Id of the Version being upgraded to
	ID string `json:"id,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body products switch next upgrade to version
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this defer network firmware upgrades staged events o k body products switch next upgrade to version based on context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 defer network firmware upgrades staged events o k body reasons items0
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 struct {

	// Reason for the rollback
	// Enum: [broke old features other performance stability testing unifying networks versions]
	Category string `json:"category,omitempty"`

	// Additional comment about the rollback
	Comment string `json:"comment,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body reasons items0
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["broke old features","other","performance","stability","testing","unifying networks versions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum = append(deferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum, v)
	}
}

const (

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryBrokeOldFeatures captures enum value "broke old features"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryBrokeOldFeatures string = "broke old features"

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryOther captures enum value "other"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryOther string = "other"

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryPerformance captures enum value "performance"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryPerformance string = "performance"

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryStability captures enum value "stability"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryStability string = "stability"

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryTesting captures enum value "testing"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryTesting string = "testing"

	// DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryUnifyingNetworksVersions captures enum value "unifying networks versions"
	DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryUnifyingNetworksVersions string = "unifying networks versions"
)

// prop value enum
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(o.Category) { // not required
		return nil
	}

	// value enum
	if err := o.validateCategoryEnum("category", "body", o.Category); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this defer network firmware upgrades staged events o k body reasons items0 based on context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 defer network firmware upgrades staged events o k body stages items0
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 struct {

	// group
	Group *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group `json:"group,omitempty"`

	// milestones
	Milestones *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones `json:"milestones,omitempty"`

	// Current upgrade status of the group
	Status string `json:"status,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body stages items0
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) validateMilestones(formats strfmt.Registry) error {
	if swag.IsZero(o.Milestones) { // not required
		return nil
	}

	if o.Milestones != nil {
		if err := o.Milestones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this defer network firmware upgrades staged events o k body stages items0 based on the context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMilestones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if o.Group != nil {
		if err := o.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) contextValidateMilestones(ctx context.Context, formats strfmt.Registry) error {

	if o.Milestones != nil {
		if err := o.Milestones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group The staged upgrade group
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group struct {

	// Description of the Staged Upgrade Group
	Description string `json:"description,omitempty"`

	// Id of the Staged Upgrade Group
	ID string `json:"id,omitempty"`

	// Name of the Staged Upgrade Group
	Name string `json:"name,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body stages items0 group
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this defer network firmware upgrades staged events o k body stages items0 group based on context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones The Staged Upgrade Milestones for the stage
swagger:model DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones
*/
type DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones struct {

	// Time that the group was canceled
	// Format: date-time
	CanceledAt strfmt.DateTime `json:"canceledAt,omitempty"`

	// Finish time for the group
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completedAt,omitempty"`

	// Scheduled start time for the group
	// Format: date-time
	ScheduledFor strfmt.DateTime `json:"scheduledFor,omitempty"`

	// Start time for the group
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this defer network firmware upgrades staged events o k body stages items0 milestones
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCanceledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduledFor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateCanceledAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CanceledAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"canceledAt", "body", "date-time", o.CanceledAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"completedAt", "body", "date-time", o.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateScheduledFor(formats strfmt.Registry) error {
	if swag.IsZero(o.ScheduledFor) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"scheduledFor", "body", "date-time", o.ScheduledFor.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"startedAt", "body", "date-time", o.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this defer network firmware upgrades staged events o k body stages items0 milestones based on context it is used
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) UnmarshalBinary(b []byte) error {
	var res DeferNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
