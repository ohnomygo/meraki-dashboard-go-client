// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RollbacksNetworkFirmwareUpgradesStagedEventsReader is a Reader for the RollbacksNetworkFirmwareUpgradesStagedEvents structure.
type RollbacksNetworkFirmwareUpgradesStagedEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRollbacksNetworkFirmwareUpgradesStagedEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRollbacksNetworkFirmwareUpgradesStagedEventsOK creates a RollbacksNetworkFirmwareUpgradesStagedEventsOK with default headers values
func NewRollbacksNetworkFirmwareUpgradesStagedEventsOK() *RollbacksNetworkFirmwareUpgradesStagedEventsOK {
	return &RollbacksNetworkFirmwareUpgradesStagedEventsOK{}
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOK describes a response with status code 200, with default header values.

Successful operation
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOK struct {
	Payload *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody
}

// IsSuccess returns true when this rollbacks network firmware upgrades staged events o k response has a 2xx status code
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rollbacks network firmware upgrades staged events o k response has a 3xx status code
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rollbacks network firmware upgrades staged events o k response has a 4xx status code
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rollbacks network firmware upgrades staged events o k response has a 5xx status code
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rollbacks network firmware upgrades staged events o k response a status code equal to that given
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rollbacks network firmware upgrades staged events o k response
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) Code() int {
	return 200
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/firmwareUpgrades/staged/events/rollbacks][%d] rollbacksNetworkFirmwareUpgradesStagedEventsOK  %+v", 200, o.Payload)
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/firmwareUpgrades/staged/events/rollbacks][%d] rollbacksNetworkFirmwareUpgradesStagedEventsOK  %+v", 200, o.Payload)
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) GetPayload() *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody {
	return o.Payload
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RollbacksNetworkFirmwareUpgradesStagedEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsBody rollbacks network firmware upgrades staged events body
// Example: {"reasons":[{"category":"performance","comment":"Network was slower with the upgrade"}],"stages":[{"group":{"id":"1234"},"milestones":{"scheduledFor":"2018-02-11T00:00:00Z"}}]}
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsBody
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsBody struct {

	// The reason for rolling back the staged upgrade
	Reasons []*RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0 `json:"reasons"`

	// All completed or in-progress stages in the network with their new start times. All pending stages will be canceled
	// Required: true
	Stages []*RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0 `json:"stages"`
}

// Validate validates this rollbacks network firmware upgrades staged events body
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) validateReasons(formats strfmt.Registry) error {
	if swag.IsZero(o.Reasons) { // not required
		return nil
	}

	for i := 0; i < len(o.Reasons); i++ {
		if swag.IsZero(o.Reasons[i]) { // not required
			continue
		}

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) validateStages(formats strfmt.Registry) error {

	if err := validate.Required("rollbacksNetworkFirmwareUpgradesStagedEvents"+"."+"stages", "body", o.Stages); err != nil {
		return err
	}

	for i := 0; i < len(o.Stages); i++ {
		if swag.IsZero(o.Stages[i]) { // not required
			continue
		}

		if o.Stages[i] != nil {
			if err := o.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events body based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) contextValidateReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reasons); i++ {

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) contextValidateStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Stages); i++ {

		if o.Stages[i] != nil {
			if err := o.Stages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEvents" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsBody) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBody rollbacks network firmware upgrades staged events o k body
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBody
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBody struct {

	// products
	Products *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts `json:"products,omitempty"`

	// Reasons for the rollback
	Reasons []*RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 `json:"reasons"`

	// The ordered stages in the network
	Stages []*RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 `json:"stages"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) validateReasons(formats strfmt.Registry) error {
	if swag.IsZero(o.Reasons) { // not required
		return nil
	}

	for i := 0; i < len(o.Reasons); i++ {
		if swag.IsZero(o.Reasons[i]) { // not required
			continue
		}

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) validateStages(formats strfmt.Registry) error {
	if swag.IsZero(o.Stages) { // not required
		return nil
	}

	for i := 0; i < len(o.Stages); i++ {
		if swag.IsZero(o.Stages[i]) { // not required
			continue
		}

		if o.Stages[i] != nil {
			if err := o.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events o k body based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {
		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reasons); i++ {

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) contextValidateStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Stages); i++ {

		if o.Stages[i] != nil {
			if err := o.Stages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBody) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts The network devices to be updated
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts struct {

	// switch
	Switch *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch `json:"switch,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body products
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(o.Switch) { // not required
		return nil
	}

	if o.Switch != nil {
		if err := o.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events o k body products based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if o.Switch != nil {
		if err := o.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch The Switch network to be updated
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch struct {

	// next upgrade
	NextUpgrade *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body products switch
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events o k body products switch based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade Details of the next firmware upgrade
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade struct {

	// to version
	ToVersion *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body products switch next upgrade
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events o k body products switch next upgrade based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rollbacksNetworkFirmwareUpgradesStagedEventsOK" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion Details of the version the device will upgrade to
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion struct {

	// Id of the Version being upgraded to
	ID string `json:"id,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body products switch next upgrade to version
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events o k body products switch next upgrade to version based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyProductsSwitchNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 rollbacks network firmware upgrades staged events o k body reasons items0
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0 struct {

	// Reason for the rollback
	// Enum: [broke old features other performance stability testing unifying networks versions]
	Category string `json:"category,omitempty"`

	// Additional comment about the rollback
	Comment string `json:"comment,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body reasons items0
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["broke old features","other","performance","stability","testing","unifying networks versions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum = append(rollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum, v)
	}
}

const (

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryBrokeOldFeatures captures enum value "broke old features"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryBrokeOldFeatures string = "broke old features"

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryOther captures enum value "other"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryOther string = "other"

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryPerformance captures enum value "performance"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryPerformance string = "performance"

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryStability captures enum value "stability"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryStability string = "stability"

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryTesting captures enum value "testing"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryTesting string = "testing"

	// RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryUnifyingNetworksVersions captures enum value "unifying networks versions"
	RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0CategoryUnifyingNetworksVersions string = "unifying networks versions"
)

// prop value enum
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0TypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(o.Category) { // not required
		return nil
	}

	// value enum
	if err := o.validateCategoryEnum("category", "body", o.Category); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events o k body reasons items0 based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyReasonsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 rollbacks network firmware upgrades staged events o k body stages items0
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0 struct {

	// group
	Group *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group `json:"group,omitempty"`

	// milestones
	Milestones *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones `json:"milestones,omitempty"`

	// Current upgrade status of the group
	Status string `json:"status,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body stages items0
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) validateMilestones(formats strfmt.Registry) error {
	if swag.IsZero(o.Milestones) { // not required
		return nil
	}

	if o.Milestones != nil {
		if err := o.Milestones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events o k body stages items0 based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMilestones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if o.Group != nil {
		if err := o.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) contextValidateMilestones(ctx context.Context, formats strfmt.Registry) error {

	if o.Milestones != nil {
		if err := o.Milestones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group The staged upgrade group
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group struct {

	// Description of the Staged Upgrade Group
	Description string `json:"description,omitempty"`

	// Id of the Staged Upgrade Group
	ID string `json:"id,omitempty"`

	// Name of the Staged Upgrade Group
	Name string `json:"name,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body stages items0 group
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events o k body stages items0 group based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones The Staged Upgrade Milestones for the stage
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones struct {

	// Time that the group was canceled
	// Format: date-time
	CanceledAt strfmt.DateTime `json:"canceledAt,omitempty"`

	// Finish time for the group
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completedAt,omitempty"`

	// Scheduled start time for the group
	// Format: date-time
	ScheduledFor strfmt.DateTime `json:"scheduledFor,omitempty"`

	// Start time for the group
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events o k body stages items0 milestones
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCanceledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScheduledFor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateCanceledAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CanceledAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"canceledAt", "body", "date-time", o.CanceledAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateCompletedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"completedAt", "body", "date-time", o.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateScheduledFor(formats strfmt.Registry) error {
	if swag.IsZero(o.ScheduledFor) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"scheduledFor", "body", "date-time", o.ScheduledFor.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("milestones"+"."+"startedAt", "body", "date-time", o.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events o k body stages items0 milestones based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsOKBodyStagesItems0Milestones
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0 rollbacks network firmware upgrades staged events params body reasons items0
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0 struct {

	// Reason for the rollback
	// Required: true
	// Enum: [broke old features other performance stability testing unifying networks versions]
	Category *string `json:"category"`

	// Additional comment about the rollback
	// Required: true
	Comment *string `json:"comment"`
}

// Validate validates this rollbacks network firmware upgrades staged events params body reasons items0
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["broke old features","other","performance","stability","testing","unifying networks versions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0TypeCategoryPropEnum = append(rollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0TypeCategoryPropEnum, v)
	}
}

const (

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryBrokeOldFeatures captures enum value "broke old features"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryBrokeOldFeatures string = "broke old features"

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryOther captures enum value "other"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryOther string = "other"

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryPerformance captures enum value "performance"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryPerformance string = "performance"

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryStability captures enum value "stability"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryStability string = "stability"

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryTesting captures enum value "testing"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryTesting string = "testing"

	// RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryUnifyingNetworksVersions captures enum value "unifying networks versions"
	RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0CategoryUnifyingNetworksVersions string = "unifying networks versions"
)

// prop value enum
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0TypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", o.Category); err != nil {
		return err
	}

	// value enum
	if err := o.validateCategoryEnum("category", "body", *o.Category); err != nil {
		return err
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", o.Comment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events params body reasons items0 based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyReasonsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0 rollbacks network firmware upgrades staged events params body stages items0
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0 struct {

	// group
	Group *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group `json:"group,omitempty"`

	// milestones
	Milestones *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones `json:"milestones,omitempty"`
}

// Validate validates this rollbacks network firmware upgrades staged events params body stages items0
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) validateMilestones(formats strfmt.Registry) error {
	if swag.IsZero(o.Milestones) { // not required
		return nil
	}

	if o.Milestones != nil {
		if err := o.Milestones.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rollbacks network firmware upgrades staged events params body stages items0 based on the context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMilestones(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if o.Group != nil {
		if err := o.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) contextValidateMilestones(ctx context.Context, formats strfmt.Registry) error {

	if o.Milestones != nil {
		if err := o.Milestones.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestones")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("milestones")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group The Staged Upgrade Group containing the name and ID
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group struct {

	// ID of the Staged Upgrade Group
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this rollbacks network firmware upgrades staged events params body stages items0 group
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group) validateID(formats strfmt.Registry) error {

	if err := validate.Required("group"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events params body stages items0 group based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones The Staged Upgrade Milestones for the specific stage
swagger:model RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones
*/
type RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones struct {

	// The start time of the staged upgrade stage. (In ISO-8601 format, in the time zone of the network.)
	// Required: true
	ScheduledFor *string `json:"scheduledFor"`
}

// Validate validates this rollbacks network firmware upgrades staged events params body stages items0 milestones
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateScheduledFor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones) validateScheduledFor(formats strfmt.Registry) error {

	if err := validate.Required("milestones"+"."+"scheduledFor", "body", o.ScheduledFor); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rollbacks network firmware upgrades staged events params body stages items0 milestones based on context it is used
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones) UnmarshalBinary(b []byte) error {
	var res RollbacksNetworkFirmwareUpgradesStagedEventsParamsBodyStagesItems0Milestones
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
