// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSyslogServersReader is a Reader for the GetNetworkSyslogServers structure.
type GetNetworkSyslogServersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSyslogServersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSyslogServersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSyslogServersOK creates a GetNetworkSyslogServersOK with default headers values
func NewGetNetworkSyslogServersOK() *GetNetworkSyslogServersOK {
	return &GetNetworkSyslogServersOK{}
}

/*
GetNetworkSyslogServersOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSyslogServersOK struct {
	Payload *GetNetworkSyslogServersOKBody
}

// IsSuccess returns true when this get network syslog servers o k response has a 2xx status code
func (o *GetNetworkSyslogServersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network syslog servers o k response has a 3xx status code
func (o *GetNetworkSyslogServersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network syslog servers o k response has a 4xx status code
func (o *GetNetworkSyslogServersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network syslog servers o k response has a 5xx status code
func (o *GetNetworkSyslogServersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network syslog servers o k response a status code equal to that given
func (o *GetNetworkSyslogServersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network syslog servers o k response
func (o *GetNetworkSyslogServersOK) Code() int {
	return 200
}

func (o *GetNetworkSyslogServersOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/syslogServers][%d] getNetworkSyslogServersOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSyslogServersOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/syslogServers][%d] getNetworkSyslogServersOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSyslogServersOK) GetPayload() *GetNetworkSyslogServersOKBody {
	return o.Payload
}

func (o *GetNetworkSyslogServersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSyslogServersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSyslogServersOKBody get network syslog servers o k body
swagger:model GetNetworkSyslogServersOKBody
*/
type GetNetworkSyslogServersOKBody struct {

	// List of the syslog servers for this network
	Servers []*GetNetworkSyslogServersOKBodyServersItems0 `json:"servers"`
}

// Validate validates this get network syslog servers o k body
func (o *GetNetworkSyslogServersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSyslogServersOKBody) validateServers(formats strfmt.Registry) error {
	if swag.IsZero(o.Servers) { // not required
		return nil
	}

	for i := 0; i < len(o.Servers); i++ {
		if swag.IsZero(o.Servers[i]) { // not required
			continue
		}

		if o.Servers[i] != nil {
			if err := o.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSyslogServersOK" + "." + "servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSyslogServersOK" + "." + "servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network syslog servers o k body based on the context it is used
func (o *GetNetworkSyslogServersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSyslogServersOKBody) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Servers); i++ {

		if o.Servers[i] != nil {
			if err := o.Servers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSyslogServersOK" + "." + "servers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSyslogServersOK" + "." + "servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSyslogServersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSyslogServersOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSyslogServersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSyslogServersOKBodyServersItems0 get network syslog servers o k body servers items0
swagger:model GetNetworkSyslogServersOKBodyServersItems0
*/
type GetNetworkSyslogServersOKBodyServersItems0 struct {

	// The IP address of the syslog server
	Host string `json:"host,omitempty"`

	// The port of the syslog server
	Port int64 `json:"port,omitempty"`

	// A list of roles for the syslog server. Options (case-insensitive): 'Wireless event log', 'Appliance event log', 'Switch event log', 'Air Marshal events', 'Flows', 'URLs', 'IDS alerts', 'Security events'
	Roles []string `json:"roles"`
}

// Validate validates this get network syslog servers o k body servers items0
func (o *GetNetworkSyslogServersOKBodyServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network syslog servers o k body servers items0 based on context it is used
func (o *GetNetworkSyslogServersOKBodyServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSyslogServersOKBodyServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSyslogServersOKBodyServersItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSyslogServersOKBodyServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
