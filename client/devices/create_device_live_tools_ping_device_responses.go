// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateDeviceLiveToolsPingDeviceReader is a Reader for the CreateDeviceLiveToolsPingDevice structure.
type CreateDeviceLiveToolsPingDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateDeviceLiveToolsPingDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateDeviceLiveToolsPingDeviceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateDeviceLiveToolsPingDeviceCreated creates a CreateDeviceLiveToolsPingDeviceCreated with default headers values
func NewCreateDeviceLiveToolsPingDeviceCreated() *CreateDeviceLiveToolsPingDeviceCreated {
	return &CreateDeviceLiveToolsPingDeviceCreated{}
}

/*
CreateDeviceLiveToolsPingDeviceCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateDeviceLiveToolsPingDeviceCreated struct {
	Payload *CreateDeviceLiveToolsPingDeviceCreatedBody
}

// IsSuccess returns true when this create device live tools ping device created response has a 2xx status code
func (o *CreateDeviceLiveToolsPingDeviceCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create device live tools ping device created response has a 3xx status code
func (o *CreateDeviceLiveToolsPingDeviceCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create device live tools ping device created response has a 4xx status code
func (o *CreateDeviceLiveToolsPingDeviceCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create device live tools ping device created response has a 5xx status code
func (o *CreateDeviceLiveToolsPingDeviceCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create device live tools ping device created response a status code equal to that given
func (o *CreateDeviceLiveToolsPingDeviceCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create device live tools ping device created response
func (o *CreateDeviceLiveToolsPingDeviceCreated) Code() int {
	return 201
}

func (o *CreateDeviceLiveToolsPingDeviceCreated) Error() string {
	return fmt.Sprintf("[POST /devices/{serial}/liveTools/pingDevice][%d] createDeviceLiveToolsPingDeviceCreated  %+v", 201, o.Payload)
}

func (o *CreateDeviceLiveToolsPingDeviceCreated) String() string {
	return fmt.Sprintf("[POST /devices/{serial}/liveTools/pingDevice][%d] createDeviceLiveToolsPingDeviceCreated  %+v", 201, o.Payload)
}

func (o *CreateDeviceLiveToolsPingDeviceCreated) GetPayload() *CreateDeviceLiveToolsPingDeviceCreatedBody {
	return o.Payload
}

func (o *CreateDeviceLiveToolsPingDeviceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateDeviceLiveToolsPingDeviceCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateDeviceLiveToolsPingDeviceBody create device live tools ping device body
// Example: {"count":3}
swagger:model CreateDeviceLiveToolsPingDeviceBody
*/
type CreateDeviceLiveToolsPingDeviceBody struct {

	// Count parameter to pass to ping. [1..5], default 5
	Count int64 `json:"count,omitempty"`
}

// Validate validates this create device live tools ping device body
func (o *CreateDeviceLiveToolsPingDeviceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create device live tools ping device body based on context it is used
func (o *CreateDeviceLiveToolsPingDeviceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceLiveToolsPingDeviceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateDeviceLiveToolsPingDeviceCreatedBody create device live tools ping device created body
swagger:model CreateDeviceLiveToolsPingDeviceCreatedBody
*/
type CreateDeviceLiveToolsPingDeviceCreatedBody struct {

	// Id to check the status of your ping request.
	PingID string `json:"pingId,omitempty"`

	// request
	Request *CreateDeviceLiveToolsPingDeviceCreatedBodyRequest `json:"request,omitempty"`

	// Status of the ping request.
	Status string `json:"status,omitempty"`

	// GET this url to check the status of your ping request.
	URL string `json:"url,omitempty"`
}

// Validate validates this create device live tools ping device created body
func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) validateRequest(formats strfmt.Registry) error {
	if swag.IsZero(o.Request) { // not required
		return nil
	}

	if o.Request != nil {
		if err := o.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceLiveToolsPingDeviceCreated" + "." + "request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceLiveToolsPingDeviceCreated" + "." + "request")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create device live tools ping device created body based on the context it is used
func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) contextValidateRequest(ctx context.Context, formats strfmt.Registry) error {

	if o.Request != nil {
		if err := o.Request.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createDeviceLiveToolsPingDeviceCreated" + "." + "request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createDeviceLiveToolsPingDeviceCreated" + "." + "request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceLiveToolsPingDeviceCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateDeviceLiveToolsPingDeviceCreatedBodyRequest Ping request parameters
swagger:model CreateDeviceLiveToolsPingDeviceCreatedBodyRequest
*/
type CreateDeviceLiveToolsPingDeviceCreatedBodyRequest struct {

	// Number of pings to send
	Count int64 `json:"count,omitempty"`

	// Device serial number
	Serial string `json:"serial,omitempty"`

	// IP address or FQDN to ping
	Target string `json:"target,omitempty"`
}

// Validate validates this create device live tools ping device created body request
func (o *CreateDeviceLiveToolsPingDeviceCreatedBodyRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create device live tools ping device created body request based on context it is used
func (o *CreateDeviceLiveToolsPingDeviceCreatedBodyRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceCreatedBodyRequest) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceLiveToolsPingDeviceCreatedBodyRequest) UnmarshalBinary(b []byte) error {
	var res CreateDeviceLiveToolsPingDeviceCreatedBodyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
