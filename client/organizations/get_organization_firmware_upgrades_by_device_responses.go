// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationFirmwareUpgradesByDeviceReader is a Reader for the GetOrganizationFirmwareUpgradesByDevice structure.
type GetOrganizationFirmwareUpgradesByDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationFirmwareUpgradesByDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationFirmwareUpgradesByDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationFirmwareUpgradesByDeviceOK creates a GetOrganizationFirmwareUpgradesByDeviceOK with default headers values
func NewGetOrganizationFirmwareUpgradesByDeviceOK() *GetOrganizationFirmwareUpgradesByDeviceOK {
	return &GetOrganizationFirmwareUpgradesByDeviceOK{}
}

/*
GetOrganizationFirmwareUpgradesByDeviceOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationFirmwareUpgradesByDeviceOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0
}

// IsSuccess returns true when this get organization firmware upgrades by device o k response has a 2xx status code
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization firmware upgrades by device o k response has a 3xx status code
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization firmware upgrades by device o k response has a 4xx status code
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization firmware upgrades by device o k response has a 5xx status code
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization firmware upgrades by device o k response a status code equal to that given
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization firmware upgrades by device o k response
func (o *GetOrganizationFirmwareUpgradesByDeviceOK) Code() int {
	return 200
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/firmware/upgrades/byDevice][%d] getOrganizationFirmwareUpgradesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/firmware/upgrades/byDevice][%d] getOrganizationFirmwareUpgradesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOK) GetPayload() []*GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0 get organization firmware upgrades by device o k body items0
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0 struct {

	// Status of the device upgrade
	DeviceStatus string `json:"deviceStatus,omitempty"`

	// Name assigned to the device
	Name string `json:"name,omitempty"`

	// Serial of the device
	Serial string `json:"serial,omitempty"`

	// upgrade
	Upgrade *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade `json:"upgrade,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) validateUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.Upgrade) { // not required
		return nil
	}

	if o.Upgrade != nil {
		if err := o.Upgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization firmware upgrades by device o k body items0 based on the context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) contextValidateUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.Upgrade != nil {
		if err := o.Upgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade The devices upgrade details and status
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade struct {

	// from version
	FromVersion *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion `json:"fromVersion,omitempty"`

	// ID of the upgrade
	ID string `json:"id,omitempty"`

	// staged
	Staged *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged `json:"staged,omitempty"`

	// Status of the upgrade
	Status string `json:"status,omitempty"`

	// Start time of the upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion `json:"toVersion,omitempty"`

	// ID of the upgrade batch
	UpgradeBatchID string `json:"upgradeBatchId,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0 upgrade
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFromVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStaged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) validateFromVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.FromVersion) { // not required
		return nil
	}

	if o.FromVersion != nil {
		if err := o.FromVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) validateStaged(formats strfmt.Registry) error {
	if swag.IsZero(o.Staged) { // not required
		return nil
	}

	if o.Staged != nil {
		if err := o.Staged.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "staged")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "staged")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization firmware upgrades by device o k body items0 upgrade based on the context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFromVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStaged(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) contextValidateFromVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.FromVersion != nil {
		if err := o.FromVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "fromVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "fromVersion")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) contextValidateStaged(ctx context.Context, formats strfmt.Registry) error {

	if o.Staged != nil {
		if err := o.Staged.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "staged")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "staged")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0Upgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion The initial version of the device
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion struct {

	// ID of the initial firmware version
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	ReleaseDate string `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0 upgrade from version
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization firmware upgrades by device o k body items0 upgrade from version based on context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeFromVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged Staged upgrade
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged struct {

	// group
	Group *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup `json:"group,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0 upgrade staged
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(o.Group) { // not required
		return nil
	}

	if o.Group != nil {
		if err := o.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "staged" + "." + "group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "staged" + "." + "group")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization firmware upgrades by device o k body items0 upgrade staged based on the context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if o.Group != nil {
		if err := o.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade" + "." + "staged" + "." + "group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade" + "." + "staged" + "." + "group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStaged
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup The staged upgrade group
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup struct {

	// Id of the staged upgrade group
	ID string `json:"id,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0 upgrade staged group
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization firmware upgrades by device o k body items0 upgrade staged group based on context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeStagedGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion Version the device is upgrading to
swagger:model GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion
*/
type GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion struct {

	// ID of the initial firmware version
	ID string `json:"id,omitempty"`

	// Release date of the firmware version
	ReleaseDate string `json:"releaseDate,omitempty"`

	// Release type of the firmware version
	ReleaseType string `json:"releaseType,omitempty"`

	// Firmware version short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this get organization firmware upgrades by device o k body items0 upgrade to version
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization firmware upgrades by device o k body items0 upgrade to version based on context it is used
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res GetOrganizationFirmwareUpgradesByDeviceOKBodyItems0UpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
