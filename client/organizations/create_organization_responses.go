// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrganizationReader is a Reader for the CreateOrganization structure.
type CreateOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOrganizationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateOrganizationCreated creates a CreateOrganizationCreated with default headers values
func NewCreateOrganizationCreated() *CreateOrganizationCreated {
	return &CreateOrganizationCreated{}
}

/*
CreateOrganizationCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateOrganizationCreated struct {
	Payload *CreateOrganizationCreatedBody
}

// IsSuccess returns true when this create organization created response has a 2xx status code
func (o *CreateOrganizationCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create organization created response has a 3xx status code
func (o *CreateOrganizationCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create organization created response has a 4xx status code
func (o *CreateOrganizationCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create organization created response has a 5xx status code
func (o *CreateOrganizationCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create organization created response a status code equal to that given
func (o *CreateOrganizationCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create organization created response
func (o *CreateOrganizationCreated) Code() int {
	return 201
}

func (o *CreateOrganizationCreated) Error() string {
	return fmt.Sprintf("[POST /organizations][%d] createOrganizationCreated  %+v", 201, o.Payload)
}

func (o *CreateOrganizationCreated) String() string {
	return fmt.Sprintf("[POST /organizations][%d] createOrganizationCreated  %+v", 201, o.Payload)
}

func (o *CreateOrganizationCreated) GetPayload() *CreateOrganizationCreatedBody {
	return o.Payload
}

func (o *CreateOrganizationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrganizationCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateOrganizationBody create organization body
// Example: {"management":{"details":[{"name":"MSP ID","value":"123456"}]},"name":"My organization"}
swagger:model CreateOrganizationBody
*/
type CreateOrganizationBody struct {

	// management
	Management *CreateOrganizationParamsBodyManagement `json:"management,omitempty"`

	// The name of the organization
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create organization body
func (o *CreateOrganizationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationBody) validateManagement(formats strfmt.Registry) error {
	if swag.IsZero(o.Management) { // not required
		return nil
	}

	if o.Management != nil {
		if err := o.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganization" + "." + "management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganization" + "." + "management")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createOrganization"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create organization body based on the context it is used
func (o *CreateOrganizationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationBody) contextValidateManagement(ctx context.Context, formats strfmt.Registry) error {

	if o.Management != nil {
		if err := o.Management.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganization" + "." + "management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganization" + "." + "management")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationBody) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBody create organization created body
swagger:model CreateOrganizationCreatedBody
*/
type CreateOrganizationCreatedBody struct {

	// api
	API *CreateOrganizationCreatedBodyAPI `json:"api,omitempty"`

	// cloud
	Cloud *CreateOrganizationCreatedBodyCloud `json:"cloud,omitempty"`

	// Organization ID
	ID string `json:"id,omitempty"`

	// licensing
	Licensing *CreateOrganizationCreatedBodyLicensing `json:"licensing,omitempty"`

	// management
	Management *CreateOrganizationCreatedBodyManagement `json:"management,omitempty"`

	// Organization name
	Name string `json:"name,omitempty"`

	// Organization URL
	URL string `json:"url,omitempty"`
}

// Validate validates this create organization created body
func (o *CreateOrganizationCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLicensing(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBody) validateAPI(formats strfmt.Registry) error {
	if swag.IsZero(o.API) { // not required
		return nil
	}

	if o.API != nil {
		if err := o.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "api")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(o.Cloud) { // not required
		return nil
	}

	if o.Cloud != nil {
		if err := o.Cloud.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "cloud")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) validateLicensing(formats strfmt.Registry) error {
	if swag.IsZero(o.Licensing) { // not required
		return nil
	}

	if o.Licensing != nil {
		if err := o.Licensing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "licensing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "licensing")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) validateManagement(formats strfmt.Registry) error {
	if swag.IsZero(o.Management) { // not required
		return nil
	}

	if o.Management != nil {
		if err := o.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "management")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create organization created body based on the context it is used
func (o *CreateOrganizationCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCloud(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLicensing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBody) contextValidateAPI(ctx context.Context, formats strfmt.Registry) error {

	if o.API != nil {
		if err := o.API.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "api")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) contextValidateCloud(ctx context.Context, formats strfmt.Registry) error {

	if o.Cloud != nil {
		if err := o.Cloud.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "cloud")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) contextValidateLicensing(ctx context.Context, formats strfmt.Registry) error {

	if o.Licensing != nil {
		if err := o.Licensing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "licensing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "licensing")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrganizationCreatedBody) contextValidateManagement(ctx context.Context, formats strfmt.Registry) error {

	if o.Management != nil {
		if err := o.Management.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "management")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyAPI API related settings
swagger:model CreateOrganizationCreatedBodyAPI
*/
type CreateOrganizationCreatedBodyAPI struct {

	// Enable API access
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this create organization created body API
func (o *CreateOrganizationCreatedBodyAPI) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create organization created body API based on context it is used
func (o *CreateOrganizationCreatedBodyAPI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyAPI) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyAPI) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyCloud Data for this organization
swagger:model CreateOrganizationCreatedBodyCloud
*/
type CreateOrganizationCreatedBodyCloud struct {

	// region
	Region *CreateOrganizationCreatedBodyCloudRegion `json:"region,omitempty"`
}

// Validate validates this create organization created body cloud
func (o *CreateOrganizationCreatedBodyCloud) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBodyCloud) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "cloud" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "cloud" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create organization created body cloud based on the context it is used
func (o *CreateOrganizationCreatedBodyCloud) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBodyCloud) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {
		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrganizationCreated" + "." + "cloud" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createOrganizationCreated" + "." + "cloud" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyCloud) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyCloud) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyCloud
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyCloudRegion Region info
swagger:model CreateOrganizationCreatedBodyCloudRegion
*/
type CreateOrganizationCreatedBodyCloudRegion struct {

	// Name of region
	Name string `json:"name,omitempty"`
}

// Validate validates this create organization created body cloud region
func (o *CreateOrganizationCreatedBodyCloudRegion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create organization created body cloud region based on context it is used
func (o *CreateOrganizationCreatedBodyCloudRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyCloudRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyCloudRegion) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyCloudRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyLicensing Licensing related settings
swagger:model CreateOrganizationCreatedBodyLicensing
*/
type CreateOrganizationCreatedBodyLicensing struct {

	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	// Enum: [co-term per-device subscription]
	Model string `json:"model,omitempty"`
}

// Validate validates this create organization created body licensing
func (o *CreateOrganizationCreatedBodyLicensing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationCreatedBodyLicensingTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["co-term","per-device","subscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationCreatedBodyLicensingTypeModelPropEnum = append(createOrganizationCreatedBodyLicensingTypeModelPropEnum, v)
	}
}

const (

	// CreateOrganizationCreatedBodyLicensingModelCoDashTerm captures enum value "co-term"
	CreateOrganizationCreatedBodyLicensingModelCoDashTerm string = "co-term"

	// CreateOrganizationCreatedBodyLicensingModelPerDashDevice captures enum value "per-device"
	CreateOrganizationCreatedBodyLicensingModelPerDashDevice string = "per-device"

	// CreateOrganizationCreatedBodyLicensingModelSubscription captures enum value "subscription"
	CreateOrganizationCreatedBodyLicensingModelSubscription string = "subscription"
)

// prop value enum
func (o *CreateOrganizationCreatedBodyLicensing) validateModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationCreatedBodyLicensingTypeModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationCreatedBodyLicensing) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(o.Model) { // not required
		return nil
	}

	// value enum
	if err := o.validateModelEnum("createOrganizationCreated"+"."+"licensing"+"."+"model", "body", o.Model); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create organization created body licensing based on context it is used
func (o *CreateOrganizationCreatedBodyLicensing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyLicensing) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyLicensing) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyLicensing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyManagement Information about the organization's management system
swagger:model CreateOrganizationCreatedBodyManagement
*/
type CreateOrganizationCreatedBodyManagement struct {

	// Details related to organization management, possibly empty
	Details []*CreateOrganizationCreatedBodyManagementDetailsItems0 `json:"details"`
}

// Validate validates this create organization created body management
func (o *CreateOrganizationCreatedBodyManagement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBodyManagement) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationCreated" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationCreated" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create organization created body management based on the context it is used
func (o *CreateOrganizationCreatedBodyManagement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationCreatedBodyManagement) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationCreated" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationCreated" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyManagement) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyManagement) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyManagement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationCreatedBodyManagementDetailsItems0 create organization created body management details items0
swagger:model CreateOrganizationCreatedBodyManagementDetailsItems0
*/
type CreateOrganizationCreatedBodyManagementDetailsItems0 struct {

	// Name of management data
	Name string `json:"name,omitempty"`

	// Value of management data
	Value string `json:"value,omitempty"`
}

// Validate validates this create organization created body management details items0
func (o *CreateOrganizationCreatedBodyManagementDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create organization created body management details items0 based on context it is used
func (o *CreateOrganizationCreatedBodyManagementDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyManagementDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationCreatedBodyManagementDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationCreatedBodyManagementDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationParamsBodyManagement Information about the organization's management system
swagger:model CreateOrganizationParamsBodyManagement
*/
type CreateOrganizationParamsBodyManagement struct {

	// Details related to organization management, possibly empty
	Details []*CreateOrganizationParamsBodyManagementDetailsItems0 `json:"details"`
}

// Validate validates this create organization params body management
func (o *CreateOrganizationParamsBodyManagement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationParamsBodyManagement) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganization" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganization" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create organization params body management based on the context it is used
func (o *CreateOrganizationParamsBodyManagement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationParamsBodyManagement) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganization" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganization" + "." + "management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationParamsBodyManagement) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationParamsBodyManagement) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationParamsBodyManagement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateOrganizationParamsBodyManagementDetailsItems0 create organization params body management details items0
swagger:model CreateOrganizationParamsBodyManagementDetailsItems0
*/
type CreateOrganizationParamsBodyManagementDetailsItems0 struct {

	// Name of management data
	Name string `json:"name,omitempty"`

	// Value of management data
	Value string `json:"value,omitempty"`
}

// Validate validates this create organization params body management details items0
func (o *CreateOrganizationParamsBodyManagementDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create organization params body management details items0 based on context it is used
func (o *CreateOrganizationParamsBodyManagementDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationParamsBodyManagementDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationParamsBodyManagementDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationParamsBodyManagementDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
