// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationDevicesStatusesReader is a Reader for the GetOrganizationDevicesStatuses structure.
type GetOrganizationDevicesStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationDevicesStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationDevicesStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationDevicesStatusesOK creates a GetOrganizationDevicesStatusesOK with default headers values
func NewGetOrganizationDevicesStatusesOK() *GetOrganizationDevicesStatusesOK {
	return &GetOrganizationDevicesStatusesOK{}
}

/*
GetOrganizationDevicesStatusesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationDevicesStatusesOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload *GetOrganizationDevicesStatusesOKBody
}

// IsSuccess returns true when this get organization devices statuses o k response has a 2xx status code
func (o *GetOrganizationDevicesStatusesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization devices statuses o k response has a 3xx status code
func (o *GetOrganizationDevicesStatusesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization devices statuses o k response has a 4xx status code
func (o *GetOrganizationDevicesStatusesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization devices statuses o k response has a 5xx status code
func (o *GetOrganizationDevicesStatusesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization devices statuses o k response a status code equal to that given
func (o *GetOrganizationDevicesStatusesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization devices statuses o k response
func (o *GetOrganizationDevicesStatusesOK) Code() int {
	return 200
}

func (o *GetOrganizationDevicesStatusesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/statuses][%d] getOrganizationDevicesStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesStatusesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/statuses][%d] getOrganizationDevicesStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesStatusesOK) GetPayload() *GetOrganizationDevicesStatusesOKBody {
	return o.Payload
}

func (o *GetOrganizationDevicesStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	o.Payload = new(GetOrganizationDevicesStatusesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationDevicesStatusesOKBody get organization devices statuses o k body
swagger:model GetOrganizationDevicesStatusesOKBody
*/
type GetOrganizationDevicesStatusesOKBody struct {

	// components
	Components *GetOrganizationDevicesStatusesOKBodyComponents `json:"components,omitempty"`

	// IP Gateway
	Gateway string `json:"gateway,omitempty"`

	// IP Type
	IPType string `json:"ipType,omitempty"`

	// LAN IP Address
	LanIP string `json:"lanIp,omitempty"`

	// Device Last Reported Location
	LastReportedAt string `json:"lastReportedAt,omitempty"`

	// MAC Address
	Mac string `json:"mac,omitempty"`

	// Model
	Model string `json:"model,omitempty"`

	// Device Name
	Name string `json:"name,omitempty"`

	// Network ID
	NetworkID string `json:"networkId,omitempty"`

	// Primary DNS
	PrimaryDNS string `json:"primaryDns,omitempty"`

	// Product Type
	ProductType string `json:"productType,omitempty"`

	// Public IP Address
	PublicIP string `json:"publicIp,omitempty"`

	// Secondary DNS
	SecondaryDNS string `json:"secondaryDns,omitempty"`

	// Device Serial Number
	Serial string `json:"serial,omitempty"`

	// Device Status
	Status string `json:"status,omitempty"`

	// Tags
	Tags []string `json:"tags"`
}

// Validate validates this get organization devices statuses o k body
func (o *GetOrganizationDevicesStatusesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComponents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesStatusesOKBody) validateComponents(formats strfmt.Registry) error {
	if swag.IsZero(o.Components) { // not required
		return nil
	}

	if o.Components != nil {
		if err := o.Components.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationDevicesStatusesOK" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationDevicesStatusesOK" + "." + "components")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization devices statuses o k body based on the context it is used
func (o *GetOrganizationDevicesStatusesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesStatusesOKBody) contextValidateComponents(ctx context.Context, formats strfmt.Registry) error {

	if o.Components != nil {
		if err := o.Components.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationDevicesStatusesOK" + "." + "components")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationDevicesStatusesOK" + "." + "components")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesStatusesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesStatusesOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesStatusesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesStatusesOKBodyComponents Components
swagger:model GetOrganizationDevicesStatusesOKBodyComponents
*/
type GetOrganizationDevicesStatusesOKBodyComponents struct {

	// Power Supplies
	PowerSupplies []string `json:"powerSupplies"`
}

// Validate validates this get organization devices statuses o k body components
func (o *GetOrganizationDevicesStatusesOKBodyComponents) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices statuses o k body components based on context it is used
func (o *GetOrganizationDevicesStatusesOKBodyComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesStatusesOKBodyComponents) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesStatusesOKBodyComponents) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesStatusesOKBodyComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
