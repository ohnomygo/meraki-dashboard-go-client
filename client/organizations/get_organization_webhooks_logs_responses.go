// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationWebhooksLogsReader is a Reader for the GetOrganizationWebhooksLogs structure.
type GetOrganizationWebhooksLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationWebhooksLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationWebhooksLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationWebhooksLogsOK creates a GetOrganizationWebhooksLogsOK with default headers values
func NewGetOrganizationWebhooksLogsOK() *GetOrganizationWebhooksLogsOK {
	return &GetOrganizationWebhooksLogsOK{}
}

/*
GetOrganizationWebhooksLogsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationWebhooksLogsOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationWebhooksLogsOKBodyItems0
}

// IsSuccess returns true when this get organization webhooks logs o k response has a 2xx status code
func (o *GetOrganizationWebhooksLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization webhooks logs o k response has a 3xx status code
func (o *GetOrganizationWebhooksLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization webhooks logs o k response has a 4xx status code
func (o *GetOrganizationWebhooksLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization webhooks logs o k response has a 5xx status code
func (o *GetOrganizationWebhooksLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization webhooks logs o k response a status code equal to that given
func (o *GetOrganizationWebhooksLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization webhooks logs o k response
func (o *GetOrganizationWebhooksLogsOK) Code() int {
	return 200
}

func (o *GetOrganizationWebhooksLogsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/webhooks/logs][%d] getOrganizationWebhooksLogsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationWebhooksLogsOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/webhooks/logs][%d] getOrganizationWebhooksLogsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationWebhooksLogsOK) GetPayload() []*GetOrganizationWebhooksLogsOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationWebhooksLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationWebhooksLogsOKBodyItems0 get organization webhooks logs o k body items0
swagger:model GetOrganizationWebhooksLogsOKBodyItems0
*/
type GetOrganizationWebhooksLogsOKBodyItems0 struct {

	// Type of alert that the webhook is delivering
	AlertType string `json:"alertType,omitempty"`

	// When the webhook log was created, in ISO8601 format
	// Format: date-time
	LoggedAt strfmt.DateTime `json:"loggedAt,omitempty"`

	// Network ID for the webhook log
	NetworkID string `json:"networkId,omitempty"`

	// ID for the webhook log's organization
	OrganizationID string `json:"organizationId,omitempty"`

	// Response code from the webhook
	ResponseCode int64 `json:"responseCode,omitempty"`

	// Duration of the response, in milliseconds
	ResponseDuration int64 `json:"responseDuration,omitempty"`

	// When the webhook was sent, in ISO8601 format
	// Format: date-time
	SentAt strfmt.DateTime `json:"sentAt,omitempty"`

	// URL where the webhook was sent
	URL string `json:"url,omitempty"`
}

// Validate validates this get organization webhooks logs o k body items0
func (o *GetOrganizationWebhooksLogsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLoggedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSentAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWebhooksLogsOKBodyItems0) validateLoggedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.LoggedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("loggedAt", "body", "date-time", o.LoggedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationWebhooksLogsOKBodyItems0) validateSentAt(formats strfmt.Registry) error {
	if swag.IsZero(o.SentAt) { // not required
		return nil
	}

	if err := validate.FormatOf("sentAt", "body", "date-time", o.SentAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organization webhooks logs o k body items0 based on context it is used
func (o *GetOrganizationWebhooksLogsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWebhooksLogsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWebhooksLogsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWebhooksLogsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
