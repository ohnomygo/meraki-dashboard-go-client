// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationsReader is a Reader for the GetOrganizations structure.
type GetOrganizationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationsOK creates a GetOrganizationsOK with default headers values
func NewGetOrganizationsOK() *GetOrganizationsOK {
	return &GetOrganizationsOK{}
}

/*
GetOrganizationsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationsOK struct {
	Payload []*GetOrganizationsOKBodyItems0
}

// IsSuccess returns true when this get organizations o k response has a 2xx status code
func (o *GetOrganizationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organizations o k response has a 3xx status code
func (o *GetOrganizationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organizations o k response has a 4xx status code
func (o *GetOrganizationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organizations o k response has a 5xx status code
func (o *GetOrganizationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organizations o k response a status code equal to that given
func (o *GetOrganizationsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organizations o k response
func (o *GetOrganizationsOK) Code() int {
	return 200
}

func (o *GetOrganizationsOK) Error() string {
	return fmt.Sprintf("[GET /organizations][%d] getOrganizationsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOK) String() string {
	return fmt.Sprintf("[GET /organizations][%d] getOrganizationsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationsOK) GetPayload() []*GetOrganizationsOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationsOKBodyItems0 get organizations o k body items0
swagger:model GetOrganizationsOKBodyItems0
*/
type GetOrganizationsOKBodyItems0 struct {

	// api
	API *GetOrganizationsOKBodyItems0API `json:"api,omitempty"`

	// cloud
	Cloud *GetOrganizationsOKBodyItems0Cloud `json:"cloud,omitempty"`

	// Organization ID
	ID string `json:"id,omitempty"`

	// licensing
	Licensing *GetOrganizationsOKBodyItems0Licensing `json:"licensing,omitempty"`

	// management
	Management *GetOrganizationsOKBodyItems0Management `json:"management,omitempty"`

	// Organization name
	Name string `json:"name,omitempty"`

	// Organization URL
	URL string `json:"url,omitempty"`
}

// Validate validates this get organizations o k body items0
func (o *GetOrganizationsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLicensing(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateManagement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0) validateAPI(formats strfmt.Registry) error {
	if swag.IsZero(o.API) { // not required
		return nil
	}

	if o.API != nil {
		if err := o.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) validateCloud(formats strfmt.Registry) error {
	if swag.IsZero(o.Cloud) { // not required
		return nil
	}

	if o.Cloud != nil {
		if err := o.Cloud.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) validateLicensing(formats strfmt.Registry) error {
	if swag.IsZero(o.Licensing) { // not required
		return nil
	}

	if o.Licensing != nil {
		if err := o.Licensing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licensing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licensing")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) validateManagement(formats strfmt.Registry) error {
	if swag.IsZero(o.Management) { // not required
		return nil
	}

	if o.Management != nil {
		if err := o.Management.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organizations o k body items0 based on the context it is used
func (o *GetOrganizationsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCloud(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLicensing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateManagement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0) contextValidateAPI(ctx context.Context, formats strfmt.Registry) error {

	if o.API != nil {
		if err := o.API.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) contextValidateCloud(ctx context.Context, formats strfmt.Registry) error {

	if o.Cloud != nil {
		if err := o.Cloud.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) contextValidateLicensing(ctx context.Context, formats strfmt.Registry) error {

	if o.Licensing != nil {
		if err := o.Licensing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licensing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licensing")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationsOKBodyItems0) contextValidateManagement(ctx context.Context, formats strfmt.Registry) error {

	if o.Management != nil {
		if err := o.Management.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0API API related settings
swagger:model GetOrganizationsOKBodyItems0API
*/
type GetOrganizationsOKBodyItems0API struct {

	// Enable API access
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this get organizations o k body items0 API
func (o *GetOrganizationsOKBodyItems0API) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organizations o k body items0 API based on context it is used
func (o *GetOrganizationsOKBodyItems0API) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0API) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0API) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0API
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0Cloud Data for this organization
swagger:model GetOrganizationsOKBodyItems0Cloud
*/
type GetOrganizationsOKBodyItems0Cloud struct {

	// region
	Region *GetOrganizationsOKBodyItems0CloudRegion `json:"region,omitempty"`
}

// Validate validates this get organizations o k body items0 cloud
func (o *GetOrganizationsOKBodyItems0Cloud) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0Cloud) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organizations o k body items0 cloud based on the context it is used
func (o *GetOrganizationsOKBodyItems0Cloud) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0Cloud) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {
		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Cloud) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Cloud) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0Cloud
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0CloudRegion Region info
swagger:model GetOrganizationsOKBodyItems0CloudRegion
*/
type GetOrganizationsOKBodyItems0CloudRegion struct {

	// Name of region
	Name string `json:"name,omitempty"`
}

// Validate validates this get organizations o k body items0 cloud region
func (o *GetOrganizationsOKBodyItems0CloudRegion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organizations o k body items0 cloud region based on context it is used
func (o *GetOrganizationsOKBodyItems0CloudRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0CloudRegion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0CloudRegion) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0CloudRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0Licensing Licensing related settings
swagger:model GetOrganizationsOKBodyItems0Licensing
*/
type GetOrganizationsOKBodyItems0Licensing struct {

	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	// Enum: [co-term per-device subscription]
	Model string `json:"model,omitempty"`
}

// Validate validates this get organizations o k body items0 licensing
func (o *GetOrganizationsOKBodyItems0Licensing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationsOKBodyItems0LicensingTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["co-term","per-device","subscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationsOKBodyItems0LicensingTypeModelPropEnum = append(getOrganizationsOKBodyItems0LicensingTypeModelPropEnum, v)
	}
}

const (

	// GetOrganizationsOKBodyItems0LicensingModelCoDashTerm captures enum value "co-term"
	GetOrganizationsOKBodyItems0LicensingModelCoDashTerm string = "co-term"

	// GetOrganizationsOKBodyItems0LicensingModelPerDashDevice captures enum value "per-device"
	GetOrganizationsOKBodyItems0LicensingModelPerDashDevice string = "per-device"

	// GetOrganizationsOKBodyItems0LicensingModelSubscription captures enum value "subscription"
	GetOrganizationsOKBodyItems0LicensingModelSubscription string = "subscription"
)

// prop value enum
func (o *GetOrganizationsOKBodyItems0Licensing) validateModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationsOKBodyItems0LicensingTypeModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0Licensing) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(o.Model) { // not required
		return nil
	}

	// value enum
	if err := o.validateModelEnum("licensing"+"."+"model", "body", o.Model); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organizations o k body items0 licensing based on context it is used
func (o *GetOrganizationsOKBodyItems0Licensing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Licensing) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Licensing) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0Licensing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0Management Information about the organization's management system
swagger:model GetOrganizationsOKBodyItems0Management
*/
type GetOrganizationsOKBodyItems0Management struct {

	// Details related to organization management, possibly empty
	Details []*GetOrganizationsOKBodyItems0ManagementDetailsItems0 `json:"details"`
}

// Validate validates this get organizations o k body items0 management
func (o *GetOrganizationsOKBodyItems0Management) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0Management) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organizations o k body items0 management based on the context it is used
func (o *GetOrganizationsOKBodyItems0Management) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationsOKBodyItems0Management) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("management" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("management" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Management) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0Management) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0Management
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationsOKBodyItems0ManagementDetailsItems0 get organizations o k body items0 management details items0
swagger:model GetOrganizationsOKBodyItems0ManagementDetailsItems0
*/
type GetOrganizationsOKBodyItems0ManagementDetailsItems0 struct {

	// Name of management data
	Name string `json:"name,omitempty"`

	// Value of management data
	Value string `json:"value,omitempty"`
}

// Validate validates this get organizations o k body items0 management details items0
func (o *GetOrganizationsOKBodyItems0ManagementDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organizations o k body items0 management details items0 based on context it is used
func (o *GetOrganizationsOKBodyItems0ManagementDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0ManagementDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationsOKBodyItems0ManagementDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationsOKBodyItems0ManagementDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
