// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationFirmwareUpgradesParams creates a new GetOrganizationFirmwareUpgradesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationFirmwareUpgradesParams() *GetOrganizationFirmwareUpgradesParams {
	return &GetOrganizationFirmwareUpgradesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationFirmwareUpgradesParamsWithTimeout creates a new GetOrganizationFirmwareUpgradesParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationFirmwareUpgradesParamsWithTimeout(timeout time.Duration) *GetOrganizationFirmwareUpgradesParams {
	return &GetOrganizationFirmwareUpgradesParams{
		timeout: timeout,
	}
}

// NewGetOrganizationFirmwareUpgradesParamsWithContext creates a new GetOrganizationFirmwareUpgradesParams object
// with the ability to set a context for a request.
func NewGetOrganizationFirmwareUpgradesParamsWithContext(ctx context.Context) *GetOrganizationFirmwareUpgradesParams {
	return &GetOrganizationFirmwareUpgradesParams{
		Context: ctx,
	}
}

// NewGetOrganizationFirmwareUpgradesParamsWithHTTPClient creates a new GetOrganizationFirmwareUpgradesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationFirmwareUpgradesParamsWithHTTPClient(client *http.Client) *GetOrganizationFirmwareUpgradesParams {
	return &GetOrganizationFirmwareUpgradesParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationFirmwareUpgradesParams contains all the parameters to send to the API endpoint

	for the get organization firmware upgrades operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationFirmwareUpgradesParams struct {

	// OrganizationID.
	OrganizationID string

	/* ProductType.

	   The product type in a given upgrade ID
	*/
	ProductType []string

	/* Status.

	   The status of an upgrade
	*/
	Status []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization firmware upgrades params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationFirmwareUpgradesParams) WithDefaults() *GetOrganizationFirmwareUpgradesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization firmware upgrades params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationFirmwareUpgradesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithTimeout(timeout time.Duration) *GetOrganizationFirmwareUpgradesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithContext(ctx context.Context) *GetOrganizationFirmwareUpgradesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithHTTPClient(client *http.Client) *GetOrganizationFirmwareUpgradesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithOrganizationID(organizationID string) *GetOrganizationFirmwareUpgradesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithProductType adds the productType to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithProductType(productType []string) *GetOrganizationFirmwareUpgradesParams {
	o.SetProductType(productType)
	return o
}

// SetProductType adds the productType to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetProductType(productType []string) {
	o.ProductType = productType
}

// WithStatus adds the status to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) WithStatus(status []string) *GetOrganizationFirmwareUpgradesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get organization firmware upgrades params
func (o *GetOrganizationFirmwareUpgradesParams) SetStatus(status []string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationFirmwareUpgradesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.ProductType != nil {

		// binding items for productType
		joinedProductType := o.bindParamProductType(reg)

		// query array param productType
		if err := r.SetQueryParam("productType", joinedProductType...); err != nil {
			return err
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationFirmwareUpgrades binds the parameter productType
func (o *GetOrganizationFirmwareUpgradesParams) bindParamProductType(formats strfmt.Registry) []string {
	productTypeIR := o.ProductType

	var productTypeIC []string
	for _, productTypeIIR := range productTypeIR { // explode []string

		productTypeIIV := productTypeIIR // string as string
		productTypeIC = append(productTypeIC, productTypeIIV)
	}

	// items.CollectionFormat: ""
	productTypeIS := swag.JoinByFormat(productTypeIC, "")

	return productTypeIS
}

// bindParamGetOrganizationFirmwareUpgrades binds the parameter status
func (o *GetOrganizationFirmwareUpgradesParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: ""
	statusIS := swag.JoinByFormat(statusIC, "")

	return statusIS
}
