// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationActionBatchReader is a Reader for the GetOrganizationActionBatch structure.
type GetOrganizationActionBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationActionBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationActionBatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationActionBatchOK creates a GetOrganizationActionBatchOK with default headers values
func NewGetOrganizationActionBatchOK() *GetOrganizationActionBatchOK {
	return &GetOrganizationActionBatchOK{}
}

/*
GetOrganizationActionBatchOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationActionBatchOK struct {
	Payload *GetOrganizationActionBatchOKBody
}

// IsSuccess returns true when this get organization action batch o k response has a 2xx status code
func (o *GetOrganizationActionBatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization action batch o k response has a 3xx status code
func (o *GetOrganizationActionBatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization action batch o k response has a 4xx status code
func (o *GetOrganizationActionBatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization action batch o k response has a 5xx status code
func (o *GetOrganizationActionBatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization action batch o k response a status code equal to that given
func (o *GetOrganizationActionBatchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization action batch o k response
func (o *GetOrganizationActionBatchOK) Code() int {
	return 200
}

func (o *GetOrganizationActionBatchOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/actionBatches/{actionBatchId}][%d] getOrganizationActionBatchOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationActionBatchOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/actionBatches/{actionBatchId}][%d] getOrganizationActionBatchOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationActionBatchOK) GetPayload() *GetOrganizationActionBatchOKBody {
	return o.Payload
}

func (o *GetOrganizationActionBatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationActionBatchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationActionBatchOKBody get organization action batch o k body
swagger:model GetOrganizationActionBatchOKBody
*/
type GetOrganizationActionBatchOKBody struct {

	// A set of changes made as part of this action (<a href='https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/'>more details</a>)
	// Required: true
	Actions []*GetOrganizationActionBatchOKBodyActionsItems0 `json:"actions"`

	// Flag describing whether the action should be previewed before executing or not
	Confirmed bool `json:"confirmed,omitempty"`

	// ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
	ID string `json:"id,omitempty"`

	// ID of the organization this action batch belongs to
	OrganizationID string `json:"organizationId,omitempty"`

	// status
	Status *GetOrganizationActionBatchOKBodyStatus `json:"status,omitempty"`

	// Flag describing whether actions should run synchronously or asynchronously
	Synchronous bool `json:"synchronous,omitempty"`
}

// Validate validates this get organization action batch o k body
func (o *GetOrganizationActionBatchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationActionBatchOKBody) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationActionBatchOK"+"."+"actions", "body", o.Actions); err != nil {
		return err
	}

	for i := 0; i < len(o.Actions); i++ {
		if swag.IsZero(o.Actions[i]) { // not required
			continue
		}

		if o.Actions[i] != nil {
			if err := o.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationActionBatchOK" + "." + "actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationActionBatchOK" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationActionBatchOKBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	if o.Status != nil {
		if err := o.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationActionBatchOK" + "." + "status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationActionBatchOK" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization action batch o k body based on the context it is used
func (o *GetOrganizationActionBatchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationActionBatchOKBody) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Actions); i++ {

		if o.Actions[i] != nil {
			if err := o.Actions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationActionBatchOK" + "." + "actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationActionBatchOK" + "." + "actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationActionBatchOKBody) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if o.Status != nil {
		if err := o.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getOrganizationActionBatchOK" + "." + "status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getOrganizationActionBatchOK" + "." + "status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationActionBatchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationActionBatchOKBodyActionsItems0 get organization action batch o k body actions items0
swagger:model GetOrganizationActionBatchOKBodyActionsItems0
*/
type GetOrganizationActionBatchOKBodyActionsItems0 struct {

	// The operation to be used by this action
	// Required: true
	Operation *string `json:"operation"`

	// Unique identifier for the resource to be acted on
	// Required: true
	Resource *string `json:"resource"`
}

// Validate validates this get organization action batch o k body actions items0
func (o *GetOrganizationActionBatchOKBodyActionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationActionBatchOKBodyActionsItems0) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", o.Operation); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationActionBatchOKBodyActionsItems0) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", o.Resource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organization action batch o k body actions items0 based on context it is used
func (o *GetOrganizationActionBatchOKBodyActionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyActionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyActionsItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationActionBatchOKBodyActionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationActionBatchOKBodyStatus Status of action batch
swagger:model GetOrganizationActionBatchOKBodyStatus
*/
type GetOrganizationActionBatchOKBodyStatus struct {

	// Flag describing whether all actions in the action batch have completed
	Completed bool `json:"completed,omitempty"`

	// Resources created as a result of this action batch
	// Required: true
	CreatedResources []*GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0 `json:"createdResources"`

	// List of errors encountered when running actions in the action batch
	Errors []string `json:"errors"`

	// Flag describing whether any actions in the action batch failed
	Failed bool `json:"failed,omitempty"`
}

// Validate validates this get organization action batch o k body status
func (o *GetOrganizationActionBatchOKBodyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationActionBatchOKBodyStatus) validateCreatedResources(formats strfmt.Registry) error {

	if err := validate.Required("getOrganizationActionBatchOK"+"."+"status"+"."+"createdResources", "body", o.CreatedResources); err != nil {
		return err
	}

	for i := 0; i < len(o.CreatedResources); i++ {
		if swag.IsZero(o.CreatedResources[i]) { // not required
			continue
		}

		if o.CreatedResources[i] != nil {
			if err := o.CreatedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationActionBatchOK" + "." + "status" + "." + "createdResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationActionBatchOK" + "." + "status" + "." + "createdResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization action batch o k body status based on the context it is used
func (o *GetOrganizationActionBatchOKBodyStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreatedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationActionBatchOKBodyStatus) contextValidateCreatedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CreatedResources); i++ {

		if o.CreatedResources[i] != nil {
			if err := o.CreatedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationActionBatchOK" + "." + "status" + "." + "createdResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationActionBatchOK" + "." + "status" + "." + "createdResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyStatus) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyStatus) UnmarshalBinary(b []byte) error {
	var res GetOrganizationActionBatchOKBodyStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0 get organization action batch o k body status created resources items0
swagger:model GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0
*/
type GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0 struct {

	// ID of the created resource
	ID string `json:"id,omitempty"`

	// URI, not including base, of the created resource
	URI string `json:"uri,omitempty"`
}

// Validate validates this get organization action batch o k body status created resources items0
func (o *GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization action batch o k body status created resources items0 based on context it is used
func (o *GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationActionBatchOKBodyStatusCreatedResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
