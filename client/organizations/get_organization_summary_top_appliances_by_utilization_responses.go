// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationSummaryTopAppliancesByUtilizationReader is a Reader for the GetOrganizationSummaryTopAppliancesByUtilization structure.
type GetOrganizationSummaryTopAppliancesByUtilizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationSummaryTopAppliancesByUtilizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationSummaryTopAppliancesByUtilizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationSummaryTopAppliancesByUtilizationOK creates a GetOrganizationSummaryTopAppliancesByUtilizationOK with default headers values
func NewGetOrganizationSummaryTopAppliancesByUtilizationOK() *GetOrganizationSummaryTopAppliancesByUtilizationOK {
	return &GetOrganizationSummaryTopAppliancesByUtilizationOK{}
}

/*
GetOrganizationSummaryTopAppliancesByUtilizationOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationSummaryTopAppliancesByUtilizationOK struct {
	Payload []*GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0
}

// IsSuccess returns true when this get organization summary top appliances by utilization o k response has a 2xx status code
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization summary top appliances by utilization o k response has a 3xx status code
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization summary top appliances by utilization o k response has a 4xx status code
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization summary top appliances by utilization o k response has a 5xx status code
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization summary top appliances by utilization o k response a status code equal to that given
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization summary top appliances by utilization o k response
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) Code() int {
	return 200
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/summary/top/appliances/byUtilization][%d] getOrganizationSummaryTopAppliancesByUtilizationOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/summary/top/appliances/byUtilization][%d] getOrganizationSummaryTopAppliancesByUtilizationOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) GetPayload() []*GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0 get organization summary top appliances by utilization o k body items0
swagger:model GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0
*/
type GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0 struct {

	// Mac address of the appliance
	Mac string `json:"mac,omitempty"`

	// Model of the appliance
	Model string `json:"model,omitempty"`

	// Name of the appliance
	Name string `json:"name,omitempty"`

	// network
	Network *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network `json:"network,omitempty"`

	// Serial number of the appliance
	Serial string `json:"serial,omitempty"`

	// utilization
	Utilization *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization `json:"utilization,omitempty"`
}

// Validate validates this get organization summary top appliances by utilization o k body items0
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUtilization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) validateUtilization(formats strfmt.Registry) error {
	if swag.IsZero(o.Utilization) { // not required
		return nil
	}

	if o.Utilization != nil {
		if err := o.Utilization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utilization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization summary top appliances by utilization o k body items0 based on the context it is used
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUtilization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {
		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) contextValidateUtilization(ctx context.Context, formats strfmt.Registry) error {

	if o.Utilization != nil {
		if err := o.Utilization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utilization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utilization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network Network info
swagger:model GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network
*/
type GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network struct {

	// Network id
	ID string `json:"id,omitempty"`

	// Network name
	Name string `json:"name,omitempty"`
}

// Validate validates this get organization summary top appliances by utilization o k body items0 network
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization summary top appliances by utilization o k body items0 network based on context it is used
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization Utilization of the appliance
swagger:model GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization
*/
type GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization struct {

	// average
	Average *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage `json:"average,omitempty"`
}

// Validate validates this get organization summary top appliances by utilization o k body items0 utilization
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAverage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) validateAverage(formats strfmt.Registry) error {
	if swag.IsZero(o.Average) { // not required
		return nil
	}

	if o.Average != nil {
		if err := o.Average.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utilization" + "." + "average")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utilization" + "." + "average")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization summary top appliances by utilization o k body items0 utilization based on the context it is used
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAverage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) contextValidateAverage(ctx context.Context, formats strfmt.Registry) error {

	if o.Average != nil {
		if err := o.Average.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utilization" + "." + "average")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utilization" + "." + "average")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0Utilization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage Average utilization of the appliance
swagger:model GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage
*/
type GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage struct {

	// Average percentage utilization of the appliance
	Percentage float32 `json:"percentage,omitempty"`
}

// Validate validates this get organization summary top appliances by utilization o k body items0 utilization average
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization summary top appliances by utilization o k body items0 utilization average based on context it is used
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSummaryTopAppliancesByUtilizationOKBodyItems0UtilizationAverage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
