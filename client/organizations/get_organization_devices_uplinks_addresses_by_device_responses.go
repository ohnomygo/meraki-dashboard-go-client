// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationDevicesUplinksAddressesByDeviceReader is a Reader for the GetOrganizationDevicesUplinksAddressesByDevice structure.
type GetOrganizationDevicesUplinksAddressesByDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationDevicesUplinksAddressesByDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationDevicesUplinksAddressesByDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationDevicesUplinksAddressesByDeviceOK creates a GetOrganizationDevicesUplinksAddressesByDeviceOK with default headers values
func NewGetOrganizationDevicesUplinksAddressesByDeviceOK() *GetOrganizationDevicesUplinksAddressesByDeviceOK {
	return &GetOrganizationDevicesUplinksAddressesByDeviceOK{}
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0
}

// IsSuccess returns true when this get organization devices uplinks addresses by device o k response has a 2xx status code
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization devices uplinks addresses by device o k response has a 3xx status code
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization devices uplinks addresses by device o k response has a 4xx status code
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization devices uplinks addresses by device o k response has a 5xx status code
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization devices uplinks addresses by device o k response a status code equal to that given
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization devices uplinks addresses by device o k response
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) Code() int {
	return 200
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/uplinks/addresses/byDevice][%d] getOrganizationDevicesUplinksAddressesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/uplinks/addresses/byDevice][%d] getOrganizationDevicesUplinksAddressesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) GetPayload() []*GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0 get organization devices uplinks addresses by device o k body items0
swagger:model GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0 struct {

	// The device MAC address.
	Mac string `json:"mac,omitempty"`

	// The device name.
	Name string `json:"name,omitempty"`

	// network
	Network *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network `json:"network,omitempty"`

	// Device product type.
	// Enum: [appliance camera cellularGateway sensor switch systemsManager wireless]
	ProductType string `json:"productType,omitempty"`

	// The device serial number.
	Serial string `json:"serial,omitempty"`

	// List of custom tags for the device.
	Tags []string `json:"tags"`

	// List of device uplink addresses information.
	Uplinks []*GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0 `json:"uplinks"`
}

// Validate validates this get organization devices uplinks addresses by device o k body items0
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUplinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

var getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0TypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["appliance","camera","cellularGateway","sensor","switch","systemsManager","wireless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0TypeProductTypePropEnum = append(getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0TypeProductTypePropEnum, v)
	}
}

const (

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeAppliance captures enum value "appliance"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeAppliance string = "appliance"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeCamera captures enum value "camera"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeCamera string = "camera"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeCellularGateway captures enum value "cellularGateway"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeCellularGateway string = "cellularGateway"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSensor captures enum value "sensor"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSensor string = "sensor"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSwitch captures enum value "switch"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSwitch string = "switch"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSystemsManager captures enum value "systemsManager"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeSystemsManager string = "systemsManager"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeWireless captures enum value "wireless"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0ProductTypeWireless string = "wireless"
)

// prop value enum
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0TypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) validateProductType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductType) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductTypeEnum("productType", "body", o.ProductType); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) validateUplinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Uplinks) { // not required
		return nil
	}

	for i := 0; i < len(o.Uplinks); i++ {
		if swag.IsZero(o.Uplinks[i]) { // not required
			continue
		}

		if o.Uplinks[i] != nil {
			if err := o.Uplinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization devices uplinks addresses by device o k body items0 based on the context it is used
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUplinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {
		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) contextValidateUplinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Uplinks); i++ {

		if o.Uplinks[i] != nil {
			if err := o.Uplinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network Network info.
swagger:model GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network struct {

	// ID for the network containing the device.
	ID string `json:"id,omitempty"`
}

// Validate validates this get organization devices uplinks addresses by device o k body items0 network
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices uplinks addresses by device o k body items0 network based on context it is used
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0 get organization devices uplinks addresses by device o k body items0 uplinks items0
swagger:model GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0 struct {

	// Available addresses for the interface.
	Addresses []*GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0 `json:"addresses"`

	// Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2
	// Enum: [cellular man1 man2 wan1 wan2]
	Interface string `json:"interface,omitempty"`
}

// Validate validates this get organization devices uplinks addresses by device o k body items0 uplinks items0
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) validateAddresses(formats strfmt.Registry) error {
	if swag.IsZero(o.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(o.Addresses); i++ {
		if swag.IsZero(o.Addresses[i]) { // not required
			continue
		}

		if o.Addresses[i] != nil {
			if err := o.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0TypeInterfacePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cellular","man1","man2","wan1","wan2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0TypeInterfacePropEnum = append(getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0TypeInterfacePropEnum, v)
	}
}

const (

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceCellular captures enum value "cellular"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceCellular string = "cellular"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceMan1 captures enum value "man1"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceMan1 string = "man1"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceMan2 captures enum value "man2"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceMan2 string = "man2"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceWan1 captures enum value "wan1"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceWan1 string = "wan1"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceWan2 captures enum value "wan2"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0InterfaceWan2 string = "wan2"
)

// prop value enum
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) validateInterfaceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0TypeInterfacePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) validateInterface(formats strfmt.Registry) error {
	if swag.IsZero(o.Interface) { // not required
		return nil
	}

	// value enum
	if err := o.validateInterfaceEnum("interface", "body", o.Interface); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organization devices uplinks addresses by device o k body items0 uplinks items0 based on the context it is used
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) contextValidateAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Addresses); i++ {

		if o.Addresses[i] != nil {
			if err := o.Addresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0 get organization devices uplinks addresses by device o k body items0 uplinks items0 addresses items0
swagger:model GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0 struct {

	// Device uplink address.
	Address string `json:"address,omitempty"`

	// Indicates how the device uplink address is assigned. Available options are: static, dynamic.
	// Enum: [dynamic static]
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// Device uplink gateway address.
	Gateway string `json:"gateway,omitempty"`

	// Type of address for the device uplink. Available options are: ipv4, ipv6.
	// Enum: [ipv4 ipv6]
	Protocol string `json:"protocol,omitempty"`

	// public
	Public *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public `json:"public,omitempty"`
}

// Validate validates this get organization devices uplinks addresses by device o k body items0 uplinks items0 addresses items0
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeAssignmentModePropEnum = append(getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeAssignmentModePropEnum, v)
	}
}

const (

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0AssignmentModeDynamic captures enum value "dynamic"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0AssignmentModeDynamic string = "dynamic"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0AssignmentModeStatic captures enum value "static"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0AssignmentModeStatic string = "static"
)

// prop value enum
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) validateAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) validateAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAssignmentModeEnum("assignmentMode", "body", o.AssignmentMode); err != nil {
		return err
	}

	return nil
}

var getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeProtocolPropEnum = append(getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeProtocolPropEnum, v)
	}
}

const (

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0ProtocolIPV4 captures enum value "ipv4"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0ProtocolIPV4 string = "ipv4"

	// GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0ProtocolIPV6 captures enum value "ipv6"
	GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0ProtocolIPV6 string = "ipv6"
)

// prop value enum
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(o.Protocol) { // not required
		return nil
	}

	// value enum
	if err := o.validateProtocolEnum("protocol", "body", o.Protocol); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) validatePublic(formats strfmt.Registry) error {
	if swag.IsZero(o.Public) { // not required
		return nil
	}

	if o.Public != nil {
		if err := o.Public.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("public")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization devices uplinks addresses by device o k body items0 uplinks items0 addresses items0 based on the context it is used
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePublic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) contextValidatePublic(ctx context.Context, formats strfmt.Registry) error {

	if o.Public != nil {
		if err := o.Public.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("public")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("public")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public Public interface information.
swagger:model GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public
*/
type GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public struct {

	// The device uplink public IP address.
	Address string `json:"address,omitempty"`
}

// Validate validates this get organization devices uplinks addresses by device o k body items0 uplinks items0 addresses items0 public
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices uplinks addresses by device o k body items0 uplinks items0 addresses items0 public based on context it is used
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesUplinksAddressesByDeviceOKBodyItems0UplinksItems0AddressesItems0Public
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
