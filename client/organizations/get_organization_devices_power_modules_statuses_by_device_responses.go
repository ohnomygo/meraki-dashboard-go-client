// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationDevicesPowerModulesStatusesByDeviceReader is a Reader for the GetOrganizationDevicesPowerModulesStatusesByDevice structure.
type GetOrganizationDevicesPowerModulesStatusesByDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationDevicesPowerModulesStatusesByDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationDevicesPowerModulesStatusesByDeviceOK creates a GetOrganizationDevicesPowerModulesStatusesByDeviceOK with default headers values
func NewGetOrganizationDevicesPowerModulesStatusesByDeviceOK() *GetOrganizationDevicesPowerModulesStatusesByDeviceOK {
	return &GetOrganizationDevicesPowerModulesStatusesByDeviceOK{}
}

/*
GetOrganizationDevicesPowerModulesStatusesByDeviceOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationDevicesPowerModulesStatusesByDeviceOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0
}

// IsSuccess returns true when this get organization devices power modules statuses by device o k response has a 2xx status code
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization devices power modules statuses by device o k response has a 3xx status code
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization devices power modules statuses by device o k response has a 4xx status code
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization devices power modules statuses by device o k response has a 5xx status code
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization devices power modules statuses by device o k response a status code equal to that given
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization devices power modules statuses by device o k response
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) Code() int {
	return 200
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/powerModules/statuses/byDevice][%d] getOrganizationDevicesPowerModulesStatusesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/devices/powerModules/statuses/byDevice][%d] getOrganizationDevicesPowerModulesStatusesByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) GetPayload() []*GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0 get organization devices power modules statuses by device o k body items0
swagger:model GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0
*/
type GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0 struct {

	// The device MAC address.
	Mac string `json:"mac,omitempty"`

	// The device name.
	Name string `json:"name,omitempty"`

	// network
	Network *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network `json:"network,omitempty"`

	// Device product type.
	// Enum: [appliance camera cellularGateway sensor switch systemsManager wireless]
	ProductType string `json:"productType,omitempty"`

	// The device serial number.
	Serial string `json:"serial,omitempty"`

	// Information for the device's AC power supplies.
	Slots []*GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0 `json:"slots"`

	// List of custom tags for the device.
	Tags []string `json:"tags"`
}

// Validate validates this get organization devices power modules statuses by device o k body items0
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

var getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0TypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["appliance","camera","cellularGateway","sensor","switch","systemsManager","wireless"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0TypeProductTypePropEnum = append(getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0TypeProductTypePropEnum, v)
	}
}

const (

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeAppliance captures enum value "appliance"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeAppliance string = "appliance"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeCamera captures enum value "camera"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeCamera string = "camera"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeCellularGateway captures enum value "cellularGateway"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeCellularGateway string = "cellularGateway"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSensor captures enum value "sensor"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSensor string = "sensor"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSwitch captures enum value "switch"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSwitch string = "switch"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSystemsManager captures enum value "systemsManager"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeSystemsManager string = "systemsManager"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeWireless captures enum value "wireless"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0ProductTypeWireless string = "wireless"
)

// prop value enum
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0TypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) validateProductType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductType) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductTypeEnum("productType", "body", o.ProductType); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) validateSlots(formats strfmt.Registry) error {
	if swag.IsZero(o.Slots) { // not required
		return nil
	}

	for i := 0; i < len(o.Slots); i++ {
		if swag.IsZero(o.Slots[i]) { // not required
			continue
		}

		if o.Slots[i] != nil {
			if err := o.Slots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization devices power modules statuses by device o k body items0 based on the context it is used
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {
		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) contextValidateSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Slots); i++ {

		if o.Slots[i] != nil {
			if err := o.Slots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network Network info.
swagger:model GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network
*/
type GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network struct {

	// ID for the network that the device is associated with.
	ID string `json:"id,omitempty"`
}

// Validate validates this get organization devices power modules statuses by device o k body items0 network
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization devices power modules statuses by device o k body items0 network based on context it is used
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0 get organization devices power modules statuses by device o k body items0 slots items0
swagger:model GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0
*/
type GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0 struct {

	// The power supply unit model.
	Model string `json:"model,omitempty"`

	// Which slot the AC power supply occupies. Possible values are: 0, 1, 2.
	// Enum: [0 1 2]
	Number int64 `json:"number,omitempty"`

	// The power supply unit serial number.
	Serial string `json:"serial,omitempty"`

	// Status of the power supply unit. Possible values are: connected, not connected, powering.
	// Enum: [connected not connected powering]
	Status string `json:"status,omitempty"`
}

// Validate validates this get organization devices power modules statuses by device o k body items0 slots items0
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeNumberPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeNumberPropEnum = append(getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeNumberPropEnum, v)
	}
}

// prop value enum
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) validateNumberEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeNumberPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.Number) { // not required
		return nil
	}

	// value enum
	if err := o.validateNumberEnum("number", "body", o.Number); err != nil {
		return err
	}

	return nil
}

var getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connected","not connected","powering"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeStatusPropEnum = append(getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeStatusPropEnum, v)
	}
}

const (

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusConnected captures enum value "connected"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusConnected string = "connected"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusNotConnected captures enum value "not connected"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusNotConnected string = "not connected"

	// GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusPowering captures enum value "powering"
	GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0StatusPowering string = "powering"
)

// prop value enum
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organization devices power modules statuses by device o k body items0 slots items0 based on context it is used
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationDevicesPowerModulesStatusesByDeviceOKBodyItems0SlotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
