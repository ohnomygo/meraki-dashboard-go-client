// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationEarlyAccessFeaturesReader is a Reader for the GetOrganizationEarlyAccessFeatures structure.
type GetOrganizationEarlyAccessFeaturesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationEarlyAccessFeaturesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationEarlyAccessFeaturesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationEarlyAccessFeaturesOK creates a GetOrganizationEarlyAccessFeaturesOK with default headers values
func NewGetOrganizationEarlyAccessFeaturesOK() *GetOrganizationEarlyAccessFeaturesOK {
	return &GetOrganizationEarlyAccessFeaturesOK{}
}

/*
GetOrganizationEarlyAccessFeaturesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationEarlyAccessFeaturesOK struct {
	Payload []*GetOrganizationEarlyAccessFeaturesOKBodyItems0
}

// IsSuccess returns true when this get organization early access features o k response has a 2xx status code
func (o *GetOrganizationEarlyAccessFeaturesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization early access features o k response has a 3xx status code
func (o *GetOrganizationEarlyAccessFeaturesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization early access features o k response has a 4xx status code
func (o *GetOrganizationEarlyAccessFeaturesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization early access features o k response has a 5xx status code
func (o *GetOrganizationEarlyAccessFeaturesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization early access features o k response a status code equal to that given
func (o *GetOrganizationEarlyAccessFeaturesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization early access features o k response
func (o *GetOrganizationEarlyAccessFeaturesOK) Code() int {
	return 200
}

func (o *GetOrganizationEarlyAccessFeaturesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/earlyAccess/features][%d] getOrganizationEarlyAccessFeaturesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationEarlyAccessFeaturesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/earlyAccess/features][%d] getOrganizationEarlyAccessFeaturesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationEarlyAccessFeaturesOK) GetPayload() []*GetOrganizationEarlyAccessFeaturesOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationEarlyAccessFeaturesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationEarlyAccessFeaturesOKBodyItems0 get organization early access features o k body items0
swagger:model GetOrganizationEarlyAccessFeaturesOKBodyItems0
*/
type GetOrganizationEarlyAccessFeaturesOKBodyItems0 struct {

	// descriptions
	Descriptions *GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions `json:"descriptions,omitempty"`

	// Link to the documentation of this early access feature
	DocumentationLink string `json:"documentationLink,omitempty"`

	// If this early access feature can only be opted in for the entire organization
	IsOrgScopedOnly bool `json:"isOrgScopedOnly,omitempty"`

	// Name of the early access feature
	Name string `json:"name,omitempty"`

	// Short name of the early access feature
	ShortName string `json:"shortName,omitempty"`

	// Link to get support for this early access feature
	SupportLink string `json:"supportLink,omitempty"`

	// Topic of the early access feature
	Topic string `json:"topic,omitempty"`
}

// Validate validates this get organization early access features o k body items0
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) validateDescriptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Descriptions) { // not required
		return nil
	}

	if o.Descriptions != nil {
		if err := o.Descriptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization early access features o k body items0 based on the context it is used
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDescriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) contextValidateDescriptions(ctx context.Context, formats strfmt.Registry) error {

	if o.Descriptions != nil {
		if err := o.Descriptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationEarlyAccessFeaturesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions Descriptions of the early access feature
swagger:model GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions
*/
type GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions struct {

	// Long description
	Long string `json:"long,omitempty"`

	// Short description
	Short string `json:"short,omitempty"`
}

// Validate validates this get organization early access features o k body items0 descriptions
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization early access features o k body items0 descriptions based on context it is used
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions) UnmarshalBinary(b []byte) error {
	var res GetOrganizationEarlyAccessFeaturesOKBodyItems0Descriptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
