// Code generated by go-swagger; DO NOT EDIT.

package switch_meraki_dasboard_go_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkSwitchAccessPoliciesReader is a Reader for the GetNetworkSwitchAccessPolicies structure.
type GetNetworkSwitchAccessPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchAccessPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchAccessPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSwitchAccessPoliciesOK creates a GetNetworkSwitchAccessPoliciesOK with default headers values
func NewGetNetworkSwitchAccessPoliciesOK() *GetNetworkSwitchAccessPoliciesOK {
	return &GetNetworkSwitchAccessPoliciesOK{}
}

/*
GetNetworkSwitchAccessPoliciesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchAccessPoliciesOK struct {
	Payload []*GetNetworkSwitchAccessPoliciesOKBodyItems0
}

// IsSuccess returns true when this get network switch access policies o k response has a 2xx status code
func (o *GetNetworkSwitchAccessPoliciesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch access policies o k response has a 3xx status code
func (o *GetNetworkSwitchAccessPoliciesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch access policies o k response has a 4xx status code
func (o *GetNetworkSwitchAccessPoliciesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch access policies o k response has a 5xx status code
func (o *GetNetworkSwitchAccessPoliciesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch access policies o k response a status code equal to that given
func (o *GetNetworkSwitchAccessPoliciesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch access policies o k response
func (o *GetNetworkSwitchAccessPoliciesOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchAccessPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/accessPolicies][%d] getNetworkSwitchAccessPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAccessPoliciesOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/accessPolicies][%d] getNetworkSwitchAccessPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAccessPoliciesOK) GetPayload() []*GetNetworkSwitchAccessPoliciesOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSwitchAccessPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0 get network switch access policies o k body items0
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0 struct {

	// Access Type of the policy. Automatically 'Hybrid authentication' when hostMode is 'Multi-Domain'.
	// Enum: [802.1x Hybrid authentication MAC authentication bypass]
	AccessPolicyType string `json:"accessPolicyType,omitempty"`

	// dot1x
	Dot1x *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x `json:"dot1x,omitempty"`

	// ID for the guest VLAN allow unauthorized devices access to limited network resources
	GuestVlanID int64 `json:"guestVlanId,omitempty"`

	// Choose the Host Mode for the access policy.
	// Enum: [Multi-Auth Multi-Domain Multi-Host Single-Host]
	HostMode string `json:"hostMode,omitempty"`

	// Enabling this option will make switches execute 802.1X and MAC-bypass authentication simultaneously so that clients authenticate faster. Only required when accessPolicyType is 'Hybrid Authentication.
	IncreaseAccessSpeed bool `json:"increaseAccessSpeed,omitempty"`

	// Name of the access policy
	Name string `json:"name,omitempty"`

	// radius
	Radius *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius `json:"radius,omitempty"`

	// Enable to send start, interim-update and stop messages to a configured RADIUS accounting server for tracking connected clients
	RadiusAccountingEnabled bool `json:"radiusAccountingEnabled,omitempty"`

	// List of RADIUS accounting servers to require connecting devices to authenticate against before granting network access
	RadiusAccountingServers []*GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0 `json:"radiusAccountingServers"`

	// Change of authentication for RADIUS re-authentication and disconnection
	RadiusCoaSupportEnabled bool `json:"radiusCoaSupportEnabled,omitempty"`

	// Acceptable values are `""` for None, or `"11"` for Group Policies ACL
	RadiusGroupAttribute string `json:"radiusGroupAttribute,omitempty"`

	// List of RADIUS servers to require connecting devices to authenticate against before granting network access
	RadiusServers []*GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0 `json:"radiusServers"`

	// If enabled, Meraki devices will periodically send access-request messages to these RADIUS servers
	RadiusTestingEnabled bool `json:"radiusTestingEnabled,omitempty"`

	// Enable to restrict access for clients to a response_objectific set of IP addresses or hostnames prior to authentication
	URLRedirectWalledGardenEnabled bool `json:"urlRedirectWalledGardenEnabled,omitempty"`

	// IP address ranges, in CIDR notation, to restrict access for clients to a specific set of IP addresses or hostnames prior to authentication
	URLRedirectWalledGardenRanges []string `json:"urlRedirectWalledGardenRanges"`

	// CDP/LLDP capable voice clients will be able to use this VLAN. Automatically true when hostMode is 'Multi-Domain'.
	VoiceVlanClients bool `json:"voiceVlanClients,omitempty"`
}

// Validate validates this get network switch access policies o k body items0
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDot1x(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRadius(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRadiusAccountingServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRadiusServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSwitchAccessPoliciesOKBodyItems0TypeAccessPolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["802.1x","Hybrid authentication","MAC authentication bypass"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessPoliciesOKBodyItems0TypeAccessPolicyTypePropEnum = append(getNetworkSwitchAccessPoliciesOKBodyItems0TypeAccessPolicyTypePropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeNr802Dot1x captures enum value "802.1x"
	GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeNr802Dot1x string = "802.1x"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeHybridAuthentication captures enum value "Hybrid authentication"
	GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeHybridAuthentication string = "Hybrid authentication"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeMACAuthenticationBypass captures enum value "MAC authentication bypass"
	GetNetworkSwitchAccessPoliciesOKBodyItems0AccessPolicyTypeMACAuthenticationBypass string = "MAC authentication bypass"
)

// prop value enum
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateAccessPolicyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessPoliciesOKBodyItems0TypeAccessPolicyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateAccessPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessPolicyType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccessPolicyTypeEnum("accessPolicyType", "body", o.AccessPolicyType); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateDot1x(formats strfmt.Registry) error {
	if swag.IsZero(o.Dot1x) { // not required
		return nil
	}

	if o.Dot1x != nil {
		if err := o.Dot1x.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dot1x")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dot1x")
			}
			return err
		}
	}

	return nil
}

var getNetworkSwitchAccessPoliciesOKBodyItems0TypeHostModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Multi-Auth","Multi-Domain","Multi-Host","Single-Host"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessPoliciesOKBodyItems0TypeHostModePropEnum = append(getNetworkSwitchAccessPoliciesOKBodyItems0TypeHostModePropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashAuth captures enum value "Multi-Auth"
	GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashAuth string = "Multi-Auth"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashDomain captures enum value "Multi-Domain"
	GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashDomain string = "Multi-Domain"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashHost captures enum value "Multi-Host"
	GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeMultiDashHost string = "Multi-Host"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeSingleDashHost captures enum value "Single-Host"
	GetNetworkSwitchAccessPoliciesOKBodyItems0HostModeSingleDashHost string = "Single-Host"
)

// prop value enum
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateHostModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessPoliciesOKBodyItems0TypeHostModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateHostMode(formats strfmt.Registry) error {
	if swag.IsZero(o.HostMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateHostModeEnum("hostMode", "body", o.HostMode); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateRadius(formats strfmt.Registry) error {
	if swag.IsZero(o.Radius) { // not required
		return nil
	}

	if o.Radius != nil {
		if err := o.Radius.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radius")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radius")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateRadiusAccountingServers(formats strfmt.Registry) error {
	if swag.IsZero(o.RadiusAccountingServers) { // not required
		return nil
	}

	for i := 0; i < len(o.RadiusAccountingServers); i++ {
		if swag.IsZero(o.RadiusAccountingServers[i]) { // not required
			continue
		}

		if o.RadiusAccountingServers[i] != nil {
			if err := o.RadiusAccountingServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("radiusAccountingServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("radiusAccountingServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) validateRadiusServers(formats strfmt.Registry) error {
	if swag.IsZero(o.RadiusServers) { // not required
		return nil
	}

	for i := 0; i < len(o.RadiusServers); i++ {
		if swag.IsZero(o.RadiusServers[i]) { // not required
			continue
		}

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network switch access policies o k body items0 based on the context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDot1x(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRadius(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRadiusAccountingServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRadiusServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) contextValidateDot1x(ctx context.Context, formats strfmt.Registry) error {

	if o.Dot1x != nil {
		if err := o.Dot1x.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dot1x")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dot1x")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) contextValidateRadius(ctx context.Context, formats strfmt.Registry) error {

	if o.Radius != nil {
		if err := o.Radius.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radius")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radius")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) contextValidateRadiusAccountingServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RadiusAccountingServers); i++ {

		if o.RadiusAccountingServers[i] != nil {
			if err := o.RadiusAccountingServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("radiusAccountingServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("radiusAccountingServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) contextValidateRadiusServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RadiusServers); i++ {

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x 802.1x Settings
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x struct {

	// Supports either 'both' or 'inbound'. Set to 'inbound' to allow unauthorized egress on the switchport. Set to 'both' to control both traffic directions with authorization. Defaults to 'both'
	// Enum: [both inbound]
	ControlDirection string `json:"controlDirection,omitempty"`
}

// Validate validates this get network switch access policies o k body items0 dot1x
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateControlDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSwitchAccessPoliciesOKBodyItems0Dot1xTypeControlDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["both","inbound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessPoliciesOKBodyItems0Dot1xTypeControlDirectionPropEnum = append(getNetworkSwitchAccessPoliciesOKBodyItems0Dot1xTypeControlDirectionPropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1xControlDirectionBoth captures enum value "both"
	GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1xControlDirectionBoth string = "both"

	// GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1xControlDirectionInbound captures enum value "inbound"
	GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1xControlDirectionInbound string = "inbound"
)

// prop value enum
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) validateControlDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessPoliciesOKBodyItems0Dot1xTypeControlDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) validateControlDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.ControlDirection) { // not required
		return nil
	}

	// value enum
	if err := o.validateControlDirectionEnum("dot1x"+"."+"controlDirection", "body", o.ControlDirection); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network switch access policies o k body items0 dot1x based on context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0Dot1x
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0Radius Object for RADIUS Settings
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0Radius
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0Radius struct {

	// critical auth
	CriticalAuth *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth `json:"criticalAuth,omitempty"`

	// VLAN that clients will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
	FailedAuthVlanID int64 `json:"failedAuthVlanId,omitempty"`

	// Re-authentication period in seconds. Will be null if hostMode is Multi-Auth
	ReAuthenticationInterval int64 `json:"reAuthenticationInterval,omitempty"`
}

// Validate validates this get network switch access policies o k body items0 radius
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCriticalAuth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) validateCriticalAuth(formats strfmt.Registry) error {
	if swag.IsZero(o.CriticalAuth) { // not required
		return nil
	}

	if o.CriticalAuth != nil {
		if err := o.CriticalAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radius" + "." + "criticalAuth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radius" + "." + "criticalAuth")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch access policies o k body items0 radius based on the context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCriticalAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) contextValidateCriticalAuth(ctx context.Context, formats strfmt.Registry) error {

	if o.CriticalAuth != nil {
		if err := o.CriticalAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radius" + "." + "criticalAuth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radius" + "." + "criticalAuth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0Radius) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0Radius
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0 get network switch access policies o k body items0 radius accounting servers items0
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0 struct {

	// Public IP address of the RADIUS accounting server
	Host string `json:"host,omitempty"`

	// UDP port that the RADIUS Accounting server listens on for access requests
	Port int64 `json:"port,omitempty"`
}

// Validate validates this get network switch access policies o k body items0 radius accounting servers items0
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch access policies o k body items0 radius accounting servers items0 based on context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusAccountingServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth Critical auth settings for when authentication is rejected by the RADIUS server
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth struct {

	// VLAN that clients who use data will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
	DataVlanID int64 `json:"dataVlanId,omitempty"`

	// Enable to suspend port bounce when RADIUS servers are unreachable
	SuspendPortBounce bool `json:"suspendPortBounce,omitempty"`

	// VLAN that clients who use voice will be placed on when RADIUS authentication fails. Will be null if hostMode is Multi-Auth
	VoiceVlanID int64 `json:"voiceVlanId,omitempty"`
}

// Validate validates this get network switch access policies o k body items0 radius critical auth
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch access policies o k body items0 radius critical auth based on context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusCriticalAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0 get network switch access policies o k body items0 radius servers items0
swagger:model GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0
*/
type GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0 struct {

	// Public IP address of the RADIUS server
	Host string `json:"host,omitempty"`

	// UDP port that the RADIUS server listens on for access requests
	Port int64 `json:"port,omitempty"`
}

// Validate validates this get network switch access policies o k body items0 radius servers items0
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch access policies o k body items0 radius servers items0 based on context it is used
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessPoliciesOKBodyItems0RadiusServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
