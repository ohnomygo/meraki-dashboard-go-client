// Code generated by go-swagger; DO NOT EDIT.

package switch_meraki_dasboard_go_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersReader is a Reader for the GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers structure.
type GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK creates a GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK with default headers values
func NewGetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK() *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK {
	return &GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK{}
}

/*
GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0
}

// IsSuccess returns true when this get network switch dhcp server policy arp inspection trusted servers o k response has a 2xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch dhcp server policy arp inspection trusted servers o k response has a 3xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch dhcp server policy arp inspection trusted servers o k response has a 4xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch dhcp server policy arp inspection trusted servers o k response has a 5xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch dhcp server policy arp inspection trusted servers o k response a status code equal to that given
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch dhcp server policy arp inspection trusted servers o k response
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers][%d] getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers][%d] getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) GetPayload() []*GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0 get network switch dhcp server policy arp inspection trusted servers o k body items0
swagger:model GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0
*/
type GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0 struct {

	// ipv4
	IPV4 *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4 `json:"ipv4,omitempty"`

	// Mac address of the trusted server.
	Mac string `json:"mac,omitempty"`

	// ID of the trusted server.
	TrustedServerID string `json:"trustedServerId,omitempty"`

	// Vlan ID of the trusted server.
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this get network switch dhcp server policy arp inspection trusted servers o k body items0
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch dhcp server policy arp inspection trusted servers o k body items0 based on the context it is used
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4 IPv4 attributes of the trusted server.
swagger:model GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4
*/
type GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4 struct {

	// IPv4 address of the trusted server.
	Address string `json:"address,omitempty"`
}

// Validate validates this get network switch dhcp server policy arp inspection trusted servers o k body items0 IP v4
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp server policy arp inspection trusted servers o k body items0 IP v4 based on context it is used
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersOKBodyItems0IPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
