// Code generated by go-swagger; DO NOT EDIT.

package switch_meraki_dasboard_go_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationConfigTemplateSwitchProfilePortsReader is a Reader for the GetOrganizationConfigTemplateSwitchProfilePorts structure.
type GetOrganizationConfigTemplateSwitchProfilePortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationConfigTemplateSwitchProfilePortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationConfigTemplateSwitchProfilePortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationConfigTemplateSwitchProfilePortsOK creates a GetOrganizationConfigTemplateSwitchProfilePortsOK with default headers values
func NewGetOrganizationConfigTemplateSwitchProfilePortsOK() *GetOrganizationConfigTemplateSwitchProfilePortsOK {
	return &GetOrganizationConfigTemplateSwitchProfilePortsOK{}
}

/*
GetOrganizationConfigTemplateSwitchProfilePortsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationConfigTemplateSwitchProfilePortsOK struct {
	Payload []*GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0
}

// IsSuccess returns true when this get organization config template switch profile ports o k response has a 2xx status code
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization config template switch profile ports o k response has a 3xx status code
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization config template switch profile ports o k response has a 4xx status code
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization config template switch profile ports o k response has a 5xx status code
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization config template switch profile ports o k response a status code equal to that given
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization config template switch profile ports o k response
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) Code() int {
	return 200
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports][%d] getOrganizationConfigTemplateSwitchProfilePortsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports][%d] getOrganizationConfigTemplateSwitchProfilePortsOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) GetPayload() []*GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0 get organization config template switch profile ports o k body items0
swagger:model GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0
*/
type GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0 struct {

	// The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber int64 `json:"accessPolicyNumber,omitempty"`

	// The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	// Enum: [Custom access policy MAC allow list Open Sticky MAC allow list]
	AccessPolicyType string `json:"accessPolicyType,omitempty"`

	// The VLANs allowed on the switch profile port. Only applicable to trunk ports.
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted bool `json:"daiTrusted,omitempty"`

	// The status of the switch profile port.
	Enabled bool `json:"enabled,omitempty"`

	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled bool `json:"flexibleStackingEnabled,omitempty"`

	// The isolation status of the switch profile port.
	IsolationEnabled bool `json:"isolationEnabled,omitempty"`

	// The link speed for the switch profile port.
	LinkNegotiation string `json:"linkNegotiation,omitempty"`

	// Available link speeds for the switch profile port.
	LinkNegotiationCapabilities []string `json:"linkNegotiationCapabilities"`

	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowList []string `json:"macAllowList"`

	// The name of the switch profile port.
	Name string `json:"name,omitempty"`

	// The PoE status of the switch profile port.
	PoeEnabled bool `json:"poeEnabled,omitempty"`

	// The identifier of the switch profile port.
	PortID string `json:"portId,omitempty"`

	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID string `json:"portScheduleId,omitempty"`

	// profile
	Profile *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile `json:"profile,omitempty"`

	// The rapid spanning tree protocol status.
	RstpEnabled bool `json:"rstpEnabled,omitempty"`

	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList"`

	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit int64 `json:"stickyMacAllowListLimit,omitempty"`

	// The storm control status of the switch profile port.
	StormControlEnabled bool `json:"stormControlEnabled,omitempty"`

	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	// Enum: [bpdu guard disabled loop guard root guard]
	StpGuard string `json:"stpGuard,omitempty"`

	// The list of tags of the switch profile port.
	Tags []string `json:"tags"`

	// The type of the switch profile port ('trunk' or 'access').
	// Enum: [access trunk]
	Type string `json:"type,omitempty"`

	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	// Enum: [Alert only Enforce]
	Udld string `json:"udld,omitempty"`

	// The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
	Vlan int64 `json:"vlan,omitempty"`

	// The voice VLAN of the switch profile port. Only applicable to access ports.
	VoiceVlan int64 `json:"voiceVlan,omitempty"`
}

// Validate validates this get organization config template switch profile ports o k body items0
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStpGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUdld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccessPolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Custom access policy","MAC allow list","Open","Sticky MAC allow list"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccessPolicyTypePropEnum = append(getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccessPolicyTypePropEnum, v)
	}
}

const (

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeCustomAccessPolicy captures enum value "Custom access policy"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeCustomAccessPolicy string = "Custom access policy"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeMACAllowList captures enum value "MAC allow list"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeMACAllowList string = "MAC allow list"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeOpen captures enum value "Open"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeOpen string = "Open"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeStickyMACAllowList captures enum value "Sticky MAC allow list"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0AccessPolicyTypeStickyMACAllowList string = "Sticky MAC allow list"
)

// prop value enum
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateAccessPolicyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccessPolicyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateAccessPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessPolicyType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccessPolicyTypeEnum("accessPolicyType", "body", o.AccessPolicyType); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

var getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeStpGuardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bpdu guard","disabled","loop guard","root guard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeStpGuardPropEnum = append(getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeStpGuardPropEnum, v)
	}
}

const (

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardBpduGuard captures enum value "bpdu guard"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardBpduGuard string = "bpdu guard"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardDisabled captures enum value "disabled"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardDisabled string = "disabled"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardLoopGuard captures enum value "loop guard"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardLoopGuard string = "loop guard"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardRootGuard captures enum value "root guard"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0StpGuardRootGuard string = "root guard"
)

// prop value enum
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateStpGuardEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeStpGuardPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateStpGuard(formats strfmt.Registry) error {
	if swag.IsZero(o.StpGuard) { // not required
		return nil
	}

	// value enum
	if err := o.validateStpGuardEnum("stpGuard", "body", o.StpGuard); err != nil {
		return err
	}

	return nil
}

var getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["access","trunk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTypePropEnum = append(getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTypePropEnum, v)
	}
}

const (

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccess captures enum value "access"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeAccess string = "access"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTrunk captures enum value "trunk"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTrunk string = "trunk"
)

// prop value enum
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

var getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeUdldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alert only","Enforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeUdldPropEnum = append(getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeUdldPropEnum, v)
	}
}

const (

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0UdldAlertOnly captures enum value "Alert only"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0UdldAlertOnly string = "Alert only"

	// GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0UdldEnforce captures enum value "Enforce"
	GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0UdldEnforce string = "Enforce"
)

// prop value enum
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateUdldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0TypeUdldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) validateUdld(formats strfmt.Registry) error {
	if swag.IsZero(o.Udld) { // not required
		return nil
	}

	// value enum
	if err := o.validateUdldEnum("udld", "body", o.Udld); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get organization config template switch profile ports o k body items0 based on the context it is used
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) contextValidateProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.Profile != nil {
		if err := o.Profile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profile")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile Profile attributes
swagger:model GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile
*/
type GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile struct {

	// When enabled, override this port's configuration with a port profile.
	Enabled bool `json:"enabled,omitempty"`

	// When enabled, the ID of the port profile used to override the port's configuration.
	ID string `json:"id,omitempty"`

	// When enabled, the IName of the profile.
	Iname string `json:"iname,omitempty"`
}

// Validate validates this get organization config template switch profile ports o k body items0 profile
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization config template switch profile ports o k body items0 profile based on context it is used
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile) UnmarshalBinary(b []byte) error {
	var res GetOrganizationConfigTemplateSwitchProfilePortsOKBodyItems0Profile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
