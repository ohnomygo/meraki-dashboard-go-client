// Code generated by go-swagger; DO NOT EDIT.

package switch_meraki_dasboard_go_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkSwitchDhcpV4ServersSeenReader is a Reader for the GetNetworkSwitchDhcpV4ServersSeen structure.
type GetNetworkSwitchDhcpV4ServersSeenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchDhcpV4ServersSeenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchDhcpV4ServersSeenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSwitchDhcpV4ServersSeenOK creates a GetNetworkSwitchDhcpV4ServersSeenOK with default headers values
func NewGetNetworkSwitchDhcpV4ServersSeenOK() *GetNetworkSwitchDhcpV4ServersSeenOK {
	return &GetNetworkSwitchDhcpV4ServersSeenOK{}
}

/*
GetNetworkSwitchDhcpV4ServersSeenOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchDhcpV4ServersSeenOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0
}

// IsSuccess returns true when this get network switch dhcp v4 servers seen o k response has a 2xx status code
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch dhcp v4 servers seen o k response has a 3xx status code
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch dhcp v4 servers seen o k response has a 4xx status code
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch dhcp v4 servers seen o k response has a 5xx status code
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch dhcp v4 servers seen o k response a status code equal to that given
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch dhcp v4 servers seen o k response
func (o *GetNetworkSwitchDhcpV4ServersSeenOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcp/v4/servers/seen][%d] getNetworkSwitchDhcpV4ServersSeenOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcp/v4/servers/seen][%d] getNetworkSwitchDhcpV4ServersSeenOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOK) GetPayload() []*GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0 get network switch dhcp v4 servers seen o k body items0
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0 struct {

	// Client id of the server if available.
	ClientID string `json:"clientId,omitempty"`

	// device
	Device *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device `json:"device,omitempty"`

	// ipv4
	IPV4 *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4 `json:"ipv4,omitempty"`

	// Whether the server is allowed or blocked. Always true for configured servers.
	IsAllowed bool `json:"isAllowed,omitempty"`

	// Whether the server is configured.
	IsConfigured bool `json:"isConfigured,omitempty"`

	// last ack
	LastAck *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck `json:"lastAck,omitempty"`

	// last packet
	LastPacket *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket `json:"lastPacket,omitempty"`

	// Last time the server was seen.
	// Format: date-time
	LastSeenAt strfmt.DateTime `json:"lastSeenAt,omitempty"`

	// Mac address of the server.
	Mac string `json:"mac,omitempty"`

	// Devices that saw the server.
	SeenBy []*GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0 `json:"seenBy"`

	// server type. Can be a 'device', 'stack', or 'discovered' (i.e client).
	// Enum: [device discovered stack]
	Type string `json:"type,omitempty"`

	// Vlan id of the server.
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastAck(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastPacket(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastSeenAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeenBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateDevice(formats strfmt.Registry) error {
	if swag.IsZero(o.Device) { // not required
		return nil
	}

	if o.Device != nil {
		if err := o.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateLastAck(formats strfmt.Registry) error {
	if swag.IsZero(o.LastAck) { // not required
		return nil
	}

	if o.LastAck != nil {
		if err := o.LastAck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAck")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateLastPacket(formats strfmt.Registry) error {
	if swag.IsZero(o.LastPacket) { // not required
		return nil
	}

	if o.LastPacket != nil {
		if err := o.LastPacket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateLastSeenAt(formats strfmt.Registry) error {
	if swag.IsZero(o.LastSeenAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastSeenAt", "body", "date-time", o.LastSeenAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateSeenBy(formats strfmt.Registry) error {
	if swag.IsZero(o.SeenBy) { // not required
		return nil
	}

	for i := 0; i < len(o.SeenBy); i++ {
		if swag.IsZero(o.SeenBy[i]) { // not required
			continue
		}

		if o.SeenBy[i] != nil {
			if err := o.SeenBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seenBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seenBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var getNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["device","discovered","stack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeTypePropEnum = append(getNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeTypePropEnum, v)
	}
}

const (

	// GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeDevice captures enum value "device"
	GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeDevice string = "device"

	// GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeDiscovered captures enum value "discovered"
	GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeDiscovered string = "discovered"

	// GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeStack captures enum value "stack"
	GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeStack string = "stack"
)

// prop value enum
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchDhcpV4ServersSeenOKBodyItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDevice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastAck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastPacket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSeenBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) contextValidateDevice(ctx context.Context, formats strfmt.Registry) error {

	if o.Device != nil {
		if err := o.Device.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) contextValidateLastAck(ctx context.Context, formats strfmt.Registry) error {

	if o.LastAck != nil {
		if err := o.LastAck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAck")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAck")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) contextValidateLastPacket(ctx context.Context, formats strfmt.Registry) error {

	if o.LastPacket != nil {
		if err := o.LastPacket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) contextValidateSeenBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SeenBy); i++ {

		if o.SeenBy[i] != nil {
			if err := o.SeenBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seenBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seenBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device Attributes of the server when it's a device.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device struct {

	// interface
	Interface *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface `json:"interface,omitempty"`

	// Device name.
	Name string `json:"name,omitempty"`

	// Device serial.
	Serial string `json:"serial,omitempty"`

	// Url link to device.
	URL string `json:"url,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 device
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInterface(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) validateInterface(formats strfmt.Registry) error {
	if swag.IsZero(o.Interface) { // not required
		return nil
	}

	if o.Interface != nil {
		if err := o.Interface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device" + "." + "interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device" + "." + "interface")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 device based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInterface(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) contextValidateInterface(ctx context.Context, formats strfmt.Registry) error {

	if o.Interface != nil {
		if err := o.Interface.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device" + "." + "interface")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device" + "." + "interface")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface Interface attributes of the server. Only for configured servers.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface struct {

	// Interface name.
	Name string `json:"name,omitempty"`

	// Url link to interface.
	URL string `json:"url,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 device interface
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 device interface based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0DeviceInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4 IPv4 attributes of the server.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4 struct {

	// IPv4 address of the server.
	Address string `json:"address,omitempty"`

	// IPv4 gateway address of the server.
	Gateway string `json:"gateway,omitempty"`

	// Subnet of the server.
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 IP v4
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 IP v4 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0IPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck Attributes of the server's last ack.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck struct {

	// ipv4
	IPV4 *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4 `json:"ipv4,omitempty"`

	// Last time the server was acked.
	// Format: date-time
	Ts strfmt.DateTime `json:"ts,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last ack
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAck" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAck" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) validateTs(formats strfmt.Registry) error {
	if swag.IsZero(o.Ts) { // not required
		return nil
	}

	if err := validate.FormatOf("lastAck"+"."+"ts", "body", "date-time", o.Ts.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last ack based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastAck" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastAck" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4 IPv4 attributes of the last ack.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4 struct {

	// IPv4 address of the last ack.
	Address string `json:"address,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last ack IP v4
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last ack IP v4 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastAckIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket Last packet the server received.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket struct {

	// destination
	Destination *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination `json:"destination,omitempty"`

	// ethernet
	Ethernet *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet `json:"ethernet,omitempty"`

	// fields
	Fields *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields `json:"fields,omitempty"`

	// ip
	IP *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP `json:"ip,omitempty"`

	// source
	Source *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource `json:"source,omitempty"`

	// Packet type.
	Type string `json:"type,omitempty"`

	// udp
	UDP *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP `json:"udp,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEthernet(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(o.Destination) { // not required
		return nil
	}

	if o.Destination != nil {
		if err := o.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "destination")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateEthernet(formats strfmt.Registry) error {
	if swag.IsZero(o.Ethernet) { // not required
		return nil
	}

	if o.Ethernet != nil {
		if err := o.Ethernet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ethernet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ethernet")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	if o.Fields != nil {
		if err := o.Fields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(o.IP) { // not required
		return nil
	}

	if o.IP != nil {
		if err := o.IP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(o.Source) { // not required
		return nil
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "source")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) validateUDP(formats strfmt.Registry) error {
	if swag.IsZero(o.UDP) { // not required
		return nil
	}

	if o.UDP != nil {
		if err := o.UDP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "udp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "udp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last packet based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEthernet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUDP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.Destination != nil {
		if err := o.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "destination")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateEthernet(ctx context.Context, formats strfmt.Registry) error {

	if o.Ethernet != nil {
		if err := o.Ethernet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ethernet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ethernet")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	if o.Fields != nil {
		if err := o.Fields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "fields")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateIP(ctx context.Context, formats strfmt.Registry) error {

	if o.IP != nil {
		if err := o.IP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if o.Source != nil {
		if err := o.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "source")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) contextValidateUDP(ctx context.Context, formats strfmt.Registry) error {

	if o.UDP != nil {
		if err := o.UDP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "udp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "udp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination Destination of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination struct {

	// ipv4
	IPV4 *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4 `json:"ipv4,omitempty"`

	// Destination mac address of the packet.
	Mac string `json:"mac,omitempty"`

	// Destination port of the packet.
	Port int64 `json:"port,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet destination
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "destination" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "destination" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last packet destination based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "destination" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "destination" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4 Destination ipv4 attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4 struct {

	// Destination ipv4 address of the packet.
	Address string `json:"address,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet destination IP v4
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet destination IP v4 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketDestinationIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet Additional ethernet attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet struct {

	// Ethernet type of the packet.
	Type string `json:"type,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet ethernet
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet ethernet based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketEthernet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields DHCP-specific fields of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields struct {

	// Client hardware address of the packet.
	Chaddr string `json:"chaddr,omitempty"`

	// Client IP address of the packet.
	Ciaddr string `json:"ciaddr,omitempty"`

	// Packet flags.
	Flags string `json:"flags,omitempty"`

	// Gateway IP address of the packet.
	Giaddr string `json:"giaddr,omitempty"`

	// Hardware length of the packet.
	Hlen int64 `json:"hlen,omitempty"`

	// Number of hops the packet took.
	Hops int64 `json:"hops,omitempty"`

	// Hardware type code of the packet.
	Htype int64 `json:"htype,omitempty"`

	// Magic cookie of the packet.
	MagicCookie string `json:"magicCookie,omitempty"`

	// Operation code of the packet.
	Op int64 `json:"op,omitempty"`

	// Additional DHCP options of the packet.
	Options []*GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0 `json:"options"`

	// Number of seconds since receiving the packet.
	Secs int64 `json:"secs,omitempty"`

	// Server IP address of the packet.
	Siaddr string `json:"siaddr,omitempty"`

	// Server identifier address of the packet.
	Sname string `json:"sname,omitempty"`

	// Transaction id of the packet.
	Xid string `json:"xid,omitempty"`

	// Assigned IP address of the packet.
	Yiaddr string `json:"yiaddr,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet fields
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Options) { // not required
		return nil
	}

	for i := 0; i < len(o.Options); i++ {
		if swag.IsZero(o.Options[i]) { // not required
			continue
		}

		if o.Options[i] != nil {
			if err := o.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastPacket" + "." + "fields" + "." + "options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastPacket" + "." + "fields" + "." + "options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last packet fields based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Options); i++ {

		if o.Options[i] != nil {
			if err := o.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lastPacket" + "." + "fields" + "." + "options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lastPacket" + "." + "fields" + "." + "options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0 get network switch dhcp v4 servers seen o k body items0 last packet fields options items0
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0 struct {

	// Option name.
	Name string `json:"name,omitempty"`

	// Option value.
	Value string `json:"value,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet fields options items0
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet fields options items0 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketFieldsOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP Additional IP attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP struct {

	// dscp
	Dscp *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp `json:"dscp,omitempty"`

	// IP header length of the packet.
	HeaderLength int64 `json:"headerLength,omitempty"`

	// IP ID of the packet.
	ID string `json:"id,omitempty"`

	// IP length of the packet.
	Length int64 `json:"length,omitempty"`

	// IP protocol number of the packet.
	Protocol int64 `json:"protocol,omitempty"`

	// Time to live of the packet.
	TTL int64 `json:"ttl,omitempty"`

	// IP version of the packet.
	// Enum: [4 6]
	Version int64 `json:"version,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet IP
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDscp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) validateDscp(formats strfmt.Registry) error {
	if swag.IsZero(o.Dscp) { // not required
		return nil
	}

	if o.Dscp != nil {
		if err := o.Dscp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ip" + "." + "dscp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ip" + "." + "dscp")
			}
			return err
		}
	}

	return nil
}

var getNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIpTypeVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[4,6]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIpTypeVersionPropEnum = append(getNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIpTypeVersionPropEnum, v)
	}
}

// prop value enum
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) validateVersionEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIpTypeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.Version) { // not required
		return nil
	}

	// value enum
	if err := o.validateVersionEnum("lastPacket"+"."+"ip"+"."+"version", "body", o.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last packet IP based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDscp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) contextValidateDscp(ctx context.Context, formats strfmt.Registry) error {

	if o.Dscp != nil {
		if err := o.Dscp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "ip" + "." + "dscp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "ip" + "." + "dscp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp DSCP attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp struct {

	// ECN number of the packet.
	Ecn int64 `json:"ecn,omitempty"`

	// DSCP tag number of the packet.
	Tag int64 `json:"tag,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet IP dscp
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet IP dscp based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketIPDscp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource Source of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource struct {

	// ipv4
	IPV4 *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4 `json:"ipv4,omitempty"`

	// Source mac address of the packet.
	Mac string `json:"mac,omitempty"`

	// Source port of the packet.
	Port int64 `json:"port,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet source
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "source" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "source" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network switch dhcp v4 servers seen o k body items0 last packet source based on the context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPacket" + "." + "source" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastPacket" + "." + "source" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4 Source ipv4 attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4 struct {

	// Source ipv4 address of the packet.
	Address string `json:"address,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet source IP v4
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet source IP v4 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketSourceIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP UDP attributes of the packet.
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP struct {

	// UDP checksum of the packet.
	Checksum string `json:"checksum,omitempty"`

	// UDP length of the packet.
	Length int64 `json:"length,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 last packet UDP
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 last packet UDP based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0LastPacketUDP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0 get network switch dhcp v4 servers seen o k body items0 seen by items0
swagger:model GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0
*/
type GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0 struct {

	// Device name.
	Name string `json:"name,omitempty"`

	// Device serial.
	Serial string `json:"serial,omitempty"`

	// Url link to device.
	URL string `json:"url,omitempty"`
}

// Validate validates this get network switch dhcp v4 servers seen o k body items0 seen by items0
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp v4 servers seen o k body items0 seen by items0 based on context it is used
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpV4ServersSeenOKBodyItems0SeenByItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
