// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkSensorAlertsProfileReader is a Reader for the GetNetworkSensorAlertsProfile structure.
type GetNetworkSensorAlertsProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSensorAlertsProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSensorAlertsProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSensorAlertsProfileOK creates a GetNetworkSensorAlertsProfileOK with default headers values
func NewGetNetworkSensorAlertsProfileOK() *GetNetworkSensorAlertsProfileOK {
	return &GetNetworkSensorAlertsProfileOK{}
}

/*
GetNetworkSensorAlertsProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSensorAlertsProfileOK struct {
	Payload *GetNetworkSensorAlertsProfileOKBody
}

// IsSuccess returns true when this get network sensor alerts profile o k response has a 2xx status code
func (o *GetNetworkSensorAlertsProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network sensor alerts profile o k response has a 3xx status code
func (o *GetNetworkSensorAlertsProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network sensor alerts profile o k response has a 4xx status code
func (o *GetNetworkSensorAlertsProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network sensor alerts profile o k response has a 5xx status code
func (o *GetNetworkSensorAlertsProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network sensor alerts profile o k response a status code equal to that given
func (o *GetNetworkSensorAlertsProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network sensor alerts profile o k response
func (o *GetNetworkSensorAlertsProfileOK) Code() int {
	return 200
}

func (o *GetNetworkSensorAlertsProfileOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sensor/alerts/profiles/{id}][%d] getNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSensorAlertsProfileOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sensor/alerts/profiles/{id}][%d] getNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSensorAlertsProfileOK) GetPayload() *GetNetworkSensorAlertsProfileOKBody {
	return o.Payload
}

func (o *GetNetworkSensorAlertsProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSensorAlertsProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSensorAlertsProfileOKBody get network sensor alerts profile o k body
swagger:model GetNetworkSensorAlertsProfileOKBody
*/
type GetNetworkSensorAlertsProfileOKBody struct {

	// List of conditions that will cause the profile to send an alert.
	// Required: true
	Conditions []*GetNetworkSensorAlertsProfileOKBodyConditionsItems0 `json:"conditions"`

	// Name of the sensor alert profile.
	Name string `json:"name,omitempty"`

	// ID of the sensor alert profile.
	ProfileID string `json:"profileId,omitempty"`

	// recipients
	Recipients *GetNetworkSensorAlertsProfileOKBodyRecipients `json:"recipients,omitempty"`

	// schedule
	Schedule *GetNetworkSensorAlertsProfileOKBodySchedule `json:"schedule,omitempty"`

	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials"`
}

// Validate validates this get network sensor alerts profile o k body
func (o *GetNetworkSensorAlertsProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("getNetworkSensorAlertsProfileOK"+"."+"conditions", "body", o.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipients) { // not required
		return nil
	}

	if o.Recipients != nil {
		if err := o.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sensor alerts profile o k body based on the context it is used
func (o *GetNetworkSensorAlertsProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Conditions); i++ {

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	if o.Recipients != nil {
		if err := o.Recipients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0 get network sensor alerts profile o k body conditions items0
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0 struct {

	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	// Enum: [above below]
	Direction string `json:"direction,omitempty"`

	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	// Enum: [0 60 120 180 240 300 600 900 1800 3600]
	Duration int64 `json:"duration,omitempty"`

	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	// Required: true
	Metric *string `json:"metric"`

	// threshold
	// Required: true
	Threshold *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold `json:"threshold"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["above","below"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove captures enum value "above"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove string = "above"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow captures enum value "below"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow string = "below"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,60,120,180,240,300,600,900,1800,3600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, v)
	}
}

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	// value enum
	if err := o.validateDurationEnum("duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", o.Threshold); err != nil {
		return err
	}

	if o.Threshold != nil {
		if err := o.Threshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sensor alerts profile o k body conditions items0 based on the context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) contextValidateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if o.Threshold != nil {
		if err := o.Threshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold struct {

	// door
	Door *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor `json:"door,omitempty"`

	// humidity
	Humidity *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise `json:"noise,omitempty"`

	// pm25
	Pm25 *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature `json:"temperature,omitempty"`

	// tvoc
	Tvoc *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc `json:"tvoc,omitempty"`

	// water
	Water *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater `json:"water,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sensor alerts profile o k body conditions items0 threshold based on the context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor Door open threshold. 'open' must be provided and set to true.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor struct {

	// Alerting threshold for a door open event. Must be set to true.
	// Required: true
	Open *bool `json:"open"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold door
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"door"+"."+"open", "body", o.Open); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold door based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity struct {

	// Alerting threshold as a qualitative humidity level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold humidity
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"humidity"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold humidity based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality struct {

	// Alerting threshold as a qualitative indoor air quality level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold as indoor air quality score.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold indoor air quality
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"indoorAirQuality"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold indoor air quality based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise Noise threshold. 'ambient' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise struct {

	// ambient
	// Required: true
	Ambient *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient `json:"ambient"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold noise
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) validateAmbient(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"noise"+"."+"ambient", "body", o.Ambient); err != nil {
		return err
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sensor alerts profile o k body conditions items0 threshold noise based on the context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient Ambient noise threshold. One of 'level' or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient struct {

	// Alerting threshold as adjusted decibels.
	Level int64 `json:"level,omitempty"`

	// Alerting threshold as a qualitative ambient noise level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold noise ambient
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"noise"+"."+"ambient"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold noise ambient based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 struct {

	// Alerting threshold as PM2.5 parts per million.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative PM2.5 level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold pm25
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"pm25"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold pm25 based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature struct {

	// Alerting threshold in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`

	// Alerting threshold as a qualitative temperature level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold temperature
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"temperature"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold temperature based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc struct {

	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative TVOC level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold tvoc
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum = append(getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, v)
	}
}

const (

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair captures enum value "fair"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair string = "fair"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood captures enum value "good"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood string = "good"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate captures enum value "inadequate"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate string = "inadequate"

	// GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor captures enum value "poor"
	GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor string = "poor"
)

// prop value enum
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"tvoc"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold tvoc based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater Water detection threshold. 'present' must be provided and set to true.
swagger:model GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
*/
type GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater struct {

	// Alerting threshold for a water detection event. Must be set to true.
	// Required: true
	Present *bool `json:"present"`
}

// Validate validates this get network sensor alerts profile o k body conditions items0 threshold water
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"water"+"."+"present", "body", o.Present); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body conditions items0 threshold water based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodyRecipients List of recipients that will recieve the alert.
swagger:model GetNetworkSensorAlertsProfileOKBodyRecipients
*/
type GetNetworkSensorAlertsProfileOKBodyRecipients struct {

	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails"`

	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds"`

	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers"`
}

// Validate validates this get network sensor alerts profile o k body recipients
func (o *GetNetworkSensorAlertsProfileOKBodyRecipients) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body recipients based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodyRecipients) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyRecipients) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodyRecipients) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodyRecipients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsProfileOKBodySchedule The sensor schedule to use with the alert profile.
swagger:model GetNetworkSensorAlertsProfileOKBodySchedule
*/
type GetNetworkSensorAlertsProfileOKBodySchedule struct {

	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID string `json:"id,omitempty"`

	// Name of the sensor schedule to use with the alert profile.
	Name string `json:"name,omitempty"`
}

// Validate validates this get network sensor alerts profile o k body schedule
func (o *GetNetworkSensorAlertsProfileOKBodySchedule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sensor alerts profile o k body schedule based on context it is used
func (o *GetNetworkSensorAlertsProfileOKBodySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodySchedule) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsProfileOKBodySchedule) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsProfileOKBodySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
