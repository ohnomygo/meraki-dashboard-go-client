// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkSensorAlertsProfileReader is a Reader for the CreateNetworkSensorAlertsProfile structure.
type CreateNetworkSensorAlertsProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkSensorAlertsProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNetworkSensorAlertsProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkSensorAlertsProfileOK creates a CreateNetworkSensorAlertsProfileOK with default headers values
func NewCreateNetworkSensorAlertsProfileOK() *CreateNetworkSensorAlertsProfileOK {
	return &CreateNetworkSensorAlertsProfileOK{}
}

/*
CreateNetworkSensorAlertsProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type CreateNetworkSensorAlertsProfileOK struct {
	Payload *CreateNetworkSensorAlertsProfileOKBody
}

// IsSuccess returns true when this create network sensor alerts profile o k response has a 2xx status code
func (o *CreateNetworkSensorAlertsProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network sensor alerts profile o k response has a 3xx status code
func (o *CreateNetworkSensorAlertsProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network sensor alerts profile o k response has a 4xx status code
func (o *CreateNetworkSensorAlertsProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network sensor alerts profile o k response has a 5xx status code
func (o *CreateNetworkSensorAlertsProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create network sensor alerts profile o k response a status code equal to that given
func (o *CreateNetworkSensorAlertsProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create network sensor alerts profile o k response
func (o *CreateNetworkSensorAlertsProfileOK) Code() int {
	return 200
}

func (o *CreateNetworkSensorAlertsProfileOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sensor/alerts/profiles][%d] createNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *CreateNetworkSensorAlertsProfileOK) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sensor/alerts/profiles][%d] createNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *CreateNetworkSensorAlertsProfileOK) GetPayload() *CreateNetworkSensorAlertsProfileOKBody {
	return o.Payload
}

func (o *CreateNetworkSensorAlertsProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateNetworkSensorAlertsProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateNetworkSensorAlertsProfileBody create network sensor alerts profile body
// Example: {"conditions":[{"direction":"above","duration":60,"metric":"temperature","threshold":{"door":{"open":true},"humidity":{"quality":"inadequate","relativePercentage":65},"indoorAirQuality":{"quality":"fair","score":80},"noise":{"ambient":{"level":120,"quality":"poor"}},"pm25":{"concentration":90,"quality":"fair"},"temperature":{"celsius":20.5,"fahrenheit":70,"quality":"good"},"tvoc":{"concentration":400,"quality":"poor"},"water":{"present":true}}}],"name":"My Sensor Alert Profile","recipients":{"emails":["miles@meraki.com"],"httpServerIds":["aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M="],"smsNumbers":["+15555555555"]},"schedule":{"id":"5"},"serials":["Q234-ABCD-0001","Q234-ABCD-0002","Q234-ABCD-0003"]}
swagger:model CreateNetworkSensorAlertsProfileBody
*/
type CreateNetworkSensorAlertsProfileBody struct {

	// List of conditions that will cause the profile to send an alert.
	// Required: true
	Conditions []*CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0 `json:"conditions"`

	// Name of the sensor alert profile.
	// Required: true
	Name *string `json:"name"`

	// recipients
	Recipients *CreateNetworkSensorAlertsProfileParamsBodyRecipients `json:"recipients,omitempty"`

	// schedule
	Schedule *CreateNetworkSensorAlertsProfileParamsBodySchedule `json:"schedule,omitempty"`

	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials"`
}

// Validate validates this create network sensor alerts profile body
func (o *CreateNetworkSensorAlertsProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkSensorAlertsProfile"+"."+"conditions", "body", o.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkSensorAlertsProfile"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipients) { // not required
		return nil
	}

	if o.Recipients != nil {
		if err := o.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile body based on the context it is used
func (o *CreateNetworkSensorAlertsProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Conditions); i++ {

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	if o.Recipients != nil {
		if err := o.Recipients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfile" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfile" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBody create network sensor alerts profile o k body
swagger:model CreateNetworkSensorAlertsProfileOKBody
*/
type CreateNetworkSensorAlertsProfileOKBody struct {

	// List of conditions that will cause the profile to send an alert.
	// Required: true
	Conditions []*CreateNetworkSensorAlertsProfileOKBodyConditionsItems0 `json:"conditions"`

	// Name of the sensor alert profile.
	Name string `json:"name,omitempty"`

	// ID of the sensor alert profile.
	ProfileID string `json:"profileId,omitempty"`

	// recipients
	Recipients *CreateNetworkSensorAlertsProfileOKBodyRecipients `json:"recipients,omitempty"`

	// schedule
	Schedule *CreateNetworkSensorAlertsProfileOKBodySchedule `json:"schedule,omitempty"`

	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials"`
}

// Validate validates this create network sensor alerts profile o k body
func (o *CreateNetworkSensorAlertsProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkSensorAlertsProfileOK"+"."+"conditions", "body", o.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipients) { // not required
		return nil
	}

	if o.Recipients != nil {
		if err := o.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile o k body based on the context it is used
func (o *CreateNetworkSensorAlertsProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Conditions); i++ {

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	if o.Recipients != nil {
		if err := o.Recipients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0 create network sensor alerts profile o k body conditions items0
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0 struct {

	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	// Enum: [above below]
	Direction string `json:"direction,omitempty"`

	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	// Enum: [0 60 120 180 240 300 600 900 1800 3600]
	Duration int64 `json:"duration,omitempty"`

	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	// Required: true
	Metric *string `json:"metric"`

	// threshold
	// Required: true
	Threshold *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold `json:"threshold"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["above","below"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove captures enum value "above"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove string = "above"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow captures enum value "below"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow string = "below"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,60,120,180,240,300,600,900,1800,3600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, v)
	}
}

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	// value enum
	if err := o.validateDurationEnum("duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", o.Threshold); err != nil {
		return err
	}

	if o.Threshold != nil {
		if err := o.Threshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile o k body conditions items0 based on the context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) contextValidateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if o.Threshold != nil {
		if err := o.Threshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold struct {

	// door
	Door *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor `json:"door,omitempty"`

	// humidity
	Humidity *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise `json:"noise,omitempty"`

	// pm25
	Pm25 *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature `json:"temperature,omitempty"`

	// tvoc
	Tvoc *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc `json:"tvoc,omitempty"`

	// water
	Water *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater `json:"water,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile o k body conditions items0 threshold based on the context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor Door open threshold. 'open' must be provided and set to true.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor struct {

	// Alerting threshold for a door open event. Must be set to true.
	// Required: true
	Open *bool `json:"open"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold door
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"door"+"."+"open", "body", o.Open); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold door based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity struct {

	// Alerting threshold as a qualitative humidity level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold humidity
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"humidity"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold humidity based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality struct {

	// Alerting threshold as a qualitative indoor air quality level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold as indoor air quality score.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold indoor air quality
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"indoorAirQuality"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold indoor air quality based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise Noise threshold. 'ambient' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise struct {

	// ambient
	// Required: true
	Ambient *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient `json:"ambient"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold noise
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) validateAmbient(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"noise"+"."+"ambient", "body", o.Ambient); err != nil {
		return err
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile o k body conditions items0 threshold noise based on the context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient Ambient noise threshold. One of 'level' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient struct {

	// Alerting threshold as adjusted decibels.
	Level int64 `json:"level,omitempty"`

	// Alerting threshold as a qualitative ambient noise level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold noise ambient
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"noise"+"."+"ambient"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold noise ambient based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 struct {

	// Alerting threshold as PM2.5 parts per million.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative PM2.5 level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold pm25
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"pm25"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold pm25 based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature struct {

	// Alerting threshold in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`

	// Alerting threshold as a qualitative temperature level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold temperature
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"temperature"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold temperature based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc struct {

	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative TVOC level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold tvoc
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum = append(createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"tvoc"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold tvoc based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater Water detection threshold. 'present' must be provided and set to true.
swagger:model CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
*/
type CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater struct {

	// Alerting threshold for a water detection event. Must be set to true.
	// Required: true
	Present *bool `json:"present"`
}

// Validate validates this create network sensor alerts profile o k body conditions items0 threshold water
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"water"+"."+"present", "body", o.Present); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body conditions items0 threshold water based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodyRecipients List of recipients that will recieve the alert.
swagger:model CreateNetworkSensorAlertsProfileOKBodyRecipients
*/
type CreateNetworkSensorAlertsProfileOKBodyRecipients struct {

	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails"`

	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds"`

	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers"`
}

// Validate validates this create network sensor alerts profile o k body recipients
func (o *CreateNetworkSensorAlertsProfileOKBodyRecipients) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body recipients based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodyRecipients) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyRecipients) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodyRecipients) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodyRecipients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileOKBodySchedule The sensor schedule to use with the alert profile.
swagger:model CreateNetworkSensorAlertsProfileOKBodySchedule
*/
type CreateNetworkSensorAlertsProfileOKBodySchedule struct {

	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID string `json:"id,omitempty"`

	// Name of the sensor schedule to use with the alert profile.
	Name string `json:"name,omitempty"`
}

// Validate validates this create network sensor alerts profile o k body schedule
func (o *CreateNetworkSensorAlertsProfileOKBodySchedule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network sensor alerts profile o k body schedule based on context it is used
func (o *CreateNetworkSensorAlertsProfileOKBodySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodySchedule) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileOKBodySchedule) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileOKBodySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0 create network sensor alerts profile params body conditions items0
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0 struct {

	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	// Enum: [above below]
	Direction string `json:"direction,omitempty"`

	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	// Enum: [0 60 120 180 240 300 600 900 1800 3600]
	Duration int64 `json:"duration,omitempty"`

	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	// Required: true
	Metric *string `json:"metric"`

	// threshold
	// Required: true
	Threshold *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold `json:"threshold"`
}

// Validate validates this create network sensor alerts profile params body conditions items0
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["above","below"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionAbove captures enum value "above"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionAbove string = "above"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionBelow captures enum value "below"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionBelow string = "below"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,60,120,180,240,300,600,900,1800,3600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum, v)
	}
}

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	// value enum
	if err := o.validateDurationEnum("duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", o.Threshold); err != nil {
		return err
	}

	if o.Threshold != nil {
		if err := o.Threshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile params body conditions items0 based on the context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) contextValidateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if o.Threshold != nil {
		if err := o.Threshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold struct {

	// door
	Door *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor `json:"door,omitempty"`

	// humidity
	Humidity *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise `json:"noise,omitempty"`

	// pm25
	Pm25 *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature `json:"temperature,omitempty"`

	// tvoc
	Tvoc *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc `json:"tvoc,omitempty"`

	// water
	Water *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater `json:"water,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile params body conditions items0 threshold based on the context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor Door open threshold. 'open' must be provided and set to true.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor struct {

	// Alerting threshold for a door open event. Must be set to true.
	// Required: true
	Open *bool `json:"open"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold door
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"door"+"."+"open", "body", o.Open); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold door based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity struct {

	// Alerting threshold as a qualitative humidity level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold humidity
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"humidity"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold humidity based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality struct {

	// Alerting threshold as a qualitative indoor air quality level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold as indoor air quality score.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold indoor air quality
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"indoorAirQuality"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold indoor air quality based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise Noise threshold. 'ambient' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise struct {

	// ambient
	// Required: true
	Ambient *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient `json:"ambient"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold noise
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) validateAmbient(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"noise"+"."+"ambient", "body", o.Ambient); err != nil {
		return err
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network sensor alerts profile params body conditions items0 threshold noise based on the context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient Ambient noise threshold. One of 'level' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient struct {

	// Alerting threshold as adjusted decibels.
	Level int64 `json:"level,omitempty"`

	// Alerting threshold as a qualitative ambient noise level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold noise ambient
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"noise"+"."+"ambient"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold noise ambient based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 struct {

	// Alerting threshold as PM2.5 parts per million.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative PM2.5 level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold pm25
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"pm25"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold pm25 based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature struct {

	// Alerting threshold in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`

	// Alerting threshold as a qualitative temperature level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold temperature
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"temperature"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold temperature based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc struct {

	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative TVOC level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold tvoc
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum = append(createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, v)
	}
}

const (

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityFair captures enum value "fair"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityFair string = "fair"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityGood captures enum value "good"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityGood string = "good"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityInadequate captures enum value "inadequate"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityInadequate string = "inadequate"

	// CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityPoor captures enum value "poor"
	CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityPoor string = "poor"
)

// prop value enum
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"tvoc"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold tvoc based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater Water detection threshold. 'present' must be provided and set to true.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater
*/
type CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater struct {

	// Alerting threshold for a water detection event. Must be set to true.
	// Required: true
	Present *bool `json:"present"`
}

// Validate validates this create network sensor alerts profile params body conditions items0 threshold water
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"water"+"."+"present", "body", o.Present); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sensor alerts profile params body conditions items0 threshold water based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodyRecipients List of recipients that will recieve the alert.
swagger:model CreateNetworkSensorAlertsProfileParamsBodyRecipients
*/
type CreateNetworkSensorAlertsProfileParamsBodyRecipients struct {

	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails"`

	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds"`

	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers"`
}

// Validate validates this create network sensor alerts profile params body recipients
func (o *CreateNetworkSensorAlertsProfileParamsBodyRecipients) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network sensor alerts profile params body recipients based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodyRecipients) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyRecipients) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodyRecipients) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodyRecipients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkSensorAlertsProfileParamsBodySchedule The sensor schedule to use with the alert profile.
swagger:model CreateNetworkSensorAlertsProfileParamsBodySchedule
*/
type CreateNetworkSensorAlertsProfileParamsBodySchedule struct {

	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID string `json:"id,omitempty"`
}

// Validate validates this create network sensor alerts profile params body schedule
func (o *CreateNetworkSensorAlertsProfileParamsBodySchedule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network sensor alerts profile params body schedule based on context it is used
func (o *CreateNetworkSensorAlertsProfileParamsBodySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodySchedule) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSensorAlertsProfileParamsBodySchedule) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSensorAlertsProfileParamsBodySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
