// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeviceSensorRelationshipsReader is a Reader for the GetDeviceSensorRelationships structure.
type GetDeviceSensorRelationshipsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceSensorRelationshipsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceSensorRelationshipsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceSensorRelationshipsOK creates a GetDeviceSensorRelationshipsOK with default headers values
func NewGetDeviceSensorRelationshipsOK() *GetDeviceSensorRelationshipsOK {
	return &GetDeviceSensorRelationshipsOK{}
}

/*
GetDeviceSensorRelationshipsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceSensorRelationshipsOK struct {
	Payload []*GetDeviceSensorRelationshipsOKBodyItems0
}

// IsSuccess returns true when this get device sensor relationships o k response has a 2xx status code
func (o *GetDeviceSensorRelationshipsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device sensor relationships o k response has a 3xx status code
func (o *GetDeviceSensorRelationshipsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device sensor relationships o k response has a 4xx status code
func (o *GetDeviceSensorRelationshipsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device sensor relationships o k response has a 5xx status code
func (o *GetDeviceSensorRelationshipsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device sensor relationships o k response a status code equal to that given
func (o *GetDeviceSensorRelationshipsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get device sensor relationships o k response
func (o *GetDeviceSensorRelationshipsOK) Code() int {
	return 200
}

func (o *GetDeviceSensorRelationshipsOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/sensor/relationships][%d] getDeviceSensorRelationshipsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceSensorRelationshipsOK) String() string {
	return fmt.Sprintf("[GET /devices/{serial}/sensor/relationships][%d] getDeviceSensorRelationshipsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceSensorRelationshipsOK) GetPayload() []*GetDeviceSensorRelationshipsOKBodyItems0 {
	return o.Payload
}

func (o *GetDeviceSensorRelationshipsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDeviceSensorRelationshipsOKBodyItems0 get device sensor relationships o k body items0
swagger:model GetDeviceSensorRelationshipsOKBodyItems0
*/
type GetDeviceSensorRelationshipsOKBodyItems0 struct {

	// livestream
	Livestream *GetDeviceSensorRelationshipsOKBodyItems0Livestream `json:"livestream,omitempty"`
}

// Validate validates this get device sensor relationships o k body items0
func (o *GetDeviceSensorRelationshipsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLivestream(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSensorRelationshipsOKBodyItems0) validateLivestream(formats strfmt.Registry) error {
	if swag.IsZero(o.Livestream) { // not required
		return nil
	}

	if o.Livestream != nil {
		if err := o.Livestream.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("livestream")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device sensor relationships o k body items0 based on the context it is used
func (o *GetDeviceSensorRelationshipsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLivestream(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSensorRelationshipsOKBodyItems0) contextValidateLivestream(ctx context.Context, formats strfmt.Registry) error {

	if o.Livestream != nil {
		if err := o.Livestream.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("livestream")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetDeviceSensorRelationshipsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceSensorRelationshipsOKBodyItems0Livestream A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
swagger:model GetDeviceSensorRelationshipsOKBodyItems0Livestream
*/
type GetDeviceSensorRelationshipsOKBodyItems0Livestream struct {

	// An array of the related devices for the role
	RelatedDevices []*GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0 `json:"relatedDevices"`
}

// Validate validates this get device sensor relationships o k body items0 livestream
func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRelatedDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) validateRelatedDevices(formats strfmt.Registry) error {
	if swag.IsZero(o.RelatedDevices) { // not required
		return nil
	}

	for i := 0; i < len(o.RelatedDevices); i++ {
		if swag.IsZero(o.RelatedDevices[i]) { // not required
			continue
		}

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get device sensor relationships o k body items0 livestream based on the context it is used
func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRelatedDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) contextValidateRelatedDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RelatedDevices); i++ {

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0Livestream) UnmarshalBinary(b []byte) error {
	var res GetDeviceSensorRelationshipsOKBodyItems0Livestream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0 get device sensor relationships o k body items0 livestream related devices items0
swagger:model GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0
*/
type GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0 struct {

	// The product type of the related device
	// Enum: [camera sensor]
	ProductType string `json:"productType,omitempty"`

	// The serial of the related device
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get device sensor relationships o k body items0 livestream related devices items0
func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0TypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["camera","sensor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0TypeProductTypePropEnum = append(getDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0TypeProductTypePropEnum, v)
	}
}

const (

	// GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0ProductTypeCamera captures enum value "camera"
	GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0ProductTypeCamera string = "camera"

	// GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0ProductTypeSensor captures enum value "sensor"
	GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0ProductTypeSensor string = "sensor"
)

// prop value enum
func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0TypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) validateProductType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductType) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductTypeEnum("productType", "body", o.ProductType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get device sensor relationships o k body items0 livestream related devices items0 based on context it is used
func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0) UnmarshalBinary(b []byte) error {
	var res GetDeviceSensorRelationshipsOKBodyItems0LivestreamRelatedDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
