// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSensorMqttBrokerReader is a Reader for the UpdateNetworkSensorMqttBroker structure.
type UpdateNetworkSensorMqttBrokerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSensorMqttBrokerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSensorMqttBrokerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSensorMqttBrokerOK creates a UpdateNetworkSensorMqttBrokerOK with default headers values
func NewUpdateNetworkSensorMqttBrokerOK() *UpdateNetworkSensorMqttBrokerOK {
	return &UpdateNetworkSensorMqttBrokerOK{}
}

/*
UpdateNetworkSensorMqttBrokerOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSensorMqttBrokerOK struct {
	Payload *UpdateNetworkSensorMqttBrokerOKBody
}

// IsSuccess returns true when this update network sensor mqtt broker o k response has a 2xx status code
func (o *UpdateNetworkSensorMqttBrokerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network sensor mqtt broker o k response has a 3xx status code
func (o *UpdateNetworkSensorMqttBrokerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network sensor mqtt broker o k response has a 4xx status code
func (o *UpdateNetworkSensorMqttBrokerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network sensor mqtt broker o k response has a 5xx status code
func (o *UpdateNetworkSensorMqttBrokerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network sensor mqtt broker o k response a status code equal to that given
func (o *UpdateNetworkSensorMqttBrokerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network sensor mqtt broker o k response
func (o *UpdateNetworkSensorMqttBrokerOK) Code() int {
	return 200
}

func (o *UpdateNetworkSensorMqttBrokerOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/sensor/mqttBrokers/{mqttBrokerId}][%d] updateNetworkSensorMqttBrokerOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkSensorMqttBrokerOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/sensor/mqttBrokers/{mqttBrokerId}][%d] updateNetworkSensorMqttBrokerOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkSensorMqttBrokerOK) GetPayload() *UpdateNetworkSensorMqttBrokerOKBody {
	return o.Payload
}

func (o *UpdateNetworkSensorMqttBrokerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkSensorMqttBrokerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkSensorMqttBrokerBody update network sensor mqtt broker body
// Example: {"enabled":true,"mqttBrokerId":"1234"}
swagger:model UpdateNetworkSensorMqttBrokerBody
*/
type UpdateNetworkSensorMqttBrokerBody struct {

	// Set to true to enable MQTT broker for sensor network
	// Required: true
	Enabled *bool `json:"enabled"`
}

// Validate validates this update network sensor mqtt broker body
func (o *UpdateNetworkSensorMqttBrokerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorMqttBrokerBody) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSensorMqttBroker"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor mqtt broker body based on context it is used
func (o *UpdateNetworkSensorMqttBrokerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorMqttBrokerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorMqttBrokerBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorMqttBrokerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorMqttBrokerOKBody update network sensor mqtt broker o k body
swagger:model UpdateNetworkSensorMqttBrokerOKBody
*/
type UpdateNetworkSensorMqttBrokerOKBody struct {

	// Specifies whether the broker is enabled for sensor data. Currently, only a single broker may be enabled for sensor data.
	Enabled bool `json:"enabled,omitempty"`

	// ID of the MQTT Broker.
	MqttBrokerID string `json:"mqttBrokerId,omitempty"`
}

// Validate validates this update network sensor mqtt broker o k body
func (o *UpdateNetworkSensorMqttBrokerOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sensor mqtt broker o k body based on context it is used
func (o *UpdateNetworkSensorMqttBrokerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorMqttBrokerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorMqttBrokerOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorMqttBrokerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
