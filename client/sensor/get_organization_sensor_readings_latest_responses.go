// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationSensorReadingsLatestReader is a Reader for the GetOrganizationSensorReadingsLatest structure.
type GetOrganizationSensorReadingsLatestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationSensorReadingsLatestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationSensorReadingsLatestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationSensorReadingsLatestOK creates a GetOrganizationSensorReadingsLatestOK with default headers values
func NewGetOrganizationSensorReadingsLatestOK() *GetOrganizationSensorReadingsLatestOK {
	return &GetOrganizationSensorReadingsLatestOK{}
}

/*
GetOrganizationSensorReadingsLatestOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationSensorReadingsLatestOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationSensorReadingsLatestOKBodyItems0
}

// IsSuccess returns true when this get organization sensor readings latest o k response has a 2xx status code
func (o *GetOrganizationSensorReadingsLatestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization sensor readings latest o k response has a 3xx status code
func (o *GetOrganizationSensorReadingsLatestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization sensor readings latest o k response has a 4xx status code
func (o *GetOrganizationSensorReadingsLatestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization sensor readings latest o k response has a 5xx status code
func (o *GetOrganizationSensorReadingsLatestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization sensor readings latest o k response a status code equal to that given
func (o *GetOrganizationSensorReadingsLatestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization sensor readings latest o k response
func (o *GetOrganizationSensorReadingsLatestOK) Code() int {
	return 200
}

func (o *GetOrganizationSensorReadingsLatestOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/sensor/readings/latest][%d] getOrganizationSensorReadingsLatestOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationSensorReadingsLatestOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/sensor/readings/latest][%d] getOrganizationSensorReadingsLatestOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationSensorReadingsLatestOK) GetPayload() []*GetOrganizationSensorReadingsLatestOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationSensorReadingsLatestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0 get organization sensor readings latest o k body items0
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0 struct {

	// network
	Network *GetOrganizationSensorReadingsLatestOKBodyItems0Network `json:"network,omitempty"`

	// Array of latest readings from the sensor. Each object represents a single reading for a single metric.
	Readings []*GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0 `json:"readings"`

	// Serial number of the sensor that took the readings.
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReadings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) validateReadings(formats strfmt.Registry) error {
	if swag.IsZero(o.Readings) { // not required
		return nil
	}

	for i := 0; i < len(o.Readings); i++ {
		if swag.IsZero(o.Readings[i]) { // not required
			continue
		}

		if o.Readings[i] != nil {
			if err := o.Readings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization sensor readings latest o k body items0 based on the context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReadings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {
		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) contextValidateReadings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Readings); i++ {

		if o.Readings[i] != nil {
			if err := o.Readings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0Network Network to which the sensor belongs.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0Network
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0Network struct {

	// ID of the network.
	ID string `json:"id,omitempty"`

	// Name of the network.
	Name string `json:"name,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 network
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 network based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0 get organization sensor readings latest o k body items0 readings items0
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0 struct {

	// battery
	Battery *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery `json:"battery,omitempty"`

	// button
	Button *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button `json:"button,omitempty"`

	// door
	Door *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door `json:"door,omitempty"`

	// humidity
	Humidity *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// Type of sensor reading.
	// Enum: [battery button door humidity indoorAirQuality noise pm25 temperature tvoc water]
	Metric string `json:"metric,omitempty"`

	// noise
	Noise *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise `json:"noise,omitempty"`

	// pm25
	Pm25 *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature `json:"temperature,omitempty"`

	// Time at which the reading occurred, in ISO8601 format.
	Ts string `json:"ts,omitempty"`

	// tvoc
	Tvoc *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc `json:"tvoc,omitempty"`

	// water
	Water *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water `json:"water,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBattery(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateButton(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateBattery(formats strfmt.Registry) error {
	if swag.IsZero(o.Battery) { // not required
		return nil
	}

	if o.Battery != nil {
		if err := o.Battery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateButton(formats strfmt.Registry) error {
	if swag.IsZero(o.Button) { // not required
		return nil
	}

	if o.Button != nil {
		if err := o.Button.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("button")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("button")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("door")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("humidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

var getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0TypeMetricPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["battery","button","door","humidity","indoorAirQuality","noise","pm25","temperature","tvoc","water"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0TypeMetricPropEnum = append(getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0TypeMetricPropEnum, v)
	}
}

const (

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricBattery captures enum value "battery"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricBattery string = "battery"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricButton captures enum value "button"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricButton string = "button"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricDoor captures enum value "door"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricDoor string = "door"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricHumidity captures enum value "humidity"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricHumidity string = "humidity"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricIndoorAirQuality captures enum value "indoorAirQuality"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricIndoorAirQuality string = "indoorAirQuality"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricNoise captures enum value "noise"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricNoise string = "noise"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricPm25 captures enum value "pm25"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricPm25 string = "pm25"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricTemperature captures enum value "temperature"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricTemperature string = "temperature"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricTvoc captures enum value "tvoc"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricTvoc string = "tvoc"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricWater captures enum value "water"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0MetricWater string = "water"
)

// prop value enum
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateMetricEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0TypeMetricPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateMetric(formats strfmt.Registry) error {
	if swag.IsZero(o.Metric) { // not required
		return nil
	}

	// value enum
	if err := o.validateMetricEnum("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noise")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pm25")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temperature")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization sensor readings latest o k body items0 readings items0 based on the context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBattery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateButton(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateBattery(ctx context.Context, formats strfmt.Registry) error {

	if o.Battery != nil {
		if err := o.Battery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("battery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("battery")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateButton(ctx context.Context, formats strfmt.Registry) error {

	if o.Button != nil {
		if err := o.Button.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("button")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("button")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("door")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("humidity")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noise")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pm25")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("temperature")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery Reading for the 'battery' metric. This will only be present if the 'metric' property equals 'battery'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery struct {

	// Remaining battery life.
	Percentage int64 `json:"percentage,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 battery
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 battery based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Battery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button Reading for the 'button' metric. This will only be present if the 'metric' property equals 'button'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button struct {

	// Type of button press that occurred.
	// Enum: [long short]
	PressType string `json:"pressType,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 button
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePressType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonTypePressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["long","short"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonTypePressTypePropEnum = append(getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonTypePressTypePropEnum, v)
	}
}

const (

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonPressTypeLong captures enum value "long"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonPressTypeLong string = "long"

	// GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonPressTypeShort captures enum value "short"
	GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonPressTypeShort string = "short"
)

// prop value enum
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) validatePressTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0ButtonTypePressTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) validatePressType(formats strfmt.Registry) error {
	if swag.IsZero(o.PressType) { // not required
		return nil
	}

	// value enum
	if err := o.validatePressTypeEnum("button"+"."+"pressType", "body", o.PressType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 button based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Button
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door Reading for the 'door' metric. This will only be present if the 'metric' property equals 'door'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door struct {

	// True if the door is open.
	Open bool `json:"open,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 door
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 door based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Door
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity Reading for the 'humidity' metric. This will only be present if the 'metric' property equals 'humidity'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity struct {

	// Humidity reading in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 humidity
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 humidity based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Humidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality Reading for the 'indoorAirQuality' metric. This will only be present if the 'metric' property equals 'indoorAirQuality'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality struct {

	// Indoor air quality score between 0 and 100.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 indoor air quality
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 indoor air quality based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0IndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise Reading for the 'noise' metric. This will only be present if the 'metric' property equals 'noise'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise struct {

	// ambient
	Ambient *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient `json:"ambient,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 noise
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) validateAmbient(formats strfmt.Registry) error {
	if swag.IsZero(o.Ambient) { // not required
		return nil
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization sensor readings latest o k body items0 readings items0 noise based on the context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Noise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient Ambient noise reading.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient struct {

	// Ambient noise reading in adjusted decibels.
	Level int64 `json:"level,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 noise ambient
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 noise ambient based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0NoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25 Reading for the 'pm25' metric. This will only be present if the 'metric' property equals 'pm25'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25 struct {

	// PM2.5 reading in micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 pm25
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 pm25 based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Pm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature Reading for the 'temperature' metric. This will only be present if the 'metric' property equals 'temperature'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature struct {

	// Temperature reading in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Temperature reading in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 temperature
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 temperature based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Temperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc Reading for the 'tvoc' metric. This will only be present if the 'metric' property equals 'tvoc'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc struct {

	// TVOC reading in micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 tvoc
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 tvoc based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Tvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water Reading for the 'water' metric. This will only be present if the 'metric' property equals 'water'.
swagger:model GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water
*/
type GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water struct {

	// True if water is detected.
	Present bool `json:"present,omitempty"`
}

// Validate validates this get organization sensor readings latest o k body items0 readings items0 water
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization sensor readings latest o k body items0 readings items0 water based on context it is used
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water) UnmarshalBinary(b []byte) error {
	var res GetOrganizationSensorReadingsLatestOKBodyItems0ReadingsItems0Water
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
