// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceSensorRelationshipsReader is a Reader for the UpdateDeviceSensorRelationships structure.
type UpdateDeviceSensorRelationshipsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceSensorRelationshipsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceSensorRelationshipsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceSensorRelationshipsOK creates a UpdateDeviceSensorRelationshipsOK with default headers values
func NewUpdateDeviceSensorRelationshipsOK() *UpdateDeviceSensorRelationshipsOK {
	return &UpdateDeviceSensorRelationshipsOK{}
}

/*
UpdateDeviceSensorRelationshipsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceSensorRelationshipsOK struct {
	Payload *UpdateDeviceSensorRelationshipsOKBody
}

// IsSuccess returns true when this update device sensor relationships o k response has a 2xx status code
func (o *UpdateDeviceSensorRelationshipsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update device sensor relationships o k response has a 3xx status code
func (o *UpdateDeviceSensorRelationshipsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update device sensor relationships o k response has a 4xx status code
func (o *UpdateDeviceSensorRelationshipsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update device sensor relationships o k response has a 5xx status code
func (o *UpdateDeviceSensorRelationshipsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update device sensor relationships o k response a status code equal to that given
func (o *UpdateDeviceSensorRelationshipsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update device sensor relationships o k response
func (o *UpdateDeviceSensorRelationshipsOK) Code() int {
	return 200
}

func (o *UpdateDeviceSensorRelationshipsOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/sensor/relationships][%d] updateDeviceSensorRelationshipsOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceSensorRelationshipsOK) String() string {
	return fmt.Sprintf("[PUT /devices/{serial}/sensor/relationships][%d] updateDeviceSensorRelationshipsOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceSensorRelationshipsOK) GetPayload() *UpdateDeviceSensorRelationshipsOKBody {
	return o.Payload
}

func (o *UpdateDeviceSensorRelationshipsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateDeviceSensorRelationshipsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateDeviceSensorRelationshipsBody update device sensor relationships body
// Example: {}
swagger:model UpdateDeviceSensorRelationshipsBody
*/
type UpdateDeviceSensorRelationshipsBody struct {

	// livestream
	Livestream *UpdateDeviceSensorRelationshipsParamsBodyLivestream `json:"livestream,omitempty"`
}

// Validate validates this update device sensor relationships body
func (o *UpdateDeviceSensorRelationshipsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLivestream(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsBody) validateLivestream(formats strfmt.Registry) error {
	if swag.IsZero(o.Livestream) { // not required
		return nil
	}

	if o.Livestream != nil {
		if err := o.Livestream.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceSensorRelationships" + "." + "livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceSensorRelationships" + "." + "livestream")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update device sensor relationships body based on the context it is used
func (o *UpdateDeviceSensorRelationshipsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLivestream(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsBody) contextValidateLivestream(ctx context.Context, formats strfmt.Registry) error {

	if o.Livestream != nil {
		if err := o.Livestream.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceSensorRelationships" + "." + "livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceSensorRelationships" + "." + "livestream")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDeviceSensorRelationshipsOKBody update device sensor relationships o k body
swagger:model UpdateDeviceSensorRelationshipsOKBody
*/
type UpdateDeviceSensorRelationshipsOKBody struct {

	// livestream
	Livestream *UpdateDeviceSensorRelationshipsOKBodyLivestream `json:"livestream,omitempty"`
}

// Validate validates this update device sensor relationships o k body
func (o *UpdateDeviceSensorRelationshipsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLivestream(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsOKBody) validateLivestream(formats strfmt.Registry) error {
	if swag.IsZero(o.Livestream) { // not required
		return nil
	}

	if o.Livestream != nil {
		if err := o.Livestream.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update device sensor relationships o k body based on the context it is used
func (o *UpdateDeviceSensorRelationshipsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLivestream(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsOKBody) contextValidateLivestream(ctx context.Context, formats strfmt.Registry) error {

	if o.Livestream != nil {
		if err := o.Livestream.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDeviceSensorRelationshipsOKBodyLivestream A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
swagger:model UpdateDeviceSensorRelationshipsOKBodyLivestream
*/
type UpdateDeviceSensorRelationshipsOKBodyLivestream struct {

	// An array of the related devices for the role
	RelatedDevices []*UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0 `json:"relatedDevices"`
}

// Validate validates this update device sensor relationships o k body livestream
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRelatedDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) validateRelatedDevices(formats strfmt.Registry) error {
	if swag.IsZero(o.RelatedDevices) { // not required
		return nil
	}

	for i := 0; i < len(o.RelatedDevices); i++ {
		if swag.IsZero(o.RelatedDevices[i]) { // not required
			continue
		}

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update device sensor relationships o k body livestream based on the context it is used
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRelatedDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) contextValidateRelatedDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RelatedDevices); i++ {

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSensorRelationshipsOK" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestream) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsOKBodyLivestream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0 update device sensor relationships o k body livestream related devices items0
swagger:model UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0
*/
type UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0 struct {

	// The product type of the related device
	// Enum: [camera sensor]
	ProductType string `json:"productType,omitempty"`

	// The serial of the related device
	Serial string `json:"serial,omitempty"`
}

// Validate validates this update device sensor relationships o k body livestream related devices items0
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0TypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["camera","sensor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0TypeProductTypePropEnum = append(updateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0TypeProductTypePropEnum, v)
	}
}

const (

	// UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0ProductTypeCamera captures enum value "camera"
	UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0ProductTypeCamera string = "camera"

	// UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0ProductTypeSensor captures enum value "sensor"
	UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0ProductTypeSensor string = "sensor"
)

// prop value enum
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0TypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) validateProductType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProductType) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductTypeEnum("productType", "body", o.ProductType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device sensor relationships o k body livestream related devices items0 based on context it is used
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsOKBodyLivestreamRelatedDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDeviceSensorRelationshipsParamsBodyLivestream A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers.
swagger:model UpdateDeviceSensorRelationshipsParamsBodyLivestream
*/
type UpdateDeviceSensorRelationshipsParamsBodyLivestream struct {

	// An array of the related devices for the role
	RelatedDevices []*UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0 `json:"relatedDevices"`
}

// Validate validates this update device sensor relationships params body livestream
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRelatedDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) validateRelatedDevices(formats strfmt.Registry) error {
	if swag.IsZero(o.RelatedDevices) { // not required
		return nil
	}

	for i := 0; i < len(o.RelatedDevices); i++ {
		if swag.IsZero(o.RelatedDevices[i]) { // not required
			continue
		}

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSensorRelationships" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSensorRelationships" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update device sensor relationships params body livestream based on the context it is used
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRelatedDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) contextValidateRelatedDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RelatedDevices); i++ {

		if o.RelatedDevices[i] != nil {
			if err := o.RelatedDevices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSensorRelationships" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSensorRelationships" + "." + "livestream" + "." + "relatedDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestream) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsParamsBodyLivestream
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0 update device sensor relationships params body livestream related devices items0
swagger:model UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0
*/
type UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0 struct {

	// The serial of the related device
	// Required: true
	Serial *string `json:"serial"`
}

// Validate validates this update device sensor relationships params body livestream related devices items0
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", o.Serial); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device sensor relationships params body livestream related devices items0 based on context it is used
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSensorRelationshipsParamsBodyLivestreamRelatedDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
