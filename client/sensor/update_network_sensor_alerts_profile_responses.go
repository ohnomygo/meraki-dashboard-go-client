// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSensorAlertsProfileReader is a Reader for the UpdateNetworkSensorAlertsProfile structure.
type UpdateNetworkSensorAlertsProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSensorAlertsProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSensorAlertsProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSensorAlertsProfileOK creates a UpdateNetworkSensorAlertsProfileOK with default headers values
func NewUpdateNetworkSensorAlertsProfileOK() *UpdateNetworkSensorAlertsProfileOK {
	return &UpdateNetworkSensorAlertsProfileOK{}
}

/*
UpdateNetworkSensorAlertsProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSensorAlertsProfileOK struct {
	Payload *UpdateNetworkSensorAlertsProfileOKBody
}

// IsSuccess returns true when this update network sensor alerts profile o k response has a 2xx status code
func (o *UpdateNetworkSensorAlertsProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network sensor alerts profile o k response has a 3xx status code
func (o *UpdateNetworkSensorAlertsProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network sensor alerts profile o k response has a 4xx status code
func (o *UpdateNetworkSensorAlertsProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network sensor alerts profile o k response has a 5xx status code
func (o *UpdateNetworkSensorAlertsProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network sensor alerts profile o k response a status code equal to that given
func (o *UpdateNetworkSensorAlertsProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network sensor alerts profile o k response
func (o *UpdateNetworkSensorAlertsProfileOK) Code() int {
	return 200
}

func (o *UpdateNetworkSensorAlertsProfileOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/sensor/alerts/profiles/{id}][%d] updateNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkSensorAlertsProfileOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/sensor/alerts/profiles/{id}][%d] updateNetworkSensorAlertsProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkSensorAlertsProfileOK) GetPayload() *UpdateNetworkSensorAlertsProfileOKBody {
	return o.Payload
}

func (o *UpdateNetworkSensorAlertsProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkSensorAlertsProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkSensorAlertsProfileBody update network sensor alerts profile body
// Example: {"conditions":[{"direction":"above","duration":60,"metric":"temperature","threshold":{"door":{"open":true},"humidity":{"quality":"inadequate","relativePercentage":65},"indoorAirQuality":{"quality":"fair","score":80},"noise":{"ambient":{"level":120,"quality":"poor"}},"pm25":{"concentration":90,"quality":"fair"},"temperature":{"celsius":20.5,"fahrenheit":70,"quality":"good"},"tvoc":{"concentration":400,"quality":"poor"},"water":{"present":true}}}],"name":"My Sensor Alert Profile","recipients":{"emails":["miles@meraki.com"],"httpServerIds":["aHR0cHM6Ly93d3cuZXhhbXBsZS5jb20vd2ViaG9va3M="],"smsNumbers":["+15555555555"]},"schedule":{"id":"5"},"serials":["Q234-ABCD-0001","Q234-ABCD-0002","Q234-ABCD-0003"]}
swagger:model UpdateNetworkSensorAlertsProfileBody
*/
type UpdateNetworkSensorAlertsProfileBody struct {

	// List of conditions that will cause the profile to send an alert.
	Conditions []*UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0 `json:"conditions"`

	// Name of the sensor alert profile.
	Name string `json:"name,omitempty"`

	// recipients
	Recipients *UpdateNetworkSensorAlertsProfileParamsBodyRecipients `json:"recipients,omitempty"`

	// schedule
	Schedule *UpdateNetworkSensorAlertsProfileParamsBodySchedule `json:"schedule,omitempty"`

	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials"`
}

// Validate validates this update network sensor alerts profile body
func (o *UpdateNetworkSensorAlertsProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipients) { // not required
		return nil
	}

	if o.Recipients != nil {
		if err := o.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile body based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Conditions); i++ {

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	if o.Recipients != nil {
		if err := o.Recipients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfile" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfile" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBody update network sensor alerts profile o k body
swagger:model UpdateNetworkSensorAlertsProfileOKBody
*/
type UpdateNetworkSensorAlertsProfileOKBody struct {

	// List of conditions that will cause the profile to send an alert.
	// Required: true
	Conditions []*UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0 `json:"conditions"`

	// Name of the sensor alert profile.
	Name string `json:"name,omitempty"`

	// ID of the sensor alert profile.
	ProfileID string `json:"profileId,omitempty"`

	// recipients
	Recipients *UpdateNetworkSensorAlertsProfileOKBodyRecipients `json:"recipients,omitempty"`

	// schedule
	Schedule *UpdateNetworkSensorAlertsProfileOKBodySchedule `json:"schedule,omitempty"`

	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials"`
}

// Validate validates this update network sensor alerts profile o k body
func (o *UpdateNetworkSensorAlertsProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) validateConditions(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSensorAlertsProfileOK"+"."+"conditions", "body", o.Conditions); err != nil {
		return err
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(o.Recipients) { // not required
		return nil
	}

	if o.Recipients != nil {
		if err := o.Recipients.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile o k body based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRecipients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Conditions); i++ {

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) contextValidateRecipients(ctx context.Context, formats strfmt.Registry) error {

	if o.Recipients != nil {
		if err := o.Recipients.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "recipients")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "recipients")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSensorAlertsProfileOK" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0 update network sensor alerts profile o k body conditions items0
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0 struct {

	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	// Enum: [above below]
	Direction string `json:"direction,omitempty"`

	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	// Enum: [0 60 120 180 240 300 600 900 1800 3600]
	Duration int64 `json:"duration,omitempty"`

	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	// Required: true
	Metric *string `json:"metric"`

	// threshold
	// Required: true
	Threshold *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold `json:"threshold"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["above","below"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove captures enum value "above"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionAbove string = "above"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow captures enum value "below"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0DirectionBelow string = "below"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,60,120,180,240,300,600,900,1800,3600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, v)
	}
}

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	// value enum
	if err := o.validateDurationEnum("duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", o.Threshold); err != nil {
		return err
	}

	if o.Threshold != nil {
		if err := o.Threshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile o k body conditions items0 based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) contextValidateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if o.Threshold != nil {
		if err := o.Threshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold struct {

	// door
	Door *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor `json:"door,omitempty"`

	// humidity
	Humidity *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise `json:"noise,omitempty"`

	// pm25
	Pm25 *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature `json:"temperature,omitempty"`

	// tvoc
	Tvoc *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc `json:"tvoc,omitempty"`

	// water
	Water *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater `json:"water,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile o k body conditions items0 threshold based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor Door open threshold. 'open' must be provided and set to true.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor struct {

	// Alerting threshold for a door open event. Must be set to true.
	// Required: true
	Open *bool `json:"open"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold door
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"door"+"."+"open", "body", o.Open); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold door based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdDoor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity struct {

	// Alerting threshold as a qualitative humidity level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold humidity
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"humidity"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold humidity based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdHumidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality struct {

	// Alerting threshold as a qualitative indoor air quality level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold as indoor air quality score.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold indoor air quality
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"indoorAirQuality"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold indoor air quality based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdIndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise Noise threshold. 'ambient' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise struct {

	// ambient
	// Required: true
	Ambient *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient `json:"ambient"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold noise
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) validateAmbient(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"noise"+"."+"ambient", "body", o.Ambient); err != nil {
		return err
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile o k body conditions items0 threshold noise based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient Ambient noise threshold. One of 'level' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient struct {

	// Alerting threshold as adjusted decibels.
	Level int64 `json:"level,omitempty"`

	// Alerting threshold as a qualitative ambient noise level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold noise ambient
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"noise"+"."+"ambient"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold noise ambient based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdNoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25 struct {

	// Alerting threshold as PM2.5 parts per million.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative PM2.5 level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold pm25
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25QualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"pm25"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold pm25 based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdPm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature struct {

	// Alerting threshold in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`

	// Alerting threshold as a qualitative temperature level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold temperature
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"temperature"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold temperature based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTemperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc struct {

	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative TVOC level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold tvoc
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"tvoc"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold tvoc based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdTvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater Water detection threshold. 'present' must be provided and set to true.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
*/
type UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater struct {

	// Alerting threshold for a water detection event. Must be set to true.
	// Required: true
	Present *bool `json:"present"`
}

// Validate validates this update network sensor alerts profile o k body conditions items0 threshold water
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"water"+"."+"present", "body", o.Present); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body conditions items0 threshold water based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyConditionsItems0ThresholdWater
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodyRecipients List of recipients that will recieve the alert.
swagger:model UpdateNetworkSensorAlertsProfileOKBodyRecipients
*/
type UpdateNetworkSensorAlertsProfileOKBodyRecipients struct {

	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails"`

	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds"`

	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers"`
}

// Validate validates this update network sensor alerts profile o k body recipients
func (o *UpdateNetworkSensorAlertsProfileOKBodyRecipients) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body recipients based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodyRecipients) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyRecipients) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodyRecipients) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodyRecipients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileOKBodySchedule The sensor schedule to use with the alert profile.
swagger:model UpdateNetworkSensorAlertsProfileOKBodySchedule
*/
type UpdateNetworkSensorAlertsProfileOKBodySchedule struct {

	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID string `json:"id,omitempty"`

	// Name of the sensor schedule to use with the alert profile.
	Name string `json:"name,omitempty"`
}

// Validate validates this update network sensor alerts profile o k body schedule
func (o *UpdateNetworkSensorAlertsProfileOKBodySchedule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sensor alerts profile o k body schedule based on context it is used
func (o *UpdateNetworkSensorAlertsProfileOKBodySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodySchedule) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileOKBodySchedule) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileOKBodySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0 update network sensor alerts profile params body conditions items0
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0 struct {

	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	// Enum: [above below]
	Direction string `json:"direction,omitempty"`

	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	// Enum: [0 60 120 180 240 300 600 900 1800 3600]
	Duration int64 `json:"duration,omitempty"`

	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	// Required: true
	Metric *string `json:"metric"`

	// threshold
	// Required: true
	Threshold *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold `json:"threshold"`
}

// Validate validates this update network sensor alerts profile params body conditions items0
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["above","below"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionAbove captures enum value "above"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionAbove string = "above"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionBelow captures enum value "below"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0DirectionBelow string = "below"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(o.Direction) { // not required
		return nil
	}

	// value enum
	if err := o.validateDirectionEnum("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,60,120,180,240,300,600,900,1800,3600]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum, v)
	}
}

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDurationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0TypeDurationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(o.Duration) { // not required
		return nil
	}

	// value enum
	if err := o.validateDurationEnum("duration", "body", o.Duration); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", o.Metric); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", o.Threshold); err != nil {
		return err
	}

	if o.Threshold != nil {
		if err := o.Threshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile params body conditions items0 based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) contextValidateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if o.Threshold != nil {
		if err := o.Threshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold struct {

	// door
	Door *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor `json:"door,omitempty"`

	// humidity
	Humidity *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity `json:"humidity,omitempty"`

	// indoor air quality
	IndoorAirQuality *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise `json:"noise,omitempty"`

	// pm25
	Pm25 *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 `json:"pm25,omitempty"`

	// temperature
	Temperature *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature `json:"temperature,omitempty"`

	// tvoc
	Tvoc *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc `json:"tvoc,omitempty"`

	// water
	Water *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater `json:"water,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDoor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHumidity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndoorAirQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemperature(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTvoc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWater(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateDoor(formats strfmt.Registry) error {
	if swag.IsZero(o.Door) { // not required
		return nil
	}

	if o.Door != nil {
		if err := o.Door.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateHumidity(formats strfmt.Registry) error {
	if swag.IsZero(o.Humidity) { // not required
		return nil
	}

	if o.Humidity != nil {
		if err := o.Humidity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateIndoorAirQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.IndoorAirQuality) { // not required
		return nil
	}

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validatePm25(formats strfmt.Registry) error {
	if swag.IsZero(o.Pm25) { // not required
		return nil
	}

	if o.Pm25 != nil {
		if err := o.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateTemperature(formats strfmt.Registry) error {
	if swag.IsZero(o.Temperature) { // not required
		return nil
	}

	if o.Temperature != nil {
		if err := o.Temperature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateTvoc(formats strfmt.Registry) error {
	if swag.IsZero(o.Tvoc) { // not required
		return nil
	}

	if o.Tvoc != nil {
		if err := o.Tvoc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) validateWater(formats strfmt.Registry) error {
	if swag.IsZero(o.Water) { // not required
		return nil
	}

	if o.Water != nil {
		if err := o.Water.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile params body conditions items0 threshold based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDoor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHumidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIndoorAirQuality(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePm25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemperature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTvoc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWater(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateDoor(ctx context.Context, formats strfmt.Registry) error {

	if o.Door != nil {
		if err := o.Door.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "door")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "door")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateHumidity(ctx context.Context, formats strfmt.Registry) error {

	if o.Humidity != nil {
		if err := o.Humidity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "humidity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "humidity")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateIndoorAirQuality(ctx context.Context, formats strfmt.Registry) error {

	if o.IndoorAirQuality != nil {
		if err := o.IndoorAirQuality.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "indoorAirQuality")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "indoorAirQuality")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidatePm25(ctx context.Context, formats strfmt.Registry) error {

	if o.Pm25 != nil {
		if err := o.Pm25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "pm25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateTemperature(ctx context.Context, formats strfmt.Registry) error {

	if o.Temperature != nil {
		if err := o.Temperature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "temperature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "temperature")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateTvoc(ctx context.Context, formats strfmt.Registry) error {

	if o.Tvoc != nil {
		if err := o.Tvoc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "tvoc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "tvoc")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) contextValidateWater(ctx context.Context, formats strfmt.Registry) error {

	if o.Water != nil {
		if err := o.Water.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "water")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "water")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor Door open threshold. 'open' must be provided and set to true.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor struct {

	// Alerting threshold for a door open event. Must be set to true.
	// Required: true
	Open *bool `json:"open"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold door
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"door"+"."+"open", "body", o.Open); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold door based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdDoor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity struct {

	// Alerting threshold as a qualitative humidity level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold in %RH.
	RelativePercentage int64 `json:"relativePercentage,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold humidity
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"humidity"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold humidity based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdHumidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality struct {

	// Alerting threshold as a qualitative indoor air quality level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`

	// Alerting threshold as indoor air quality score.
	Score int64 `json:"score,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold indoor air quality
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQualityTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"indoorAirQuality"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold indoor air quality based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdIndoorAirQuality
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise Noise threshold. 'ambient' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise struct {

	// ambient
	// Required: true
	Ambient *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient `json:"ambient"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold noise
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmbient(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) validateAmbient(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"noise"+"."+"ambient", "body", o.Ambient); err != nil {
		return err
	}

	if o.Ambient != nil {
		if err := o.Ambient.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sensor alerts profile params body conditions items0 threshold noise based on the context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmbient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) contextValidateAmbient(ctx context.Context, formats strfmt.Registry) error {

	if o.Ambient != nil {
		if err := o.Ambient.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("threshold" + "." + "noise" + "." + "ambient")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient Ambient noise threshold. One of 'level' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient struct {

	// Alerting threshold as adjusted decibels.
	Level int64 `json:"level,omitempty"`

	// Alerting threshold as a qualitative ambient noise level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold noise ambient
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbientTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"noise"+"."+"ambient"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold noise ambient based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdNoiseAmbient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25 struct {

	// Alerting threshold as PM2.5 parts per million.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative PM2.5 level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold pm25
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25QualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25TypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"pm25"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold pm25 based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdPm25
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature struct {

	// Alerting threshold in degrees Celsius.
	Celsius float32 `json:"celsius,omitempty"`

	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit float32 `json:"fahrenheit,omitempty"`

	// Alerting threshold as a qualitative temperature level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold temperature
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperatureTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"temperature"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold temperature based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTemperature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc struct {

	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration int64 `json:"concentration,omitempty"`

	// Alerting threshold as a qualitative TVOC level.
	// Enum: [fair good inadequate poor]
	Quality string `json:"quality,omitempty"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold tvoc
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fair","good","inadequate","poor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum = append(updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, v)
	}
}

const (

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityFair captures enum value "fair"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityFair string = "fair"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityGood captures enum value "good"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityGood string = "good"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityInadequate captures enum value "inadequate"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityInadequate string = "inadequate"

	// UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityPoor captures enum value "poor"
	UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocQualityPoor string = "poor"
)

// prop value enum
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvocTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("threshold"+"."+"tvoc"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold tvoc based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdTvoc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater Water detection threshold. 'present' must be provided and set to true.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater
*/
type UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater struct {

	// Alerting threshold for a water detection event. Must be set to true.
	// Required: true
	Present *bool `json:"present"`
}

// Validate validates this update network sensor alerts profile params body conditions items0 threshold water
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePresent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) validatePresent(formats strfmt.Registry) error {

	if err := validate.Required("threshold"+"."+"water"+"."+"present", "body", o.Present); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network sensor alerts profile params body conditions items0 threshold water based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyConditionsItems0ThresholdWater
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodyRecipients List of recipients that will recieve the alert.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodyRecipients
*/
type UpdateNetworkSensorAlertsProfileParamsBodyRecipients struct {

	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails"`

	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds"`

	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers"`
}

// Validate validates this update network sensor alerts profile params body recipients
func (o *UpdateNetworkSensorAlertsProfileParamsBodyRecipients) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sensor alerts profile params body recipients based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodyRecipients) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyRecipients) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodyRecipients) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodyRecipients
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkSensorAlertsProfileParamsBodySchedule The sensor schedule to use with the alert profile.
swagger:model UpdateNetworkSensorAlertsProfileParamsBodySchedule
*/
type UpdateNetworkSensorAlertsProfileParamsBodySchedule struct {

	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID string `json:"id,omitempty"`
}

// Validate validates this update network sensor alerts profile params body schedule
func (o *UpdateNetworkSensorAlertsProfileParamsBodySchedule) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sensor alerts profile params body schedule based on context it is used
func (o *UpdateNetworkSensorAlertsProfileParamsBodySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodySchedule) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSensorAlertsProfileParamsBodySchedule) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSensorAlertsProfileParamsBodySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
