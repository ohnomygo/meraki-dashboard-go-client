// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkSensorAlertsCurrentOverviewByMetricReader is a Reader for the GetNetworkSensorAlertsCurrentOverviewByMetric structure.
type GetNetworkSensorAlertsCurrentOverviewByMetricReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSensorAlertsCurrentOverviewByMetricOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSensorAlertsCurrentOverviewByMetricOK creates a GetNetworkSensorAlertsCurrentOverviewByMetricOK with default headers values
func NewGetNetworkSensorAlertsCurrentOverviewByMetricOK() *GetNetworkSensorAlertsCurrentOverviewByMetricOK {
	return &GetNetworkSensorAlertsCurrentOverviewByMetricOK{}
}

/*
GetNetworkSensorAlertsCurrentOverviewByMetricOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSensorAlertsCurrentOverviewByMetricOK struct {
	Payload *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody
}

// IsSuccess returns true when this get network sensor alerts current overview by metric o k response has a 2xx status code
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network sensor alerts current overview by metric o k response has a 3xx status code
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network sensor alerts current overview by metric o k response has a 4xx status code
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network sensor alerts current overview by metric o k response has a 5xx status code
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network sensor alerts current overview by metric o k response a status code equal to that given
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network sensor alerts current overview by metric o k response
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) Code() int {
	return 200
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sensor/alerts/current/overview/byMetric][%d] getNetworkSensorAlertsCurrentOverviewByMetricOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sensor/alerts/current/overview/byMetric][%d] getNetworkSensorAlertsCurrentOverviewByMetricOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) GetPayload() *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody {
	return o.Payload
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSensorAlertsCurrentOverviewByMetricOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSensorAlertsCurrentOverviewByMetricOKBody get network sensor alerts current overview by metric o k body
swagger:model GetNetworkSensorAlertsCurrentOverviewByMetricOKBody
*/
type GetNetworkSensorAlertsCurrentOverviewByMetricOKBody struct {

	// counts
	Counts *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts `json:"counts,omitempty"`

	// List of metrics that are supported for alerts, based on available sensor devices in the network
	SupportedMetrics []string `json:"supportedMetrics"`
}

// Validate validates this get network sensor alerts current overview by metric o k body
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSupportedMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) validateCounts(formats strfmt.Registry) error {
	if swag.IsZero(o.Counts) { // not required
		return nil
	}

	if o.Counts != nil {
		if err := o.Counts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts")
			}
			return err
		}
	}

	return nil
}

var getNetworkSensorAlertsCurrentOverviewByMetricOKBodySupportedMetricsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["door","humidity","indoorAirQuality","noise","pm25","temperature","tvoc","water"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSensorAlertsCurrentOverviewByMetricOKBodySupportedMetricsItemsEnum = append(getNetworkSensorAlertsCurrentOverviewByMetricOKBodySupportedMetricsItemsEnum, v)
	}
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) validateSupportedMetricsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSensorAlertsCurrentOverviewByMetricOKBodySupportedMetricsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) validateSupportedMetrics(formats strfmt.Registry) error {
	if swag.IsZero(o.SupportedMetrics) { // not required
		return nil
	}

	for i := 0; i < len(o.SupportedMetrics); i++ {

		// value enum
		if err := o.validateSupportedMetricsItemsEnum("getNetworkSensorAlertsCurrentOverviewByMetricOK"+"."+"supportedMetrics"+"."+strconv.Itoa(i), "body", o.SupportedMetrics[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this get network sensor alerts current overview by metric o k body based on the context it is used
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	if o.Counts != nil {
		if err := o.Counts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsCurrentOverviewByMetricOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts Counts of currently alerting sensors, aggregated by alerting metric
swagger:model GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts
*/
type GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts struct {

	// Number of sensors that are currently alerting due to an open door
	Door int64 `json:"door,omitempty"`

	// Number of sensors that are currently alerting due to humidity readings
	Humidity int64 `json:"humidity,omitempty"`

	// Number of sensors that are currently alerting due to indoor air quality readings
	IndoorAirQuality int64 `json:"indoorAirQuality,omitempty"`

	// noise
	Noise *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise `json:"noise,omitempty"`

	// Number of sensors that are currently alerting due to PM2.5 readings
	Pm25 int64 `json:"pm25,omitempty"`

	// Number of sensors that are currently alerting due to temperature readings
	Temperature int64 `json:"temperature,omitempty"`

	// Number of sensors that are currently alerting due to TVOC readings
	Tvoc int64 `json:"tvoc,omitempty"`

	// Number of sensors that are currently alerting due to the presence of water
	Water int64 `json:"water,omitempty"`
}

// Validate validates this get network sensor alerts current overview by metric o k body counts
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNoise(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) validateNoise(formats strfmt.Registry) error {
	if swag.IsZero(o.Noise) { // not required
		return nil
	}

	if o.Noise != nil {
		if err := o.Noise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sensor alerts current overview by metric o k body counts based on the context it is used
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNoise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) contextValidateNoise(ctx context.Context, formats strfmt.Registry) error {

	if o.Noise != nil {
		if err := o.Noise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts" + "." + "noise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkSensorAlertsCurrentOverviewByMetricOK" + "." + "counts" + "." + "noise")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise Object containing the number of sensors that are currently alerting due to noise readings
swagger:model GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise
*/
type GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise struct {

	// Number of sensors that are currently alerting due to ambient noise readings
	Ambient int64 `json:"ambient,omitempty"`
}

// Validate validates this get network sensor alerts current overview by metric o k body counts noise
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sensor alerts current overview by metric o k body counts noise based on context it is used
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise) UnmarshalBinary(b []byte) error {
	var res GetNetworkSensorAlertsCurrentOverviewByMetricOKBodyCountsNoise
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
