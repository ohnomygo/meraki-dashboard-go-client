// Code generated by go-swagger; DO NOT EDIT.

package sensor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkSensorAlertsOverviewByMetricParams creates a new GetNetworkSensorAlertsOverviewByMetricParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkSensorAlertsOverviewByMetricParams() *GetNetworkSensorAlertsOverviewByMetricParams {
	return &GetNetworkSensorAlertsOverviewByMetricParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkSensorAlertsOverviewByMetricParamsWithTimeout creates a new GetNetworkSensorAlertsOverviewByMetricParams object
// with the ability to set a timeout on a request.
func NewGetNetworkSensorAlertsOverviewByMetricParamsWithTimeout(timeout time.Duration) *GetNetworkSensorAlertsOverviewByMetricParams {
	return &GetNetworkSensorAlertsOverviewByMetricParams{
		timeout: timeout,
	}
}

// NewGetNetworkSensorAlertsOverviewByMetricParamsWithContext creates a new GetNetworkSensorAlertsOverviewByMetricParams object
// with the ability to set a context for a request.
func NewGetNetworkSensorAlertsOverviewByMetricParamsWithContext(ctx context.Context) *GetNetworkSensorAlertsOverviewByMetricParams {
	return &GetNetworkSensorAlertsOverviewByMetricParams{
		Context: ctx,
	}
}

// NewGetNetworkSensorAlertsOverviewByMetricParamsWithHTTPClient creates a new GetNetworkSensorAlertsOverviewByMetricParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkSensorAlertsOverviewByMetricParamsWithHTTPClient(client *http.Client) *GetNetworkSensorAlertsOverviewByMetricParams {
	return &GetNetworkSensorAlertsOverviewByMetricParams{
		HTTPClient: client,
	}
}

/*
GetNetworkSensorAlertsOverviewByMetricParams contains all the parameters to send to the API endpoint

	for the get network sensor alerts overview by metric operation.

	Typically these are written to a http.Request.
*/
type GetNetworkSensorAlertsOverviewByMetricParams struct {

	/* Interval.

	   The time interval in seconds for returned data. The valid intervals are: 86400, 604800. The default is 604800.
	*/
	Interval *int64

	/* NetworkID.

	   Network ID
	*/
	NetworkID string

	/* T0.

	   The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
	*/
	T0 *string

	/* T1.

	   The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
	*/
	T1 *string

	/* Timespan.

	   The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 7 days.

	   Format: float
	*/
	Timespan *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network sensor alerts overview by metric params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithDefaults() *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network sensor alerts overview by metric params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithTimeout(timeout time.Duration) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithContext(ctx context.Context) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithHTTPClient(client *http.Client) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInterval adds the interval to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithInterval(interval *int64) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetInterval(interval *int64) {
	o.Interval = interval
}

// WithNetworkID adds the networkID to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithNetworkID(networkID string) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithT0 adds the t0 to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithT0(t0 *string) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithT1(t1 *string) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WithTimespan(timespan *float32) *GetNetworkSensorAlertsOverviewByMetricParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network sensor alerts overview by metric params
func (o *GetNetworkSensorAlertsOverviewByMetricParams) SetTimespan(timespan *float32) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkSensorAlertsOverviewByMetricParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Interval != nil {

		// query param interval
		var qrInterval int64

		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := swag.FormatInt64(qrInterval)
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string

		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {

			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}
	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string

		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {

			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float32

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat32(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
