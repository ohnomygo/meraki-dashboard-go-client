// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkWirelessBluetoothSettingsReader is a Reader for the GetNetworkWirelessBluetoothSettings structure.
type GetNetworkWirelessBluetoothSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkWirelessBluetoothSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkWirelessBluetoothSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkWirelessBluetoothSettingsOK creates a GetNetworkWirelessBluetoothSettingsOK with default headers values
func NewGetNetworkWirelessBluetoothSettingsOK() *GetNetworkWirelessBluetoothSettingsOK {
	return &GetNetworkWirelessBluetoothSettingsOK{}
}

/*
GetNetworkWirelessBluetoothSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkWirelessBluetoothSettingsOK struct {
	Payload *GetNetworkWirelessBluetoothSettingsOKBody
}

// IsSuccess returns true when this get network wireless bluetooth settings o k response has a 2xx status code
func (o *GetNetworkWirelessBluetoothSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network wireless bluetooth settings o k response has a 3xx status code
func (o *GetNetworkWirelessBluetoothSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network wireless bluetooth settings o k response has a 4xx status code
func (o *GetNetworkWirelessBluetoothSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network wireless bluetooth settings o k response has a 5xx status code
func (o *GetNetworkWirelessBluetoothSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network wireless bluetooth settings o k response a status code equal to that given
func (o *GetNetworkWirelessBluetoothSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network wireless bluetooth settings o k response
func (o *GetNetworkWirelessBluetoothSettingsOK) Code() int {
	return 200
}

func (o *GetNetworkWirelessBluetoothSettingsOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/wireless/bluetooth/settings][%d] getNetworkWirelessBluetoothSettingsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkWirelessBluetoothSettingsOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/wireless/bluetooth/settings][%d] getNetworkWirelessBluetoothSettingsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkWirelessBluetoothSettingsOK) GetPayload() *GetNetworkWirelessBluetoothSettingsOKBody {
	return o.Payload
}

func (o *GetNetworkWirelessBluetoothSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkWirelessBluetoothSettingsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkWirelessBluetoothSettingsOKBody get network wireless bluetooth settings o k body
swagger:model GetNetworkWirelessBluetoothSettingsOKBody
*/
type GetNetworkWirelessBluetoothSettingsOKBody struct {

	// Whether APs will advertise beacons.
	AdvertisingEnabled bool `json:"advertisingEnabled,omitempty"`

	// Whether ESL is enabled on this network.
	EslEnabled bool `json:"eslEnabled,omitempty"`

	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major int64 `json:"major,omitempty"`

	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode string `json:"majorMinorAssignmentMode,omitempty"`

	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor int64 `json:"minor,omitempty"`

	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled bool `json:"scanningEnabled,omitempty"`

	// The UUID to be used in the beacon identifier.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this get network wireless bluetooth settings o k body
func (o *GetNetworkWirelessBluetoothSettingsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network wireless bluetooth settings o k body based on context it is used
func (o *GetNetworkWirelessBluetoothSettingsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkWirelessBluetoothSettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkWirelessBluetoothSettingsOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkWirelessBluetoothSettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
