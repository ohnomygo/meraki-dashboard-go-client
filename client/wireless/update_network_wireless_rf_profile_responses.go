// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessRfProfileReader is a Reader for the UpdateNetworkWirelessRfProfile structure.
type UpdateNetworkWirelessRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessRfProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessRfProfileOK creates a UpdateNetworkWirelessRfProfileOK with default headers values
func NewUpdateNetworkWirelessRfProfileOK() *UpdateNetworkWirelessRfProfileOK {
	return &UpdateNetworkWirelessRfProfileOK{}
}

/*
UpdateNetworkWirelessRfProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessRfProfileOK struct {
	Payload *UpdateNetworkWirelessRfProfileOKBody
}

// IsSuccess returns true when this update network wireless rf profile o k response has a 2xx status code
func (o *UpdateNetworkWirelessRfProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network wireless rf profile o k response has a 3xx status code
func (o *UpdateNetworkWirelessRfProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network wireless rf profile o k response has a 4xx status code
func (o *UpdateNetworkWirelessRfProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network wireless rf profile o k response has a 5xx status code
func (o *UpdateNetworkWirelessRfProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network wireless rf profile o k response a status code equal to that given
func (o *UpdateNetworkWirelessRfProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network wireless rf profile o k response
func (o *UpdateNetworkWirelessRfProfileOK) Code() int {
	return 200
}

func (o *UpdateNetworkWirelessRfProfileOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/rfProfiles/{rfProfileId}][%d] updateNetworkWirelessRfProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkWirelessRfProfileOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/rfProfiles/{rfProfileId}][%d] updateNetworkWirelessRfProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkWirelessRfProfileOK) GetPayload() *UpdateNetworkWirelessRfProfileOKBody {
	return o.Payload
}

func (o *UpdateNetworkWirelessRfProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkWirelessRfProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkWirelessRfProfileBody update network wireless rf profile body
// Example: {"apBandSettings":{"bandOperationMode":"dual","bandSteeringEnabled":true},"bandSelectionType":"ap","clientBalancingEnabled":true,"fiveGhzSettings":{"channelWidth":"auto","maxPower":30,"minBitrate":12,"minPower":8,"rxsop":-95,"validAutoChannels":[36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,149,153,157,161,165]},"minBitrateType":"band","name":"1234","perSsidSettings":{"0":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"1":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"10":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"11":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"12":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"13":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"14":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"2":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"3":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"4":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"5":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"6":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"7":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"8":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"9":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11}},"transmission":{"enabled":true},"twoFourGhzSettings":{"axEnabled":true,"maxPower":30,"minBitrate":11,"minPower":5,"rxsop":-95,"validAutoChannels":[1,6,11]}}
swagger:model UpdateNetworkWirelessRfProfileBody
*/
type UpdateNetworkWirelessRfProfileBody struct {

	// ap band settings
	ApBandSettings *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings `json:"apBandSettings,omitempty"`

	// Band selection can be set to either 'ssid' or 'ap'.
	// Enum: [ap ssid]
	BandSelectionType string `json:"bandSelectionType,omitempty"`

	// Steers client to best available access point. Can be either true or false.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// Minimum bitrate can be set to either 'band' or 'ssid'.
	// Enum: [band ssid]
	MinBitrateType string `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique.
	Name string `json:"name,omitempty"`

	// per ssid settings
	PerSsidSettings *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// transmission
	Transmission *UpdateNetworkWirelessRfProfileParamsBodyTransmission `json:"transmission,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network wireless rf profile body
func (o *UpdateNetworkWirelessRfProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBandSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMinBitrateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransmission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateApBandSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.ApBandSettings) { // not required
		return nil
	}

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

var updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ssid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum = append(updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileBodyBandSelectionTypeAp captures enum value "ap"
	UpdateNetworkWirelessRfProfileBodyBandSelectionTypeAp string = "ap"

	// UpdateNetworkWirelessRfProfileBodyBandSelectionTypeSsid captures enum value "ssid"
	UpdateNetworkWirelessRfProfileBodyBandSelectionTypeSsid string = "ssid"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileBody) validateBandSelectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateBandSelectionType(formats strfmt.Registry) error {
	if swag.IsZero(o.BandSelectionType) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandSelectionTypeEnum("updateNetworkWirelessRfProfile"+"."+"bandSelectionType", "body", o.BandSelectionType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

var updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["band","ssid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum = append(updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileBodyMinBitrateTypeBand captures enum value "band"
	UpdateNetworkWirelessRfProfileBodyMinBitrateTypeBand string = "band"

	// UpdateNetworkWirelessRfProfileBodyMinBitrateTypeSsid captures enum value "ssid"
	UpdateNetworkWirelessRfProfileBodyMinBitrateTypeSsid string = "ssid"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileBody) validateMinBitrateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateMinBitrateType(formats strfmt.Registry) error {
	if swag.IsZero(o.MinBitrateType) { // not required
		return nil
	}

	// value enum
	if err := o.validateMinBitrateTypeEnum("updateNetworkWirelessRfProfile"+"."+"minBitrateType", "body", o.MinBitrateType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateTransmission(formats strfmt.Registry) error {
	if swag.IsZero(o.Transmission) { // not required
		return nil
	}

	if o.Transmission != nil {
		if err := o.Transmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile body based on the context it is used
func (o *UpdateNetworkWirelessRfProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApBandSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTransmission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateApBandSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateTransmission(ctx context.Context, formats strfmt.Registry) error {

	if o.Transmission != nil {
		if err := o.Transmission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBody update network wireless rf profile o k body
swagger:model UpdateNetworkWirelessRfProfileOKBody
*/
type UpdateNetworkWirelessRfProfileOKBody struct {

	// ap band settings
	ApBandSettings *UpdateNetworkWirelessRfProfileOKBodyApBandSettings `json:"apBandSettings,omitempty"`

	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType string `json:"bandSelectionType,omitempty"`

	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// The name of the new profile. Must be unique.
	ID string `json:"id,omitempty"`

	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType string `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique. This param is required on creation.
	Name string `json:"name,omitempty"`

	// The network ID of the RF Profile
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// transmission
	Transmission *UpdateNetworkWirelessRfProfileOKBodyTransmission `json:"transmission,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network wireless rf profile o k body
func (o *UpdateNetworkWirelessRfProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransmission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) validateApBandSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.ApBandSettings) { // not required
		return nil
	}

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) validateTransmission(formats strfmt.Registry) error {
	if swag.IsZero(o.Transmission) { // not required
		return nil
	}

	if o.Transmission != nil {
		if err := o.Transmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile o k body based on the context it is used
func (o *UpdateNetworkWirelessRfProfileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApBandSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTransmission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) contextValidateApBandSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) contextValidateTransmission(ctx context.Context, formats strfmt.Registry) error {

	if o.Transmission != nil {
		if err := o.Transmission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyApBandSettings Settings that will be enabled if selectionType is set to 'ap'.
swagger:model UpdateNetworkWirelessRfProfileOKBodyApBandSettings
*/
type UpdateNetworkWirelessRfProfileOKBodyApBandSettings struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network wireless rf profile o k body ap band settings
func (o *UpdateNetworkWirelessRfProfileOKBodyApBandSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile o k body ap band settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyApBandSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyApBandSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyApBandSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyApBandSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings
*/
type UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings struct {

	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile o k body five ghz settings
func (o *UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile o k body five ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings struct {

	// 0
	Nr0 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9 `json:"9,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile o k body per ssid settings based on the context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfileOK" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0 Settings for SSID 0
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr0
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"0"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr0 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr1
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr1 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10 Settings for SSID 10
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr10
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"10"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr10 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11 Settings for SSID 11
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr11
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"11"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr11 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12 Settings for SSID 12
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr12
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"12"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr12 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13 Settings for SSID 13
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr13
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"13"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr13 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14 Settings for SSID 14
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr14
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"14"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr14 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr2
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr2 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr3
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr3 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr4
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr4 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5 Settings for SSID 5
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr5
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"5"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr5 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6 Settings for SSID 6
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr6
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"6"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr6 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7 Settings for SSID 7
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr7
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"7"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr7 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8 Settings for SSID 8
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr8
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"8"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr8 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9 Settings for SSID 9
swagger:model UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9
*/
type UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless rf profile o k body per ssid settings nr9
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfileOK"+"."+"perSsidSettings"+"."+"9"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile o k body per ssid settings nr9 based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyPerSsidSettingsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyTransmission Settings related to radio transmission.
swagger:model UpdateNetworkWirelessRfProfileOKBodyTransmission
*/
type UpdateNetworkWirelessRfProfileOKBodyTransmission struct {

	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this update network wireless rf profile o k body transmission
func (o *UpdateNetworkWirelessRfProfileOKBodyTransmission) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile o k body transmission based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyTransmission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyTransmission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyTransmission) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyTransmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings
*/
type UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate float32 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile o k body two four ghz settings
func (o *UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile o k body two four ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileOKBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyApBandSettings Settings that will be enabled if selectionType is set to 'ap'.
swagger:model UpdateNetworkWirelessRfProfileParamsBodyApBandSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyApBandSettings struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network wireless rf profile params body ap band settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"apBandSettings"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body ap band settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyApBandSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings struct {

	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile params body five ghz settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile params body five ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings struct {

	// 0
	Nr0 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 `json:"9,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile params body per ssid settings based on the context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 Settings for SSID 0
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr0
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"0"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr0 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr1
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr1 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 Settings for SSID 10
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr10
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"10"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr10 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 Settings for SSID 11
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr11
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"11"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr11 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 Settings for SSID 12
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr12
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"12"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr12 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 Settings for SSID 13
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr13
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"13"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr13 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 Settings for SSID 14
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr14
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"14"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr14 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr2
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr2 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr3
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr3 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr4
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr4 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 Settings for SSID 5
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr5
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"5"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr5 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 Settings for SSID 6
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr6
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"6"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr6 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 Settings for SSID 7
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr7
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"7"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr7 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 Settings for SSID 8
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr8
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"8"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr8 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 Settings for SSID 9
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr9
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz string = "5ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual string = "dual"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"9"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr9 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyTransmission Settings related to radio transmission.
swagger:model UpdateNetworkWirelessRfProfileParamsBodyTransmission
*/
type UpdateNetworkWirelessRfProfileParamsBodyTransmission struct {

	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this update network wireless rf profile params body transmission
func (o *UpdateNetworkWirelessRfProfileParamsBodyTransmission) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile params body transmission based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyTransmission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTransmission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTransmission) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyTransmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile params body two four ghz settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile params body two four ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
