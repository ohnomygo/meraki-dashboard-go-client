// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetOrganizationWirelessDevicesEthernetStatusesReader is a Reader for the GetOrganizationWirelessDevicesEthernetStatuses structure.
type GetOrganizationWirelessDevicesEthernetStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationWirelessDevicesEthernetStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationWirelessDevicesEthernetStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationWirelessDevicesEthernetStatusesOK creates a GetOrganizationWirelessDevicesEthernetStatusesOK with default headers values
func NewGetOrganizationWirelessDevicesEthernetStatusesOK() *GetOrganizationWirelessDevicesEthernetStatusesOK {
	return &GetOrganizationWirelessDevicesEthernetStatusesOK{}
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationWirelessDevicesEthernetStatusesOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0
}

// IsSuccess returns true when this get organization wireless devices ethernet statuses o k response has a 2xx status code
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization wireless devices ethernet statuses o k response has a 3xx status code
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization wireless devices ethernet statuses o k response has a 4xx status code
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization wireless devices ethernet statuses o k response has a 5xx status code
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization wireless devices ethernet statuses o k response a status code equal to that given
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization wireless devices ethernet statuses o k response
func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) Code() int {
	return 200
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/wireless/devices/ethernet/statuses][%d] getOrganizationWirelessDevicesEthernetStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/wireless/devices/ethernet/statuses][%d] getOrganizationWirelessDevicesEthernetStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) GetPayload() []*GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0 get organization wireless devices ethernet statuses o k body items0
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0 struct {

	// aggregation
	Aggregation *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation `json:"aggregation,omitempty"`

	// The name of the AP
	Name string `json:"name,omitempty"`

	// network
	Network *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network `json:"network,omitempty"`

	// List of port details
	Ports []*GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0 `json:"ports"`

	// power
	Power *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power `json:"power,omitempty"`

	// The serial number of the AP
	Serial string `json:"serial,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAggregation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) validateAggregation(formats strfmt.Registry) error {
	if swag.IsZero(o.Aggregation) { // not required
		return nil
	}

	if o.Aggregation != nil {
		if err := o.Aggregation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregation")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.Network) { // not required
		return nil
	}

	if o.Network != nil {
		if err := o.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(o.Ports) { // not required
		return nil
	}

	for i := 0; i < len(o.Ports); i++ {
		if swag.IsZero(o.Ports[i]) { // not required
			continue
		}

		if o.Ports[i] != nil {
			if err := o.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) validatePower(formats strfmt.Registry) error {
	if swag.IsZero(o.Power) { // not required
		return nil
	}

	if o.Power != nil {
		if err := o.Power.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization wireless devices ethernet statuses o k body items0 based on the context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAggregation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) contextValidateAggregation(ctx context.Context, formats strfmt.Registry) error {

	if o.Aggregation != nil {
		if err := o.Aggregation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregation")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.Network != nil {
		if err := o.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Ports); i++ {

		if o.Ports[i] != nil {
			if err := o.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) contextValidatePower(ctx context.Context, formats strfmt.Registry) error {

	if o.Power != nil {
		if err := o.Power.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation Aggregation details object
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation struct {

	// Link Aggregation enabled flag
	Enabled bool `json:"enabled,omitempty"`

	// Link Aggregation speed
	Speed int64 `json:"speed,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 aggregation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 aggregation based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Aggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network Network details object
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network struct {

	// The network ID the AP is associated to
	ID string `json:"id,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 network
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 network based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Network
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0 get organization wireless devices ethernet statuses o k body items0 ports items0
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0 struct {

	// link negotiation
	LinkNegotiation *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation `json:"linkNegotiation,omitempty"`

	// Label of the port
	Name string `json:"name,omitempty"`

	// poe
	Poe *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe `json:"poe,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 ports items0
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinkNegotiation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePoe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) validateLinkNegotiation(formats strfmt.Registry) error {
	if swag.IsZero(o.LinkNegotiation) { // not required
		return nil
	}

	if o.LinkNegotiation != nil {
		if err := o.LinkNegotiation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkNegotiation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkNegotiation")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) validatePoe(formats strfmt.Registry) error {
	if swag.IsZero(o.Poe) { // not required
		return nil
	}

	if o.Poe != nil {
		if err := o.Poe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization wireless devices ethernet statuses o k body items0 ports items0 based on the context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLinkNegotiation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePoe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) contextValidateLinkNegotiation(ctx context.Context, formats strfmt.Registry) error {

	if o.LinkNegotiation != nil {
		if err := o.LinkNegotiation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkNegotiation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("linkNegotiation")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) contextValidatePoe(ctx context.Context, formats strfmt.Registry) error {

	if o.Poe != nil {
		if err := o.Poe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poe")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation Link negotiation details object for the port
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation struct {

	// The duplex mode of the port. Can be 'full' or 'half'
	Duplex string `json:"duplex,omitempty"`

	// The speed of the port
	Speed int64 `json:"speed,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 ports items0 link negotiation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 ports items0 link negotiation based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0LinkNegotiation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe PoE details object for the port
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe struct {

	// The PoE Standard for the port. Can be '802.3at', '802.3af', '802.3bt', or null
	Standard string `json:"standard,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 ports items0 poe
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 ports items0 poe based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PortsItems0Poe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power Power details object
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power struct {

	// ac
	Ac *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc `json:"ac,omitempty"`

	// The PoE power mode for the AP. Can be 'full' or 'low'
	Mode string `json:"mode,omitempty"`

	// poe
	Poe *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe `json:"poe,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 power
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePoe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) validateAc(formats strfmt.Registry) error {
	if swag.IsZero(o.Ac) { // not required
		return nil
	}

	if o.Ac != nil {
		if err := o.Ac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "ac")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "ac")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) validatePoe(formats strfmt.Registry) error {
	if swag.IsZero(o.Poe) { // not required
		return nil
	}

	if o.Poe != nil {
		if err := o.Poe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "poe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "poe")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization wireless devices ethernet statuses o k body items0 power based on the context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePoe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) contextValidateAc(ctx context.Context, formats strfmt.Registry) error {

	if o.Ac != nil {
		if err := o.Ac.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "ac")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "ac")
			}
			return err
		}
	}

	return nil
}

func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) contextValidatePoe(ctx context.Context, formats strfmt.Registry) error {

	if o.Poe != nil {
		if err := o.Poe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power" + "." + "poe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("power" + "." + "poe")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0Power
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc AC power details object
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc struct {

	// AC power connected
	IsConnected bool `json:"isConnected,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 power ac
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 power ac based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerAc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe PoE power details object
swagger:model GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe
*/
type GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe struct {

	// PoE power connected
	IsConnected bool `json:"isConnected,omitempty"`
}

// Validate validates this get organization wireless devices ethernet statuses o k body items0 power poe
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization wireless devices ethernet statuses o k body items0 power poe based on context it is used
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe) UnmarshalBinary(b []byte) error {
	var res GetOrganizationWirelessDevicesEthernetStatusesOKBodyItems0PowerPoe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
