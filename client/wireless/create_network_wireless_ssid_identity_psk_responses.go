// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkWirelessSsidIdentityPskReader is a Reader for the CreateNetworkWirelessSsidIdentityPsk structure.
type CreateNetworkWirelessSsidIdentityPskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkWirelessSsidIdentityPskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkWirelessSsidIdentityPskCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkWirelessSsidIdentityPskCreated creates a CreateNetworkWirelessSsidIdentityPskCreated with default headers values
func NewCreateNetworkWirelessSsidIdentityPskCreated() *CreateNetworkWirelessSsidIdentityPskCreated {
	return &CreateNetworkWirelessSsidIdentityPskCreated{}
}

/*
CreateNetworkWirelessSsidIdentityPskCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkWirelessSsidIdentityPskCreated struct {
	Payload interface{}
}

// IsSuccess returns true when this create network wireless ssid identity psk created response has a 2xx status code
func (o *CreateNetworkWirelessSsidIdentityPskCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network wireless ssid identity psk created response has a 3xx status code
func (o *CreateNetworkWirelessSsidIdentityPskCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network wireless ssid identity psk created response has a 4xx status code
func (o *CreateNetworkWirelessSsidIdentityPskCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network wireless ssid identity psk created response has a 5xx status code
func (o *CreateNetworkWirelessSsidIdentityPskCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create network wireless ssid identity psk created response a status code equal to that given
func (o *CreateNetworkWirelessSsidIdentityPskCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create network wireless ssid identity psk created response
func (o *CreateNetworkWirelessSsidIdentityPskCreated) Code() int {
	return 201
}

func (o *CreateNetworkWirelessSsidIdentityPskCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/wireless/ssids/{number}/identityPsks][%d] createNetworkWirelessSsidIdentityPskCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkWirelessSsidIdentityPskCreated) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/wireless/ssids/{number}/identityPsks][%d] createNetworkWirelessSsidIdentityPskCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkWirelessSsidIdentityPskCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateNetworkWirelessSsidIdentityPskCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateNetworkWirelessSsidIdentityPskBody create network wireless ssid identity psk body
// Example: {"expiresAt":"2018-02-11T00:00:00.090210Z","groupPolicyId":"101","id":"1284392014819","name":"Sample Identity PSK","passphrase":"secret"}
swagger:model CreateNetworkWirelessSsidIdentityPskBody
*/
type CreateNetworkWirelessSsidIdentityPskBody struct {

	// Timestamp for when the Identity PSK expires. Will not expire if left blank.
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// The group policy to be applied to clients
	// Required: true
	GroupPolicyID *string `json:"groupPolicyId"`

	// The name of the Identity PSK
	// Required: true
	Name *string `json:"name"`

	// The passphrase for client authentication. If left blank, one will be auto-generated.
	Passphrase string `json:"passphrase,omitempty"`
}

// Validate validates this create network wireless ssid identity psk body
func (o *CreateNetworkWirelessSsidIdentityPskBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroupPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessSsidIdentityPskBody) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(o.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createNetworkWirelessSsidIdentityPsk"+"."+"expiresAt", "body", "date-time", o.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkWirelessSsidIdentityPskBody) validateGroupPolicyID(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkWirelessSsidIdentityPsk"+"."+"groupPolicyId", "body", o.GroupPolicyID); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkWirelessSsidIdentityPskBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkWirelessSsidIdentityPsk"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless ssid identity psk body based on context it is used
func (o *CreateNetworkWirelessSsidIdentityPskBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessSsidIdentityPskBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessSsidIdentityPskBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessSsidIdentityPskBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
