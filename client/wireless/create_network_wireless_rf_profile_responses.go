// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkWirelessRfProfileReader is a Reader for the CreateNetworkWirelessRfProfile structure.
type CreateNetworkWirelessRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkWirelessRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkWirelessRfProfileCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkWirelessRfProfileCreated creates a CreateNetworkWirelessRfProfileCreated with default headers values
func NewCreateNetworkWirelessRfProfileCreated() *CreateNetworkWirelessRfProfileCreated {
	return &CreateNetworkWirelessRfProfileCreated{}
}

/*
CreateNetworkWirelessRfProfileCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkWirelessRfProfileCreated struct {
	Payload *CreateNetworkWirelessRfProfileCreatedBody
}

// IsSuccess returns true when this create network wireless rf profile created response has a 2xx status code
func (o *CreateNetworkWirelessRfProfileCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create network wireless rf profile created response has a 3xx status code
func (o *CreateNetworkWirelessRfProfileCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create network wireless rf profile created response has a 4xx status code
func (o *CreateNetworkWirelessRfProfileCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create network wireless rf profile created response has a 5xx status code
func (o *CreateNetworkWirelessRfProfileCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create network wireless rf profile created response a status code equal to that given
func (o *CreateNetworkWirelessRfProfileCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create network wireless rf profile created response
func (o *CreateNetworkWirelessRfProfileCreated) Code() int {
	return 201
}

func (o *CreateNetworkWirelessRfProfileCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/wireless/rfProfiles][%d] createNetworkWirelessRfProfileCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkWirelessRfProfileCreated) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/wireless/rfProfiles][%d] createNetworkWirelessRfProfileCreated  %+v", 201, o.Payload)
}

func (o *CreateNetworkWirelessRfProfileCreated) GetPayload() *CreateNetworkWirelessRfProfileCreatedBody {
	return o.Payload
}

func (o *CreateNetworkWirelessRfProfileCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateNetworkWirelessRfProfileCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateNetworkWirelessRfProfileBody create network wireless rf profile body
// Example: {"apBandSettings":{"bandOperationMode":"dual","bandSteeringEnabled":true},"bandSelectionType":"ap","clientBalancingEnabled":true,"fiveGhzSettings":{"channelWidth":"auto","maxPower":30,"minBitrate":12,"minPower":8,"rxsop":-95,"validAutoChannels":[36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,149,153,157,161,165]},"minBitrateType":"band","name":"Main Office","perSsidSettings":{"0":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"1":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"10":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"11":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"12":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"13":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"14":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"2":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"3":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"4":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"5":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"6":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"7":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"8":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11},"9":{"bandOperationMode":"dual","bandSteeringEnabled":true,"minBitrate":11}},"transmission":{"enabled":true},"twoFourGhzSettings":{"axEnabled":true,"maxPower":30,"minBitrate":11,"minPower":5,"rxsop":-95,"validAutoChannels":[1,6,11]}}
swagger:model CreateNetworkWirelessRfProfileBody
*/
type CreateNetworkWirelessRfProfileBody struct {

	// ap band settings
	ApBandSettings *CreateNetworkWirelessRfProfileParamsBodyApBandSettings `json:"apBandSettings,omitempty"`

	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	// Required: true
	// Enum: [ap ssid]
	BandSelectionType *string `json:"bandSelectionType"`

	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	// Enum: [band ssid]
	MinBitrateType string `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique. This param is required on creation.
	// Required: true
	Name *string `json:"name"`

	// per ssid settings
	PerSsidSettings *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// transmission
	Transmission *CreateNetworkWirelessRfProfileParamsBodyTransmission `json:"transmission,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this create network wireless rf profile body
func (o *CreateNetworkWirelessRfProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBandSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMinBitrateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransmission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateApBandSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.ApBandSettings) { // not required
		return nil
	}

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

var createNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ap","ssid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum = append(createNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileBodyBandSelectionTypeAp captures enum value "ap"
	CreateNetworkWirelessRfProfileBodyBandSelectionTypeAp string = "ap"

	// CreateNetworkWirelessRfProfileBodyBandSelectionTypeSsid captures enum value "ssid"
	CreateNetworkWirelessRfProfileBodyBandSelectionTypeSsid string = "ssid"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileBody) validateBandSelectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateBandSelectionType(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkWirelessRfProfile"+"."+"bandSelectionType", "body", o.BandSelectionType); err != nil {
		return err
	}

	// value enum
	if err := o.validateBandSelectionTypeEnum("createNetworkWirelessRfProfile"+"."+"bandSelectionType", "body", *o.BandSelectionType); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

var createNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["band","ssid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum = append(createNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileBodyMinBitrateTypeBand captures enum value "band"
	CreateNetworkWirelessRfProfileBodyMinBitrateTypeBand string = "band"

	// CreateNetworkWirelessRfProfileBodyMinBitrateTypeSsid captures enum value "ssid"
	CreateNetworkWirelessRfProfileBodyMinBitrateTypeSsid string = "ssid"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileBody) validateMinBitrateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateMinBitrateType(formats strfmt.Registry) error {
	if swag.IsZero(o.MinBitrateType) { // not required
		return nil
	}

	// value enum
	if err := o.validateMinBitrateTypeEnum("createNetworkWirelessRfProfile"+"."+"minBitrateType", "body", o.MinBitrateType); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkWirelessRfProfile"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateTransmission(formats strfmt.Registry) error {
	if swag.IsZero(o.Transmission) { // not required
		return nil
	}

	if o.Transmission != nil {
		if err := o.Transmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network wireless rf profile body based on the context it is used
func (o *CreateNetworkWirelessRfProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApBandSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTransmission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) contextValidateApBandSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) contextValidateTransmission(ctx context.Context, formats strfmt.Registry) error {

	if o.Transmission != nil {
		if err := o.Transmission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBody create network wireless rf profile created body
swagger:model CreateNetworkWirelessRfProfileCreatedBody
*/
type CreateNetworkWirelessRfProfileCreatedBody struct {

	// ap band settings
	ApBandSettings *CreateNetworkWirelessRfProfileCreatedBodyApBandSettings `json:"apBandSettings,omitempty"`

	// Band selection can be set to either 'ssid' or 'ap'. This param is required on creation.
	BandSelectionType string `json:"bandSelectionType,omitempty"`

	// Steers client to best available access point. Can be either true or false. Defaults to true.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// The name of the new profile. Must be unique.
	ID string `json:"id,omitempty"`

	// Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band.
	MinBitrateType string `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique. This param is required on creation.
	Name string `json:"name,omitempty"`

	// The network ID of the RF Profile
	NetworkID string `json:"networkId,omitempty"`

	// per ssid settings
	PerSsidSettings *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// transmission
	Transmission *CreateNetworkWirelessRfProfileCreatedBodyTransmission `json:"transmission,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this create network wireless rf profile created body
func (o *CreateNetworkWirelessRfProfileCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransmission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) validateApBandSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.ApBandSettings) { // not required
		return nil
	}

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) validateTransmission(formats strfmt.Registry) error {
	if swag.IsZero(o.Transmission) { // not required
		return nil
	}

	if o.Transmission != nil {
		if err := o.Transmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network wireless rf profile created body based on the context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApBandSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTransmission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) contextValidateApBandSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) contextValidateTransmission(ctx context.Context, formats strfmt.Registry) error {

	if o.Transmission != nil {
		if err := o.Transmission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "transmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "transmission")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyApBandSettings Settings that will be enabled if selectionType is set to 'ap'.
swagger:model CreateNetworkWirelessRfProfileCreatedBodyApBandSettings
*/
type CreateNetworkWirelessRfProfileCreatedBodyApBandSettings struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network wireless rf profile created body ap band settings
func (o *CreateNetworkWirelessRfProfileCreatedBodyApBandSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile created body ap band settings based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyApBandSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyApBandSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyApBandSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyApBandSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings
*/
type CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings struct {

	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this create network wireless rf profile created body five ghz settings
func (o *CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile created body five ghz settings based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings struct {

	// 0
	Nr0 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9 `json:"9,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network wireless rf profile created body per ssid settings based on the context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfileCreated" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0 Settings for SSID 0
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr0
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"0"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr0 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr1
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr1 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10 Settings for SSID 10
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr10
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"10"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr10 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11 Settings for SSID 11
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr11
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"11"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr11 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12 Settings for SSID 12
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr12
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"12"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr12 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13 Settings for SSID 13
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr13
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"13"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr13 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14 Settings for SSID 14
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr14
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"14"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr14 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr2
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr2 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr3
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr3 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr4
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr4 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5 Settings for SSID 5
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr5
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"5"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr5 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6 Settings for SSID 6
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr6
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"6"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr6 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7 Settings for SSID 7
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr7
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"7"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr7 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8 Settings for SSID 8
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr8
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"8"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr8 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9 Settings for SSID 9
swagger:model CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9
*/
type CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Name of SSID
	Name string `json:"name,omitempty"`
}

// Validate validates this create network wireless rf profile created body per ssid settings nr9
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfileCreated"+"."+"perSsidSettings"+"."+"9"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile created body per ssid settings nr9 based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyPerSsidSettingsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyTransmission Settings related to radio transmission.
swagger:model CreateNetworkWirelessRfProfileCreatedBodyTransmission
*/
type CreateNetworkWirelessRfProfileCreatedBodyTransmission struct {

	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this create network wireless rf profile created body transmission
func (o *CreateNetworkWirelessRfProfileCreatedBodyTransmission) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile created body transmission based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyTransmission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyTransmission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyTransmission) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyTransmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings
*/
type CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate float32 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this create network wireless rf profile created body two four ghz settings
func (o *CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile created body two four ghz settings based on context it is used
func (o *CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileCreatedBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyApBandSettings Settings that will be enabled if selectionType is set to 'ap'.
swagger:model CreateNetworkWirelessRfProfileParamsBodyApBandSettings
*/
type CreateNetworkWirelessRfProfileParamsBodyApBandSettings struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band. Can be either true or false. Defaults to true.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this create network wireless rf profile params body ap band settings
func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"apBandSettings"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body ap band settings based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyApBandSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyApBandSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
*/
type CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings struct {

	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto.
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this create network wireless rf profile params body five ghz settings
func (o *CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile params body five ghz settings based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings struct {

	// 0
	Nr0 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 `json:"9,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network wireless rf profile params body per ssid settings based on the context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 Settings for SSID 0
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr0
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"0"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr0 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr1
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr1 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 Settings for SSID 10
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr10
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"10"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr10 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 Settings for SSID 11
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr11
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"11"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr11 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 Settings for SSID 12
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr12
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"12"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr12 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 Settings for SSID 13
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr13
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"13"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr13 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 Settings for SSID 14
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr14
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"14"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr14 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr2
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr2 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr3
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr3 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr4
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr4 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 Settings for SSID 5
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr5
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"5"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr5 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 Settings for SSID 6
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr6
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"6"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr6 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 Settings for SSID 7
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr7
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"7"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr7 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 Settings for SSID 8
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr8
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"8"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr8 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 Settings for SSID 9
swagger:model CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
*/
type CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [2.4ghz 5ghz dual]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this create network wireless rf profile params body per ssid settings nr9
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.4ghz","5ghz","dual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum = append(createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, v)
	}
}

const (

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz captures enum value "5ghz"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz string = "5ghz"

	// CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual captures enum value "dual"
	CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual string = "dual"
)

// prop value enum
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("createNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"9"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network wireless rf profile params body per ssid settings nr9 based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyTransmission Settings related to radio transmission.
swagger:model CreateNetworkWirelessRfProfileParamsBodyTransmission
*/
type CreateNetworkWirelessRfProfileParamsBodyTransmission struct {

	// Toggle for radio transmission. When false, radios will not transmit at all.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this create network wireless rf profile params body transmission
func (o *CreateNetworkWirelessRfProfileParamsBodyTransmission) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile params body transmission based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyTransmission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyTransmission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyTransmission) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyTransmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
*/
type CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11.
	MinBitrate float32 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11].
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this create network wireless rf profile params body two four ghz settings
func (o *CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network wireless rf profile params body two four ghz settings based on context it is used
func (o *CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res CreateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
