// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSmDevicePerformanceHistoryReader is a Reader for the GetNetworkSmDevicePerformanceHistory structure.
type GetNetworkSmDevicePerformanceHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSmDevicePerformanceHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSmDevicePerformanceHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSmDevicePerformanceHistoryOK creates a GetNetworkSmDevicePerformanceHistoryOK with default headers values
func NewGetNetworkSmDevicePerformanceHistoryOK() *GetNetworkSmDevicePerformanceHistoryOK {
	return &GetNetworkSmDevicePerformanceHistoryOK{}
}

/*
GetNetworkSmDevicePerformanceHistoryOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSmDevicePerformanceHistoryOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSmDevicePerformanceHistoryOKBodyItems0
}

// IsSuccess returns true when this get network sm device performance history o k response has a 2xx status code
func (o *GetNetworkSmDevicePerformanceHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network sm device performance history o k response has a 3xx status code
func (o *GetNetworkSmDevicePerformanceHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network sm device performance history o k response has a 4xx status code
func (o *GetNetworkSmDevicePerformanceHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network sm device performance history o k response has a 5xx status code
func (o *GetNetworkSmDevicePerformanceHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network sm device performance history o k response a status code equal to that given
func (o *GetNetworkSmDevicePerformanceHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network sm device performance history o k response
func (o *GetNetworkSmDevicePerformanceHistoryOK) Code() int {
	return 200
}

func (o *GetNetworkSmDevicePerformanceHistoryOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices/{deviceId}/performanceHistory][%d] getNetworkSmDevicePerformanceHistoryOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDevicePerformanceHistoryOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices/{deviceId}/performanceHistory][%d] getNetworkSmDevicePerformanceHistoryOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDevicePerformanceHistoryOK) GetPayload() []*GetNetworkSmDevicePerformanceHistoryOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSmDevicePerformanceHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSmDevicePerformanceHistoryOKBodyItems0 get network sm device performance history o k body items0
swagger:model GetNetworkSmDevicePerformanceHistoryOKBodyItems0
*/
type GetNetworkSmDevicePerformanceHistoryOKBodyItems0 struct {

	// The percentage of CPU used as a decimal format.
	CPUPercentUsed float32 `json:"cpuPercentUsed,omitempty"`

	// disk usage
	DiskUsage *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage `json:"diskUsage,omitempty"`

	// The active RAM on the device.
	MemActive int64 `json:"memActive,omitempty"`

	// Memory that is not yet in use by the system.
	MemFree int64 `json:"memFree,omitempty"`

	// The inactive RAM on the device.
	MemInactive int64 `json:"memInactive,omitempty"`

	// Memory used for core OS functions on the device.
	MemWired int64 `json:"memWired,omitempty"`

	// Network bandwith received.
	NetworkReceived int64 `json:"networkReceived,omitempty"`

	// Network bandwith transmitted.
	NetworkSent int64 `json:"networkSent,omitempty"`

	// The amount of space being used on the startup disk to swap unused files to and from RAM.
	SwapUsed int64 `json:"swapUsed,omitempty"`

	// The time at which the performance was measured.
	Ts string `json:"ts,omitempty"`
}

// Validate validates this get network sm device performance history o k body items0
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDiskUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) validateDiskUsage(formats strfmt.Registry) error {
	if swag.IsZero(o.DiskUsage) { // not required
		return nil
	}

	if o.DiskUsage != nil {
		if err := o.DiskUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskUsage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sm device performance history o k body items0 based on the context it is used
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDiskUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) contextValidateDiskUsage(ctx context.Context, formats strfmt.Registry) error {

	if o.DiskUsage != nil {
		if err := o.DiskUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskUsage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskUsage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSmDevicePerformanceHistoryOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage An object containing disk usage details.
swagger:model GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage
*/
type GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage struct {

	// c
	C *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC `json:"c,omitempty"`
}

// Validate validates this get network sm device performance history o k body items0 disk usage
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateC(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) validateC(formats strfmt.Registry) error {
	if swag.IsZero(o.C) { // not required
		return nil
	}

	if o.C != nil {
		if err := o.C.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskUsage" + "." + "c")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskUsage" + "." + "c")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network sm device performance history o k body items0 disk usage based on the context it is used
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateC(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) contextValidateC(ctx context.Context, formats strfmt.Registry) error {

	if o.C != nil {
		if err := o.C.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diskUsage" + "." + "c")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diskUsage" + "." + "c")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage) UnmarshalBinary(b []byte) error {
	var res GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC An object containing current disk usage details.
swagger:model GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC
*/
type GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC struct {

	// The available disk space.
	Space int64 `json:"space,omitempty"`

	// The used disk space.
	Used int64 `json:"used,omitempty"`
}

// Validate validates this get network sm device performance history o k body items0 disk usage c
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sm device performance history o k body items0 disk usage c based on context it is used
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC) UnmarshalBinary(b []byte) error {
	var res GetNetworkSmDevicePerformanceHistoryOKBodyItems0DiskUsageC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
