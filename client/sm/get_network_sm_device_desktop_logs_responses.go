// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSmDeviceDesktopLogsReader is a Reader for the GetNetworkSmDeviceDesktopLogs structure.
type GetNetworkSmDeviceDesktopLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSmDeviceDesktopLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSmDeviceDesktopLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSmDeviceDesktopLogsOK creates a GetNetworkSmDeviceDesktopLogsOK with default headers values
func NewGetNetworkSmDeviceDesktopLogsOK() *GetNetworkSmDeviceDesktopLogsOK {
	return &GetNetworkSmDeviceDesktopLogsOK{}
}

/*
GetNetworkSmDeviceDesktopLogsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSmDeviceDesktopLogsOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSmDeviceDesktopLogsOKBodyItems0
}

// IsSuccess returns true when this get network sm device desktop logs o k response has a 2xx status code
func (o *GetNetworkSmDeviceDesktopLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network sm device desktop logs o k response has a 3xx status code
func (o *GetNetworkSmDeviceDesktopLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network sm device desktop logs o k response has a 4xx status code
func (o *GetNetworkSmDeviceDesktopLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network sm device desktop logs o k response has a 5xx status code
func (o *GetNetworkSmDeviceDesktopLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network sm device desktop logs o k response a status code equal to that given
func (o *GetNetworkSmDeviceDesktopLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network sm device desktop logs o k response
func (o *GetNetworkSmDeviceDesktopLogsOK) Code() int {
	return 200
}

func (o *GetNetworkSmDeviceDesktopLogsOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices/{deviceId}/desktopLogs][%d] getNetworkSmDeviceDesktopLogsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDeviceDesktopLogsOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices/{deviceId}/desktopLogs][%d] getNetworkSmDeviceDesktopLogsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDeviceDesktopLogsOK) GetPayload() []*GetNetworkSmDeviceDesktopLogsOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSmDeviceDesktopLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSmDeviceDesktopLogsOKBodyItems0 get network sm device desktop logs o k body items0
swagger:model GetNetworkSmDeviceDesktopLogsOKBodyItems0
*/
type GetNetworkSmDeviceDesktopLogsOKBodyItems0 struct {

	// The IP address of the DCHP Server.
	DhcpServer string `json:"dhcpServer,omitempty"`

	// The DNS Server during the connection.
	DNSServer string `json:"dnsServer,omitempty"`

	// The gateway IP the device was connected to.
	Gateway string `json:"gateway,omitempty"`

	// The IP of the device during connection.
	IP string `json:"ip,omitempty"`

	// The time the data was measured at.
	MeasuredAt string `json:"measuredAt,omitempty"`

	// The network device for the device used for connection.
	NetworkDevice string `json:"networkDevice,omitempty"`

	// The network driver for the device.
	NetworkDriver string `json:"networkDriver,omitempty"`

	// The network max transmission unit.
	NetworkMTU string `json:"networkMTU,omitempty"`

	// The public IP address of the device.
	PublicIP string `json:"publicIP,omitempty"`

	// The subnet of the device connection.
	Subnet string `json:"subnet,omitempty"`

	// The time the connection was logged.
	Ts string `json:"ts,omitempty"`

	// The user during connection.
	User string `json:"user,omitempty"`

	// The type of authentication used by the SSID.
	WifiAuth string `json:"wifiAuth,omitempty"`

	// The MAC of the access point the device is connected to.
	WifiBssid string `json:"wifiBssid,omitempty"`

	// Channel through which the connection is routing.
	WifiChannel string `json:"wifiChannel,omitempty"`

	// The wireless signal power level received by the device.
	WifiNoise string `json:"wifiNoise,omitempty"`

	// The Received Signal Strength Indicator for the device.
	WifiRssi string `json:"wifiRssi,omitempty"`

	// The name of the network the device is connected to.
	WifiSsid string `json:"wifiSsid,omitempty"`
}

// Validate validates this get network sm device desktop logs o k body items0
func (o *GetNetworkSmDeviceDesktopLogsOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sm device desktop logs o k body items0 based on context it is used
func (o *GetNetworkSmDeviceDesktopLogsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSmDeviceDesktopLogsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSmDeviceDesktopLogsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSmDeviceDesktopLogsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
