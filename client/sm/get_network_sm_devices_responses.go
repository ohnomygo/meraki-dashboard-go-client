// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSmDevicesReader is a Reader for the GetNetworkSmDevices structure.
type GetNetworkSmDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSmDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSmDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSmDevicesOK creates a GetNetworkSmDevicesOK with default headers values
func NewGetNetworkSmDevicesOK() *GetNetworkSmDevicesOK {
	return &GetNetworkSmDevicesOK{}
}

/*
GetNetworkSmDevicesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSmDevicesOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSmDevicesOKBodyItems0
}

// IsSuccess returns true when this get network sm devices o k response has a 2xx status code
func (o *GetNetworkSmDevicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network sm devices o k response has a 3xx status code
func (o *GetNetworkSmDevicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network sm devices o k response has a 4xx status code
func (o *GetNetworkSmDevicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network sm devices o k response has a 5xx status code
func (o *GetNetworkSmDevicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network sm devices o k response a status code equal to that given
func (o *GetNetworkSmDevicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network sm devices o k response
func (o *GetNetworkSmDevicesOK) Code() int {
	return 200
}

func (o *GetNetworkSmDevicesOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices][%d] getNetworkSmDevicesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDevicesOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/sm/devices][%d] getNetworkSmDevicesOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSmDevicesOK) GetPayload() []*GetNetworkSmDevicesOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSmDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSmDevicesOKBodyItems0 get network sm devices o k body items0
swagger:model GetNetworkSmDevicesOKBodyItems0
*/
type GetNetworkSmDevicesOKBodyItems0 struct {

	// The Meraki Id of the device record.
	ID string `json:"id,omitempty"`

	// The IP address of the device.
	IP string `json:"ip,omitempty"`

	// The name of the device.
	Name string `json:"name,omitempty"`

	// Notes associated with the device.
	Notes string `json:"notes,omitempty"`

	// The name of the device OS.
	OsName string `json:"osName,omitempty"`

	// The device serial.
	Serial string `json:"serial,omitempty"`

	// The device serial number.
	SerialNumber string `json:"serialNumber,omitempty"`

	// The name of the SSID the device was last connected to.
	Ssid string `json:"ssid,omitempty"`

	// The device model.
	SystemModel string `json:"systemModel,omitempty"`

	// An array of tags associated with the device.
	Tags []string `json:"tags"`

	// The UUID of the device.
	UUID string `json:"uuid,omitempty"`

	// The MAC of the device.
	WifiMac string `json:"wifiMac,omitempty"`
}

// Validate validates this get network sm devices o k body items0
func (o *GetNetworkSmDevicesOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network sm devices o k body items0 based on context it is used
func (o *GetNetworkSmDevicesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSmDevicesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSmDevicesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSmDevicesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
