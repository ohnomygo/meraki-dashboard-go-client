// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckinNetworkSmDevicesReader is a Reader for the CheckinNetworkSmDevices structure.
type CheckinNetworkSmDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckinNetworkSmDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckinNetworkSmDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCheckinNetworkSmDevicesOK creates a CheckinNetworkSmDevicesOK with default headers values
func NewCheckinNetworkSmDevicesOK() *CheckinNetworkSmDevicesOK {
	return &CheckinNetworkSmDevicesOK{}
}

/*
CheckinNetworkSmDevicesOK describes a response with status code 200, with default header values.

Successful operation
*/
type CheckinNetworkSmDevicesOK struct {
	Payload *CheckinNetworkSmDevicesOKBody
}

// IsSuccess returns true when this checkin network sm devices o k response has a 2xx status code
func (o *CheckinNetworkSmDevicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this checkin network sm devices o k response has a 3xx status code
func (o *CheckinNetworkSmDevicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this checkin network sm devices o k response has a 4xx status code
func (o *CheckinNetworkSmDevicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this checkin network sm devices o k response has a 5xx status code
func (o *CheckinNetworkSmDevicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this checkin network sm devices o k response a status code equal to that given
func (o *CheckinNetworkSmDevicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the checkin network sm devices o k response
func (o *CheckinNetworkSmDevicesOK) Code() int {
	return 200
}

func (o *CheckinNetworkSmDevicesOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sm/devices/checkin][%d] checkinNetworkSmDevicesOK  %+v", 200, o.Payload)
}

func (o *CheckinNetworkSmDevicesOK) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sm/devices/checkin][%d] checkinNetworkSmDevicesOK  %+v", 200, o.Payload)
}

func (o *CheckinNetworkSmDevicesOK) GetPayload() *CheckinNetworkSmDevicesOKBody {
	return o.Payload
}

func (o *CheckinNetworkSmDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckinNetworkSmDevicesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CheckinNetworkSmDevicesBody checkin network sm devices body
// Example: {"ids":["1284392014819","2983092129865"],"scope":["withAny","tag1","tag2"],"serials":["Q234-ABCD-0001","Q234-ABCD-0002","Q234-ABCD-0003"],"wifiMacs":["00:11:22:33:44:55"]}
swagger:model CheckinNetworkSmDevicesBody
*/
type CheckinNetworkSmDevicesBody struct {

	// The ids of the devices to be checked-in.
	Ids []string `json:"ids"`

	// The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be checked-in.
	Scope []string `json:"scope"`

	// The serials of the devices to be checked-in.
	Serials []string `json:"serials"`

	// The wifiMacs of the devices to be checked-in.
	WifiMacs []string `json:"wifiMacs"`
}

// Validate validates this checkin network sm devices body
func (o *CheckinNetworkSmDevicesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checkin network sm devices body based on context it is used
func (o *CheckinNetworkSmDevicesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckinNetworkSmDevicesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckinNetworkSmDevicesBody) UnmarshalBinary(b []byte) error {
	var res CheckinNetworkSmDevicesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CheckinNetworkSmDevicesOKBody checkin network sm devices o k body
swagger:model CheckinNetworkSmDevicesOKBody
*/
type CheckinNetworkSmDevicesOKBody struct {

	// The Meraki Ids of the set of devices.
	Ids []string `json:"ids"`
}

// Validate validates this checkin network sm devices o k body
func (o *CheckinNetworkSmDevicesOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this checkin network sm devices o k body based on context it is used
func (o *CheckinNetworkSmDevicesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckinNetworkSmDevicesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckinNetworkSmDevicesOKBody) UnmarshalBinary(b []byte) error {
	var res CheckinNetworkSmDevicesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
