// Code generated by go-swagger; DO NOT EDIT.

package insight

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkInsightApplicationHealthByTimeReader is a Reader for the GetNetworkInsightApplicationHealthByTime structure.
type GetNetworkInsightApplicationHealthByTimeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkInsightApplicationHealthByTimeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkInsightApplicationHealthByTimeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkInsightApplicationHealthByTimeOK creates a GetNetworkInsightApplicationHealthByTimeOK with default headers values
func NewGetNetworkInsightApplicationHealthByTimeOK() *GetNetworkInsightApplicationHealthByTimeOK {
	return &GetNetworkInsightApplicationHealthByTimeOK{}
}

/*
GetNetworkInsightApplicationHealthByTimeOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkInsightApplicationHealthByTimeOK struct {
	Payload []*GetNetworkInsightApplicationHealthByTimeOKBodyItems0
}

// IsSuccess returns true when this get network insight application health by time o k response has a 2xx status code
func (o *GetNetworkInsightApplicationHealthByTimeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network insight application health by time o k response has a 3xx status code
func (o *GetNetworkInsightApplicationHealthByTimeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network insight application health by time o k response has a 4xx status code
func (o *GetNetworkInsightApplicationHealthByTimeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network insight application health by time o k response has a 5xx status code
func (o *GetNetworkInsightApplicationHealthByTimeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network insight application health by time o k response a status code equal to that given
func (o *GetNetworkInsightApplicationHealthByTimeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network insight application health by time o k response
func (o *GetNetworkInsightApplicationHealthByTimeOK) Code() int {
	return 200
}

func (o *GetNetworkInsightApplicationHealthByTimeOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/insight/applications/{applicationId}/healthByTime][%d] getNetworkInsightApplicationHealthByTimeOK  %+v", 200, o.Payload)
}

func (o *GetNetworkInsightApplicationHealthByTimeOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/insight/applications/{applicationId}/healthByTime][%d] getNetworkInsightApplicationHealthByTimeOK  %+v", 200, o.Payload)
}

func (o *GetNetworkInsightApplicationHealthByTimeOK) GetPayload() []*GetNetworkInsightApplicationHealthByTimeOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkInsightApplicationHealthByTimeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkInsightApplicationHealthByTimeOKBodyItems0 get network insight application health by time o k body items0
swagger:model GetNetworkInsightApplicationHealthByTimeOKBodyItems0
*/
type GetNetworkInsightApplicationHealthByTimeOKBodyItems0 struct {

	// The end time of the query range
	// Format: date-time
	EndTs strfmt.DateTime `json:"endTs,omitempty"`

	// LAN goodput (Number of useful information bits delivered over a LAN per unit of time)
	LanGoodput int64 `json:"lanGoodput,omitempty"`

	// LAN latency in milliseconds
	LanLatencyMs float32 `json:"lanLatencyMs,omitempty"`

	// LAN loss percentage
	LanLossPercent float32 `json:"lanLossPercent,omitempty"`

	// Number of clients
	NumClients int64 `json:"numClients,omitempty"`

	// Received kilobytes-per-second
	Recv int64 `json:"recv,omitempty"`

	// Duration of the response, in milliseconds
	ResponseDuration int64 `json:"responseDuration,omitempty"`

	// Sent kilobytes-per-second
	Sent int64 `json:"sent,omitempty"`

	// The start time of the query range
	// Format: date-time
	StartTs strfmt.DateTime `json:"startTs,omitempty"`

	// WAN goodput (Number of useful information bits delivered over a WAN per unit of time)
	WanGoodput int64 `json:"wanGoodput,omitempty"`

	// WAN latency in milliseconds
	WanLatencyMs float32 `json:"wanLatencyMs,omitempty"`

	// WAN loss percentage
	WanLossPercent float32 `json:"wanLossPercent,omitempty"`
}

// Validate validates this get network insight application health by time o k body items0
func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) validateEndTs(formats strfmt.Registry) error {
	if swag.IsZero(o.EndTs) { // not required
		return nil
	}

	if err := validate.FormatOf("endTs", "body", "date-time", o.EndTs.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) validateStartTs(formats strfmt.Registry) error {
	if swag.IsZero(o.StartTs) { // not required
		return nil
	}

	if err := validate.FormatOf("startTs", "body", "date-time", o.StartTs.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network insight application health by time o k body items0 based on context it is used
func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkInsightApplicationHealthByTimeOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkInsightApplicationHealthByTimeOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
