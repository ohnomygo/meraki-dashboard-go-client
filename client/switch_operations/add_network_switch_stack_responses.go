// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddNetworkSwitchStackReader is a Reader for the AddNetworkSwitchStack structure.
type AddNetworkSwitchStackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddNetworkSwitchStackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddNetworkSwitchStackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddNetworkSwitchStackOK creates a AddNetworkSwitchStackOK with default headers values
func NewAddNetworkSwitchStackOK() *AddNetworkSwitchStackOK {
	return &AddNetworkSwitchStackOK{}
}

/*
AddNetworkSwitchStackOK describes a response with status code 200, with default header values.

Successful operation
*/
type AddNetworkSwitchStackOK struct {
	Payload *AddNetworkSwitchStackOKBody
}

// IsSuccess returns true when this add network switch stack o k response has a 2xx status code
func (o *AddNetworkSwitchStackOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add network switch stack o k response has a 3xx status code
func (o *AddNetworkSwitchStackOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add network switch stack o k response has a 4xx status code
func (o *AddNetworkSwitchStackOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add network switch stack o k response has a 5xx status code
func (o *AddNetworkSwitchStackOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add network switch stack o k response a status code equal to that given
func (o *AddNetworkSwitchStackOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add network switch stack o k response
func (o *AddNetworkSwitchStackOK) Code() int {
	return 200
}

func (o *AddNetworkSwitchStackOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/switch/stacks/{switchStackId}/add][%d] addNetworkSwitchStackOK  %+v", 200, o.Payload)
}

func (o *AddNetworkSwitchStackOK) String() string {
	return fmt.Sprintf("[POST /networks/{networkId}/switch/stacks/{switchStackId}/add][%d] addNetworkSwitchStackOK  %+v", 200, o.Payload)
}

func (o *AddNetworkSwitchStackOK) GetPayload() *AddNetworkSwitchStackOKBody {
	return o.Payload
}

func (o *AddNetworkSwitchStackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddNetworkSwitchStackOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddNetworkSwitchStackBody add network switch stack body
// Example: {"serial":"QBZY-XWVU-TSRQ"}
swagger:model AddNetworkSwitchStackBody
*/
type AddNetworkSwitchStackBody struct {

	// The serial of the switch to be added
	// Required: true
	Serial *string `json:"serial"`
}

// Validate validates this add network switch stack body
func (o *AddNetworkSwitchStackBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddNetworkSwitchStackBody) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("addNetworkSwitchStack"+"."+"serial", "body", o.Serial); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add network switch stack body based on context it is used
func (o *AddNetworkSwitchStackBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNetworkSwitchStackBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNetworkSwitchStackBody) UnmarshalBinary(b []byte) error {
	var res AddNetworkSwitchStackBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AddNetworkSwitchStackOKBody add network switch stack o k body
swagger:model AddNetworkSwitchStackOKBody
*/
type AddNetworkSwitchStackOKBody struct {

	// Switch stacks id
	ID string `json:"id,omitempty"`

	// Switch stacks name
	Name string `json:"name,omitempty"`

	// Serials of the switches in the switch stack
	Serials []string `json:"serials"`
}

// Validate validates this add network switch stack o k body
func (o *AddNetworkSwitchStackOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add network switch stack o k body based on context it is used
func (o *AddNetworkSwitchStackOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddNetworkSwitchStackOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddNetworkSwitchStackOKBody) UnmarshalBinary(b []byte) error {
	var res AddNetworkSwitchStackOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
