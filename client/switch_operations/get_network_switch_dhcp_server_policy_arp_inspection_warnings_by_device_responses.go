// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceReader is a Reader for the GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice structure.
type GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK creates a GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK with default headers values
func NewGetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK() *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK {
	return &GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK{}
}

/*
GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0
}

// IsSuccess returns true when this get network switch dhcp server policy arp inspection warnings by device o k response has a 2xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch dhcp server policy arp inspection warnings by device o k response has a 3xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch dhcp server policy arp inspection warnings by device o k response has a 4xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch dhcp server policy arp inspection warnings by device o k response has a 5xx status code
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch dhcp server policy arp inspection warnings by device o k response a status code equal to that given
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch dhcp server policy arp inspection warnings by device o k response
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice][%d] getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice][%d] getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) GetPayload() []*GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0 {
	return o.Payload
}

func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0 get network switch dhcp server policy arp inspection warnings by device o k body items0
swagger:model GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0
*/
type GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0 struct {

	// Whether this switch has a trusted DAI port. Always false if supportsInspection is false.
	HasTrustedPort bool `json:"hasTrustedPort,omitempty"`

	// Switch name.
	Name string `json:"name,omitempty"`

	// Switch serial.
	Serial string `json:"serial,omitempty"`

	// Whether this switch supports Dynamic ARP Inspection.
	SupportsInspection bool `json:"supportsInspection,omitempty"`

	// Url link to switch.
	URL string `json:"url,omitempty"`
}

// Validate validates this get network switch dhcp server policy arp inspection warnings by device o k body items0
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network switch dhcp server policy arp inspection warnings by device o k body items0 based on context it is used
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
