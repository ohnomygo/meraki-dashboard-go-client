// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDeviceSwitchRoutingInterfacesReader is a Reader for the GetDeviceSwitchRoutingInterfaces structure.
type GetDeviceSwitchRoutingInterfacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceSwitchRoutingInterfacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceSwitchRoutingInterfacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceSwitchRoutingInterfacesOK creates a GetDeviceSwitchRoutingInterfacesOK with default headers values
func NewGetDeviceSwitchRoutingInterfacesOK() *GetDeviceSwitchRoutingInterfacesOK {
	return &GetDeviceSwitchRoutingInterfacesOK{}
}

/*
GetDeviceSwitchRoutingInterfacesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceSwitchRoutingInterfacesOK struct {
	Payload []*GetDeviceSwitchRoutingInterfacesOKBodyItems0
}

// IsSuccess returns true when this get device switch routing interfaces o k response has a 2xx status code
func (o *GetDeviceSwitchRoutingInterfacesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device switch routing interfaces o k response has a 3xx status code
func (o *GetDeviceSwitchRoutingInterfacesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device switch routing interfaces o k response has a 4xx status code
func (o *GetDeviceSwitchRoutingInterfacesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device switch routing interfaces o k response has a 5xx status code
func (o *GetDeviceSwitchRoutingInterfacesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device switch routing interfaces o k response a status code equal to that given
func (o *GetDeviceSwitchRoutingInterfacesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get device switch routing interfaces o k response
func (o *GetDeviceSwitchRoutingInterfacesOK) Code() int {
	return 200
}

func (o *GetDeviceSwitchRoutingInterfacesOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/switch/routing/interfaces][%d] getDeviceSwitchRoutingInterfacesOK  %+v", 200, o.Payload)
}

func (o *GetDeviceSwitchRoutingInterfacesOK) String() string {
	return fmt.Sprintf("[GET /devices/{serial}/switch/routing/interfaces][%d] getDeviceSwitchRoutingInterfacesOK  %+v", 200, o.Payload)
}

func (o *GetDeviceSwitchRoutingInterfacesOK) GetPayload() []*GetDeviceSwitchRoutingInterfacesOKBodyItems0 {
	return o.Payload
}

func (o *GetDeviceSwitchRoutingInterfacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDeviceSwitchRoutingInterfacesOKBodyItems0 get device switch routing interfaces o k body items0
swagger:model GetDeviceSwitchRoutingInterfacesOKBodyItems0
*/
type GetDeviceSwitchRoutingInterfacesOKBodyItems0 struct {

	// IPv4 default gateway
	DefaultGateway string `json:"defaultGateway,omitempty"`

	// The id
	InterfaceID string `json:"interfaceId,omitempty"`

	// IPv4 address
	InterfaceIP string `json:"interfaceIp,omitempty"`

	// ipv6
	IPV6 *GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6 `json:"ipv6,omitempty"`

	// Multicast routing status
	MulticastRouting string `json:"multicastRouting,omitempty"`

	// The name
	Name string `json:"name,omitempty"`

	// ospf settings
	OspfSettings *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings `json:"ospfSettings,omitempty"`

	// ospf v3
	OspfV3 *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3 `json:"ospfV3,omitempty"`

	// IPv4 subnet
	Subnet string `json:"subnet,omitempty"`

	// VLAN id
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this get device switch routing interfaces o k body items0
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOspfSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOspfV3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV6) { // not required
		return nil
	}

	if o.IPV6 != nil {
		if err := o.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) validateOspfSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.OspfSettings) { // not required
		return nil
	}

	if o.OspfSettings != nil {
		if err := o.OspfSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ospfSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ospfSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) validateOspfV3(formats strfmt.Registry) error {
	if swag.IsZero(o.OspfV3) { // not required
		return nil
	}

	if o.OspfV3 != nil {
		if err := o.OspfV3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ospfV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ospfV3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device switch routing interfaces o k body items0 based on the context it is used
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOspfSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOspfV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV6 != nil {
		if err := o.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv6")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) contextValidateOspfSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.OspfSettings != nil {
		if err := o.OspfSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ospfSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ospfSettings")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) contextValidateOspfV3(ctx context.Context, formats strfmt.Registry) error {

	if o.OspfV3 != nil {
		if err := o.OspfV3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ospfV3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ospfV3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetDeviceSwitchRoutingInterfacesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6 IPv6 addressing
swagger:model GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6
*/
type GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6 struct {

	// IPv6 address
	Address string `json:"address,omitempty"`

	// Assignment mode
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// IPv6 gateway
	Gateway string `json:"gateway,omitempty"`

	// IPv6 subnet
	Prefix string `json:"prefix,omitempty"`
}

// Validate validates this get device switch routing interfaces o k body items0 IP v6
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device switch routing interfaces o k body items0 IP v6 based on context it is used
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6) UnmarshalBinary(b []byte) error {
	var res GetDeviceSwitchRoutingInterfacesOKBodyItems0IPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings IPv4 OSPF Settings
swagger:model GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings
*/
type GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings struct {

	// Area id
	Area string `json:"area,omitempty"`

	// OSPF Cost
	Cost int64 `json:"cost,omitempty"`

	// Disable sending Hello packets on this interface's IPv4 area
	IsPassiveEnabled bool `json:"isPassiveEnabled,omitempty"`
}

// Validate validates this get device switch routing interfaces o k body items0 ospf settings
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device switch routing interfaces o k body items0 ospf settings based on context it is used
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings) UnmarshalBinary(b []byte) error {
	var res GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3 IPv6 OSPF Settings
swagger:model GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3
*/
type GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3 struct {

	// Area id
	Area string `json:"area,omitempty"`

	// OSPF Cost
	Cost int64 `json:"cost,omitempty"`

	// Disable sending Hello packets on this interface's IPv6 area
	IsPassiveEnabled bool `json:"isPassiveEnabled,omitempty"`
}

// Validate validates this get device switch routing interfaces o k body items0 ospf v3
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device switch routing interfaces o k body items0 ospf v3 based on context it is used
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3) UnmarshalBinary(b []byte) error {
	var res GetDeviceSwitchRoutingInterfacesOKBodyItems0OspfV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
