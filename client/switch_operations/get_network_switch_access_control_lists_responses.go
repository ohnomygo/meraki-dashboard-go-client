// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNetworkSwitchAccessControlListsReader is a Reader for the GetNetworkSwitchAccessControlLists structure.
type GetNetworkSwitchAccessControlListsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkSwitchAccessControlListsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkSwitchAccessControlListsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkSwitchAccessControlListsOK creates a GetNetworkSwitchAccessControlListsOK with default headers values
func NewGetNetworkSwitchAccessControlListsOK() *GetNetworkSwitchAccessControlListsOK {
	return &GetNetworkSwitchAccessControlListsOK{}
}

/*
GetNetworkSwitchAccessControlListsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkSwitchAccessControlListsOK struct {
	Payload *GetNetworkSwitchAccessControlListsOKBody
}

// IsSuccess returns true when this get network switch access control lists o k response has a 2xx status code
func (o *GetNetworkSwitchAccessControlListsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network switch access control lists o k response has a 3xx status code
func (o *GetNetworkSwitchAccessControlListsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network switch access control lists o k response has a 4xx status code
func (o *GetNetworkSwitchAccessControlListsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network switch access control lists o k response has a 5xx status code
func (o *GetNetworkSwitchAccessControlListsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network switch access control lists o k response a status code equal to that given
func (o *GetNetworkSwitchAccessControlListsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network switch access control lists o k response
func (o *GetNetworkSwitchAccessControlListsOK) Code() int {
	return 200
}

func (o *GetNetworkSwitchAccessControlListsOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/accessControlLists][%d] getNetworkSwitchAccessControlListsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAccessControlListsOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/switch/accessControlLists][%d] getNetworkSwitchAccessControlListsOK  %+v", 200, o.Payload)
}

func (o *GetNetworkSwitchAccessControlListsOK) GetPayload() *GetNetworkSwitchAccessControlListsOKBody {
	return o.Payload
}

func (o *GetNetworkSwitchAccessControlListsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkSwitchAccessControlListsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkSwitchAccessControlListsOKBody get network switch access control lists o k body
swagger:model GetNetworkSwitchAccessControlListsOKBody
*/
type GetNetworkSwitchAccessControlListsOKBody struct {

	// An ordered array of the access control list rules
	Rules []*GetNetworkSwitchAccessControlListsOKBodyRulesItems0 `json:"rules"`
}

// Validate validates this get network switch access control lists o k body
func (o *GetNetworkSwitchAccessControlListsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAccessControlListsOKBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSwitchAccessControlListsOK" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSwitchAccessControlListsOK" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network switch access control lists o k body based on the context it is used
func (o *GetNetworkSwitchAccessControlListsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkSwitchAccessControlListsOKBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkSwitchAccessControlListsOK" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkSwitchAccessControlListsOK" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessControlListsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessControlListsOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessControlListsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkSwitchAccessControlListsOKBodyRulesItems0 get network switch access control lists o k body rules items0
swagger:model GetNetworkSwitchAccessControlListsOKBodyRulesItems0
*/
type GetNetworkSwitchAccessControlListsOKBodyRulesItems0 struct {

	// Description of the rule (optional)
	Comment string `json:"comment,omitempty"`

	// Destination IP address (in IP or CIDR notation)
	DstCidr string `json:"dstCidr,omitempty"`

	// Destination port
	DstPort string `json:"dstPort,omitempty"`

	// IP address version
	// Enum: [any ipv4 ipv6]
	IPVersion string `json:"ipVersion,omitempty"`

	// 'allow' or 'deny' traffic specified by this rule
	// Enum: [allow deny]
	Policy string `json:"policy,omitempty"`

	// The type of protocol
	// Enum: [any tcp udp]
	Protocol string `json:"protocol,omitempty"`

	// Source IP address (in IP or CIDR notation)
	SrcCidr string `json:"srcCidr,omitempty"`

	// Source port
	SrcPort string `json:"srcPort,omitempty"`

	// ncoming traffic VLAN
	Vlan string `json:"vlan,omitempty"`
}

// Validate validates this get network switch access control lists o k body rules items0
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeIPVersionPropEnum = append(getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeIPVersionPropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionAny captures enum value "any"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionAny string = "any"

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionIPV4 captures enum value "ipv4"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionIPV4 string = "ipv4"

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionIPV6 captures enum value "ipv6"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0IPVersionIPV6 string = "ipv6"
)

// prop value enum
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeIPVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validateIPVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateIPVersionEnum("ipVersion", "body", o.IPVersion); err != nil {
		return err
	}

	return nil
}

var getNetworkSwitchAccessControlListsOKBodyRulesItems0TypePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessControlListsOKBodyRulesItems0TypePolicyPropEnum = append(getNetworkSwitchAccessControlListsOKBodyRulesItems0TypePolicyPropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0PolicyAllow captures enum value "allow"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0PolicyAllow string = "allow"

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0PolicyDeny captures enum value "deny"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0PolicyDeny string = "deny"
)

// prop value enum
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validatePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessControlListsOKBodyRulesItems0TypePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.Policy) { // not required
		return nil
	}

	// value enum
	if err := o.validatePolicyEnum("policy", "body", o.Policy); err != nil {
		return err
	}

	return nil
}

var getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeProtocolPropEnum = append(getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeProtocolPropEnum, v)
	}
}

const (

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolAny captures enum value "any"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolAny string = "any"

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolTCP captures enum value "tcp"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolTCP string = "tcp"

	// GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolUDP captures enum value "udp"
	GetNetworkSwitchAccessControlListsOKBodyRulesItems0ProtocolUDP string = "udp"
)

// prop value enum
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getNetworkSwitchAccessControlListsOKBodyRulesItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(o.Protocol) { // not required
		return nil
	}

	// value enum
	if err := o.validateProtocolEnum("protocol", "body", o.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get network switch access control lists o k body rules items0 based on context it is used
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkSwitchAccessControlListsOKBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkSwitchAccessControlListsOKBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
