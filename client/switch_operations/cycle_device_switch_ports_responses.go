// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CycleDeviceSwitchPortsReader is a Reader for the CycleDeviceSwitchPorts structure.
type CycleDeviceSwitchPortsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CycleDeviceSwitchPortsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCycleDeviceSwitchPortsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCycleDeviceSwitchPortsOK creates a CycleDeviceSwitchPortsOK with default headers values
func NewCycleDeviceSwitchPortsOK() *CycleDeviceSwitchPortsOK {
	return &CycleDeviceSwitchPortsOK{}
}

/*
CycleDeviceSwitchPortsOK describes a response with status code 200, with default header values.

Successful operation
*/
type CycleDeviceSwitchPortsOK struct {
	Payload *CycleDeviceSwitchPortsOKBody
}

// IsSuccess returns true when this cycle device switch ports o k response has a 2xx status code
func (o *CycleDeviceSwitchPortsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cycle device switch ports o k response has a 3xx status code
func (o *CycleDeviceSwitchPortsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cycle device switch ports o k response has a 4xx status code
func (o *CycleDeviceSwitchPortsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cycle device switch ports o k response has a 5xx status code
func (o *CycleDeviceSwitchPortsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cycle device switch ports o k response a status code equal to that given
func (o *CycleDeviceSwitchPortsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cycle device switch ports o k response
func (o *CycleDeviceSwitchPortsOK) Code() int {
	return 200
}

func (o *CycleDeviceSwitchPortsOK) Error() string {
	return fmt.Sprintf("[POST /devices/{serial}/switch/ports/cycle][%d] cycleDeviceSwitchPortsOK  %+v", 200, o.Payload)
}

func (o *CycleDeviceSwitchPortsOK) String() string {
	return fmt.Sprintf("[POST /devices/{serial}/switch/ports/cycle][%d] cycleDeviceSwitchPortsOK  %+v", 200, o.Payload)
}

func (o *CycleDeviceSwitchPortsOK) GetPayload() *CycleDeviceSwitchPortsOKBody {
	return o.Payload
}

func (o *CycleDeviceSwitchPortsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CycleDeviceSwitchPortsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CycleDeviceSwitchPortsBody cycle device switch ports body
// Example: {"ports":["1","2-5","1_MA-MOD-8X10G_1","1_MA-MOD-8X10G_2-1_MA-MOD-8X10G_8"]}
swagger:model CycleDeviceSwitchPortsBody
*/
type CycleDeviceSwitchPortsBody struct {

	// List of switch ports
	// Required: true
	Ports []string `json:"ports"`
}

// Validate validates this cycle device switch ports body
func (o *CycleDeviceSwitchPortsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CycleDeviceSwitchPortsBody) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("cycleDeviceSwitchPorts"+"."+"ports", "body", o.Ports); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cycle device switch ports body based on context it is used
func (o *CycleDeviceSwitchPortsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CycleDeviceSwitchPortsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CycleDeviceSwitchPortsBody) UnmarshalBinary(b []byte) error {
	var res CycleDeviceSwitchPortsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CycleDeviceSwitchPortsOKBody cycle device switch ports o k body
swagger:model CycleDeviceSwitchPortsOKBody
*/
type CycleDeviceSwitchPortsOKBody struct {

	// List of switch ports
	Ports []string `json:"ports"`
}

// Validate validates this cycle device switch ports o k body
func (o *CycleDeviceSwitchPortsOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cycle device switch ports o k body based on context it is used
func (o *CycleDeviceSwitchPortsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CycleDeviceSwitchPortsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CycleDeviceSwitchPortsOKBody) UnmarshalBinary(b []byte) error {
	var res CycleDeviceSwitchPortsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
