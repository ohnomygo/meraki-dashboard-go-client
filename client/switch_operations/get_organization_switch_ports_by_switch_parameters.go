// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationSwitchPortsBySwitchParams creates a new GetOrganizationSwitchPortsBySwitchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationSwitchPortsBySwitchParams() *GetOrganizationSwitchPortsBySwitchParams {
	return &GetOrganizationSwitchPortsBySwitchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationSwitchPortsBySwitchParamsWithTimeout creates a new GetOrganizationSwitchPortsBySwitchParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationSwitchPortsBySwitchParamsWithTimeout(timeout time.Duration) *GetOrganizationSwitchPortsBySwitchParams {
	return &GetOrganizationSwitchPortsBySwitchParams{
		timeout: timeout,
	}
}

// NewGetOrganizationSwitchPortsBySwitchParamsWithContext creates a new GetOrganizationSwitchPortsBySwitchParams object
// with the ability to set a context for a request.
func NewGetOrganizationSwitchPortsBySwitchParamsWithContext(ctx context.Context) *GetOrganizationSwitchPortsBySwitchParams {
	return &GetOrganizationSwitchPortsBySwitchParams{
		Context: ctx,
	}
}

// NewGetOrganizationSwitchPortsBySwitchParamsWithHTTPClient creates a new GetOrganizationSwitchPortsBySwitchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationSwitchPortsBySwitchParamsWithHTTPClient(client *http.Client) *GetOrganizationSwitchPortsBySwitchParams {
	return &GetOrganizationSwitchPortsBySwitchParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationSwitchPortsBySwitchParams contains all the parameters to send to the API endpoint

	for the get organization switch ports by switch operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationSwitchPortsBySwitchParams struct {

	/* ConfigurationUpdatedAfter.

	   Optional parameter to filter results by switches where the configuration has been updated after the given timestamp.
	*/
	ConfigurationUpdatedAfter *string

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* Mac.

	   Optional parameter to filter switchports belonging to switches by MAC address. All returned switches will have a MAC address that contains the search term or is an exact match.
	*/
	Mac *string

	/* Macs.

	   Optional parameter to filter switchports by one or more MAC addresses belonging to devices. All switchports returned belong to MAC addresses of switches that are an exact match.
	*/
	Macs []string

	/* Name.

	   Optional parameter to filter switchports belonging to switches by name. All returned switches will have a name that contains the search term or is an exact match.
	*/
	Name *string

	/* NetworkIds.

	   Optional parameter to filter switchports by network.
	*/
	NetworkIds []string

	/* OrganizationID.

	   Organization ID
	*/
	OrganizationID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 50. Default is 50.
	*/
	PerPage *int64

	/* PortProfileIds.

	   Optional parameter to filter switchports belonging to the specified port profiles.
	*/
	PortProfileIds []string

	/* Serial.

	   Optional parameter to filter switchports belonging to switches by serial number. All returned switches will have a serial number that contains the search term or is an exact match.
	*/
	Serial *string

	/* Serials.

	   Optional parameter to filter switchports belonging to switches with one or more serial numbers. All switchports returned belong to serial numbers of switches that are an exact match.
	*/
	Serials []string

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization switch ports by switch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationSwitchPortsBySwitchParams) WithDefaults() *GetOrganizationSwitchPortsBySwitchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization switch ports by switch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationSwitchPortsBySwitchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithTimeout(timeout time.Duration) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithContext(ctx context.Context) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithHTTPClient(client *http.Client) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfigurationUpdatedAfter adds the configurationUpdatedAfter to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithConfigurationUpdatedAfter(configurationUpdatedAfter *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetConfigurationUpdatedAfter(configurationUpdatedAfter)
	return o
}

// SetConfigurationUpdatedAfter adds the configurationUpdatedAfter to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetConfigurationUpdatedAfter(configurationUpdatedAfter *string) {
	o.ConfigurationUpdatedAfter = configurationUpdatedAfter
}

// WithEndingBefore adds the endingBefore to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithEndingBefore(endingBefore *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithMac adds the mac to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithMac(mac *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetMac(mac)
	return o
}

// SetMac adds the mac to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetMac(mac *string) {
	o.Mac = mac
}

// WithMacs adds the macs to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithMacs(macs []string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetMacs(macs)
	return o
}

// SetMacs adds the macs to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetMacs(macs []string) {
	o.Macs = macs
}

// WithName adds the name to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithName(name *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetName(name *string) {
	o.Name = name
}

// WithNetworkIds adds the networkIds to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithNetworkIds(networkIds []string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetNetworkIds(networkIds)
	return o
}

// SetNetworkIds adds the networkIds to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetNetworkIds(networkIds []string) {
	o.NetworkIds = networkIds
}

// WithOrganizationID adds the organizationID to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithOrganizationID(organizationID string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithPerPage adds the perPage to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithPerPage(perPage *int64) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithPortProfileIds adds the portProfileIds to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithPortProfileIds(portProfileIds []string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetPortProfileIds(portProfileIds)
	return o
}

// SetPortProfileIds adds the portProfileIds to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetPortProfileIds(portProfileIds []string) {
	o.PortProfileIds = portProfileIds
}

// WithSerial adds the serial to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithSerial(serial *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetSerial(serial *string) {
	o.Serial = serial
}

// WithSerials adds the serials to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithSerials(serials []string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetSerials(serials)
	return o
}

// SetSerials adds the serials to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetSerials(serials []string) {
	o.Serials = serials
}

// WithStartingAfter adds the startingAfter to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) WithStartingAfter(startingAfter *string) *GetOrganizationSwitchPortsBySwitchParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get organization switch ports by switch params
func (o *GetOrganizationSwitchPortsBySwitchParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationSwitchPortsBySwitchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConfigurationUpdatedAfter != nil {

		// query param configurationUpdatedAfter
		var qrConfigurationUpdatedAfter string

		if o.ConfigurationUpdatedAfter != nil {
			qrConfigurationUpdatedAfter = *o.ConfigurationUpdatedAfter
		}
		qConfigurationUpdatedAfter := qrConfigurationUpdatedAfter
		if qConfigurationUpdatedAfter != "" {

			if err := r.SetQueryParam("configurationUpdatedAfter", qConfigurationUpdatedAfter); err != nil {
				return err
			}
		}
	}

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.Mac != nil {

		// query param mac
		var qrMac string

		if o.Mac != nil {
			qrMac = *o.Mac
		}
		qMac := qrMac
		if qMac != "" {

			if err := r.SetQueryParam("mac", qMac); err != nil {
				return err
			}
		}
	}

	if o.Macs != nil {

		// binding items for macs
		joinedMacs := o.bindParamMacs(reg)

		// query array param macs
		if err := r.SetQueryParam("macs", joinedMacs...); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NetworkIds != nil {

		// binding items for networkIds
		joinedNetworkIds := o.bindParamNetworkIds(reg)

		// query array param networkIds
		if err := r.SetQueryParam("networkIds", joinedNetworkIds...); err != nil {
			return err
		}
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.PortProfileIds != nil {

		// binding items for portProfileIds
		joinedPortProfileIds := o.bindParamPortProfileIds(reg)

		// query array param portProfileIds
		if err := r.SetQueryParam("portProfileIds", joinedPortProfileIds...); err != nil {
			return err
		}
	}

	if o.Serial != nil {

		// query param serial
		var qrSerial string

		if o.Serial != nil {
			qrSerial = *o.Serial
		}
		qSerial := qrSerial
		if qSerial != "" {

			if err := r.SetQueryParam("serial", qSerial); err != nil {
				return err
			}
		}
	}

	if o.Serials != nil {

		// binding items for serials
		joinedSerials := o.bindParamSerials(reg)

		// query array param serials
		if err := r.SetQueryParam("serials", joinedSerials...); err != nil {
			return err
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationSwitchPortsBySwitch binds the parameter macs
func (o *GetOrganizationSwitchPortsBySwitchParams) bindParamMacs(formats strfmt.Registry) []string {
	macsIR := o.Macs

	var macsIC []string
	for _, macsIIR := range macsIR { // explode []string

		macsIIV := macsIIR // string as string
		macsIC = append(macsIC, macsIIV)
	}

	// items.CollectionFormat: ""
	macsIS := swag.JoinByFormat(macsIC, "")

	return macsIS
}

// bindParamGetOrganizationSwitchPortsBySwitch binds the parameter networkIds
func (o *GetOrganizationSwitchPortsBySwitchParams) bindParamNetworkIds(formats strfmt.Registry) []string {
	networkIdsIR := o.NetworkIds

	var networkIdsIC []string
	for _, networkIdsIIR := range networkIdsIR { // explode []string

		networkIdsIIV := networkIdsIIR // string as string
		networkIdsIC = append(networkIdsIC, networkIdsIIV)
	}

	// items.CollectionFormat: ""
	networkIdsIS := swag.JoinByFormat(networkIdsIC, "")

	return networkIdsIS
}

// bindParamGetOrganizationSwitchPortsBySwitch binds the parameter portProfileIds
func (o *GetOrganizationSwitchPortsBySwitchParams) bindParamPortProfileIds(formats strfmt.Registry) []string {
	portProfileIdsIR := o.PortProfileIds

	var portProfileIdsIC []string
	for _, portProfileIdsIIR := range portProfileIdsIR { // explode []string

		portProfileIdsIIV := portProfileIdsIIR // string as string
		portProfileIdsIC = append(portProfileIdsIC, portProfileIdsIIV)
	}

	// items.CollectionFormat: ""
	portProfileIdsIS := swag.JoinByFormat(portProfileIdsIC, "")

	return portProfileIdsIS
}

// bindParamGetOrganizationSwitchPortsBySwitch binds the parameter serials
func (o *GetOrganizationSwitchPortsBySwitchParams) bindParamSerials(formats strfmt.Registry) []string {
	serialsIR := o.Serials

	var serialsIC []string
	for _, serialsIIR := range serialsIR { // explode []string

		serialsIIV := serialsIIR // string as string
		serialsIC = append(serialsIC, serialsIIV)
	}

	// items.CollectionFormat: ""
	serialsIS := swag.JoinByFormat(serialsIC, "")

	return serialsIS
}
