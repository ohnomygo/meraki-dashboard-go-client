// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetNetworkApplianceTrafficShapingUplinkBandwidthReader is a Reader for the GetNetworkApplianceTrafficShapingUplinkBandwidth structure.
type GetNetworkApplianceTrafficShapingUplinkBandwidthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNetworkApplianceTrafficShapingUplinkBandwidthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetNetworkApplianceTrafficShapingUplinkBandwidthOK creates a GetNetworkApplianceTrafficShapingUplinkBandwidthOK with default headers values
func NewGetNetworkApplianceTrafficShapingUplinkBandwidthOK() *GetNetworkApplianceTrafficShapingUplinkBandwidthOK {
	return &GetNetworkApplianceTrafficShapingUplinkBandwidthOK{}
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOK struct {
	Payload *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody
}

// IsSuccess returns true when this get network appliance traffic shaping uplink bandwidth o k response has a 2xx status code
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get network appliance traffic shaping uplink bandwidth o k response has a 3xx status code
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get network appliance traffic shaping uplink bandwidth o k response has a 4xx status code
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get network appliance traffic shaping uplink bandwidth o k response has a 5xx status code
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get network appliance traffic shaping uplink bandwidth o k response a status code equal to that given
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get network appliance traffic shaping uplink bandwidth o k response
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) Code() int {
	return 200
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) Error() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/trafficShaping/uplinkBandwidth][%d] getNetworkApplianceTrafficShapingUplinkBandwidthOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) String() string {
	return fmt.Sprintf("[GET /networks/{networkId}/appliance/trafficShaping/uplinkBandwidth][%d] getNetworkApplianceTrafficShapingUplinkBandwidthOK  %+v", 200, o.Payload)
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) GetPayload() *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody {
	return o.Payload
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody get network appliance traffic shaping uplink bandwidth o k body
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody struct {

	// bandwidth limits
	BandwidthLimits *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits `json:"bandwidthLimits,omitempty"`

	// Array of appliances
	Capabilities []*GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0 `json:"capabilities"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandwidthLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) validateBandwidthLimits(formats strfmt.Registry) error {
	if swag.IsZero(o.BandwidthLimits) { // not required
		return nil
	}

	if o.BandwidthLimits != nil {
		if err := o.BandwidthLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(o.Capabilities) { // not required
		return nil
	}

	for i := 0; i < len(o.Capabilities); i++ {
		if swag.IsZero(o.Capabilities[i]) { // not required
			continue
		}

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network appliance traffic shaping uplink bandwidth o k body based on the context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBandwidthLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) contextValidateBandwidthLimits(ctx context.Context, formats strfmt.Registry) error {

	if o.BandwidthLimits != nil {
		if err := o.BandwidthLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Capabilities); i++ {

		if o.Capabilities[i] != nil {
			if err := o.Capabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "capabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits A hash uplink keys and their configured settings for the Appliance
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits struct {

	// cellular
	Cellular *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular `json:"cellular,omitempty"`

	// wan1
	Wan1 *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1 `json:"wan1,omitempty"`

	// wan2
	Wan2 *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2 `json:"wan2,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCellular(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWan1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWan2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) validateCellular(formats strfmt.Registry) error {
	if swag.IsZero(o.Cellular) { // not required
		return nil
	}

	if o.Cellular != nil {
		if err := o.Cellular.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "cellular")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "cellular")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) validateWan1(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan1) { // not required
		return nil
	}

	if o.Wan1 != nil {
		if err := o.Wan1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) validateWan2(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan2) { // not required
		return nil
	}

	if o.Wan2 != nil {
		if err := o.Wan2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits based on the context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCellular(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWan1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWan2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) contextValidateCellular(ctx context.Context, formats strfmt.Registry) error {

	if o.Cellular != nil {
		if err := o.Cellular.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "cellular")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "cellular")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) contextValidateWan1(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan1 != nil {
		if err := o.Wan1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) contextValidateWan2(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan2 != nil {
		if err := o.Wan2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getNetworkApplianceTrafficShapingUplinkBandwidthOK" + "." + "bandwidthLimits" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular uplink cellular configued limits [optional]
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular struct {

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitDown int64 `json:"limitDown,omitempty"`

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitUp int64 `json:"limitUp,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits cellular
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits cellular based on context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsCellular
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1 uplink wan1 configued limits [optional]
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1 struct {

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitDown int64 `json:"limitDown,omitempty"`

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitUp int64 `json:"limitUp,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits wan1
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits wan1 based on context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2 uplink wan2 configued limits [optional]
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2 struct {

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitDown int64 `json:"limitDown,omitempty"`

	// configured UP limit for the uplink (in Kbps).  Null indicated unlimited
	LimitUp int64 `json:"limitUp,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits wan2
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance traffic shaping uplink bandwidth o k body bandwidth limits wan2 based on context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyBandwidthLimitsWan2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0 get network appliance traffic shaping uplink bandwidth o k body capabilities items0
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0 struct {

	// array of uplink limits
	Bandwidths []*GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0 `json:"bandwidths"`

	// model number of appliance
	Model string `json:"model,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body capabilities items0
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandwidths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) validateBandwidths(formats strfmt.Registry) error {
	if swag.IsZero(o.Bandwidths) { // not required
		return nil
	}

	for i := 0; i < len(o.Bandwidths); i++ {
		if swag.IsZero(o.Bandwidths[i]) { // not required
			continue
		}

		if o.Bandwidths[i] != nil {
			if err := o.Bandwidths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandwidths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandwidths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get network appliance traffic shaping uplink bandwidth o k body capabilities items0 based on the context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBandwidths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) contextValidateBandwidths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Bandwidths); i++ {

		if o.Bandwidths[i] != nil {
			if err := o.Bandwidths[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bandwidths" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bandwidths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0 get network appliance traffic shaping uplink bandwidth o k body capabilities items0 bandwidths items0
swagger:model GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0
*/
type GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0 struct {

	// name of uplink
	Interface string `json:"interface,omitempty"`

	// limit in bytes (null indicates unlimited)
	Limit int64 `json:"limit,omitempty"`
}

// Validate validates this get network appliance traffic shaping uplink bandwidth o k body capabilities items0 bandwidths items0
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get network appliance traffic shaping uplink bandwidth o k body capabilities items0 bandwidths items0 based on context it is used
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0) UnmarshalBinary(b []byte) error {
	var res GetNetworkApplianceTrafficShapingUplinkBandwidthOKBodyCapabilitiesItems0BandwidthsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
