// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationApplianceVpnThirdPartyVPNPeersReader is a Reader for the GetOrganizationApplianceVpnThirdPartyVPNPeers structure.
type GetOrganizationApplianceVpnThirdPartyVPNPeersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationApplianceVpnThirdPartyVPNPeersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationApplianceVpnThirdPartyVPNPeersOK creates a GetOrganizationApplianceVpnThirdPartyVPNPeersOK with default headers values
func NewGetOrganizationApplianceVpnThirdPartyVPNPeersOK() *GetOrganizationApplianceVpnThirdPartyVPNPeersOK {
	return &GetOrganizationApplianceVpnThirdPartyVPNPeersOK{}
}

/*
GetOrganizationApplianceVpnThirdPartyVPNPeersOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationApplianceVpnThirdPartyVPNPeersOK struct {
	Payload *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody
}

// IsSuccess returns true when this get organization appliance vpn third party v p n peers o k response has a 2xx status code
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization appliance vpn third party v p n peers o k response has a 3xx status code
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization appliance vpn third party v p n peers o k response has a 4xx status code
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization appliance vpn third party v p n peers o k response has a 5xx status code
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization appliance vpn third party v p n peers o k response a status code equal to that given
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization appliance vpn third party v p n peers o k response
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) Code() int {
	return 200
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers][%d] getOrganizationApplianceVpnThirdPartyVPNPeersOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers][%d] getOrganizationApplianceVpnThirdPartyVPNPeersOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) GetPayload() *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody {
	return o.Payload
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody get organization appliance vpn third party v p n peers o k body
swagger:model GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody
*/
type GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody struct {

	// The list of VPN peers
	Peers []*GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0 `json:"peers"`
}

// Validate validates this get organization appliance vpn third party v p n peers o k body
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) validatePeers(formats strfmt.Registry) error {
	if swag.IsZero(o.Peers) { // not required
		return nil
	}

	for i := 0; i < len(o.Peers); i++ {
		if swag.IsZero(o.Peers[i]) { // not required
			continue
		}

		if o.Peers[i] != nil {
			if err := o.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationApplianceVpnThirdPartyVPNPeersOK" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationApplianceVpnThirdPartyVPNPeersOK" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization appliance vpn third party v p n peers o k body based on the context it is used
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) contextValidatePeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Peers); i++ {

		if o.Peers[i] != nil {
			if err := o.Peers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getOrganizationApplianceVpnThirdPartyVPNPeersOK" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getOrganizationApplianceVpnThirdPartyVPNPeersOK" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody) UnmarshalBinary(b []byte) error {
	var res GetOrganizationApplianceVpnThirdPartyVPNPeersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0 get organization appliance vpn third party v p n peers o k body peers items0
swagger:model GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0
*/
type GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0 struct {

	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	// Enum: [1 2]
	IkeVersion *string `json:"ikeVersion,omitempty"`

	// ipsec policies
	IpsecPolicies *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies `json:"ipsecPolicies,omitempty"`

	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset string `json:"ipsecPoliciesPreset,omitempty"`

	// [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
	LocalID string `json:"localId,omitempty"`

	// The name of the VPN peer
	Name string `json:"name,omitempty"`

	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags"`

	// The list of the private subnets of the VPN peer
	PrivateSubnets []string `json:"privateSubnets"`

	// [optional] The public IP of the VPN peer
	PublicIP string `json:"publicIp,omitempty"`

	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID string `json:"remoteId,omitempty"`

	// The shared secret with the VPN peer
	Secret string `json:"secret,omitempty"`
}

// Validate validates this get organization appliance vpn third party v p n peers o k body peers items0
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIkeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIpsecPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0TypeIkeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0TypeIkeVersionPropEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0TypeIkeVersionPropEnum, v)
	}
}

const (

	// GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IkeVersionNr1 captures enum value "1"
	GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IkeVersionNr1 string = "1"

	// GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IkeVersionNr2 captures enum value "2"
	GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IkeVersionNr2 string = "2"
)

// prop value enum
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) validateIkeVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0TypeIkeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) validateIkeVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.IkeVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateIkeVersionEnum("ikeVersion", "body", *o.IkeVersion); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) validateIpsecPolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.IpsecPolicies) { // not required
		return nil
	}

	if o.IpsecPolicies != nil {
		if err := o.IpsecPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsecPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipsecPolicies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization appliance vpn third party v p n peers o k body peers items0 based on the context it is used
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIpsecPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) contextValidateIpsecPolicies(ctx context.Context, formats strfmt.Registry) error {

	if o.IpsecPolicies != nil {
		if err := o.IpsecPolicies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsecPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipsecPolicies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
swagger:model GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies
*/
type GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies struct {

	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []string `json:"childAuthAlgo"`

	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []string `json:"childCipherAlgo"`

	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime int64 `json:"childLifetime,omitempty"`

	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup"`

	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []string `json:"ikeAuthAlgo"`

	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []string `json:"ikeCipherAlgo"`

	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup"`

	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime int64 `json:"ikeLifetime,omitempty"`

	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []string `json:"ikePrfAlgo"`
}

// Validate validates this get organization appliance vpn third party v p n peers o k body peers items0 ipsec policies
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChildAuthAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChildCipherAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIkeAuthAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIkeCipherAlgo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIkePrfAlgo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildAuthAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["md5","sha1","sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildAuthAlgoItemsEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildAuthAlgoItemsEnum, v)
	}
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateChildAuthAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildAuthAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateChildAuthAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.ChildAuthAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.ChildAuthAlgo); i++ {

		// value enum
		if err := o.validateChildAuthAlgoItemsEnum("ipsecPolicies"+"."+"childAuthAlgo"+"."+strconv.Itoa(i), "body", o.ChildAuthAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildCipherAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aes128","aes192","aes256","des","null","tripledes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildCipherAlgoItemsEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildCipherAlgoItemsEnum, v)
	}
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateChildCipherAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesChildCipherAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateChildCipherAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.ChildCipherAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.ChildCipherAlgo); i++ {

		// value enum
		if err := o.validateChildCipherAlgoItemsEnum("ipsecPolicies"+"."+"childCipherAlgo"+"."+strconv.Itoa(i), "body", o.ChildCipherAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeAuthAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["md5","sha1","sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeAuthAlgoItemsEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeAuthAlgoItemsEnum, v)
	}
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkeAuthAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeAuthAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkeAuthAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.IkeAuthAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.IkeAuthAlgo); i++ {

		// value enum
		if err := o.validateIkeAuthAlgoItemsEnum("ipsecPolicies"+"."+"ikeAuthAlgo"+"."+strconv.Itoa(i), "body", o.IkeAuthAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeCipherAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aes128","aes192","aes256","des","tripledes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeCipherAlgoItemsEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeCipherAlgoItemsEnum, v)
	}
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkeCipherAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkeCipherAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkeCipherAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.IkeCipherAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.IkeCipherAlgo); i++ {

		// value enum
		if err := o.validateIkeCipherAlgoItemsEnum("ipsecPolicies"+"."+"ikeCipherAlgo"+"."+strconv.Itoa(i), "body", o.IkeCipherAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

var getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","prfmd5","prfsha1","prfsha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum = append(getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum, v)
	}
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkePrfAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) validateIkePrfAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.IkePrfAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.IkePrfAlgo); i++ {

		// value enum
		if err := o.validateIkePrfAlgoItemsEnum("ipsecPolicies"+"."+"ikePrfAlgo"+"."+strconv.Itoa(i), "body", o.IkePrfAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this get organization appliance vpn third party v p n peers o k body peers items0 ipsec policies based on context it is used
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies) UnmarshalBinary(b []byte) error {
	var res GetOrganizationApplianceVpnThirdPartyVPNPeersOKBodyPeersItems0IpsecPolicies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
