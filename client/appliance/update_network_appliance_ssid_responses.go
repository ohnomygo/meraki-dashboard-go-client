// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceSsidReader is a Reader for the UpdateNetworkApplianceSsid structure.
type UpdateNetworkApplianceSsidReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceSsidReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceSsidOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceSsidOK creates a UpdateNetworkApplianceSsidOK with default headers values
func NewUpdateNetworkApplianceSsidOK() *UpdateNetworkApplianceSsidOK {
	return &UpdateNetworkApplianceSsidOK{}
}

/*
UpdateNetworkApplianceSsidOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceSsidOK struct {
	Payload *UpdateNetworkApplianceSsidOKBody
}

// IsSuccess returns true when this update network appliance ssid o k response has a 2xx status code
func (o *UpdateNetworkApplianceSsidOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network appliance ssid o k response has a 3xx status code
func (o *UpdateNetworkApplianceSsidOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network appliance ssid o k response has a 4xx status code
func (o *UpdateNetworkApplianceSsidOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network appliance ssid o k response has a 5xx status code
func (o *UpdateNetworkApplianceSsidOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network appliance ssid o k response a status code equal to that given
func (o *UpdateNetworkApplianceSsidOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network appliance ssid o k response
func (o *UpdateNetworkApplianceSsidOK) Code() int {
	return 200
}

func (o *UpdateNetworkApplianceSsidOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/ssids/{number}][%d] updateNetworkApplianceSsidOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceSsidOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/ssids/{number}][%d] updateNetworkApplianceSsidOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceSsidOK) GetPayload() *UpdateNetworkApplianceSsidOKBody {
	return o.Payload
}

func (o *UpdateNetworkApplianceSsidOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkApplianceSsidOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkApplianceSsidBody update network appliance ssid body
// Example: {"authMode":"8021x-radius","defaultVlanId":1,"dhcpEnforcedDeauthentication":{"enabled":true},"enabled":true,"encryptionMode":"wpa","name":"My SSID","psk":"psk","radiusServers":[{"host":"0.0.0.0","port":1000,"secret":"secret"}],"visible":true,"wpaEncryptionMode":"WPA2 only"}
swagger:model UpdateNetworkApplianceSsidBody
*/
type UpdateNetworkApplianceSsidBody struct {

	// The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
	// Enum: [8021x-meraki 8021x-radius open psk]
	AuthMode string `json:"authMode,omitempty"`

	// The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
	DefaultVlanID int64 `json:"defaultVlanId,omitempty"`

	// dhcp enforced deauthentication
	DhcpEnforcedDeauthentication *UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication `json:"dhcpEnforcedDeauthentication,omitempty"`

	// Whether or not the SSID is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
	// Enum: [wep wpa]
	EncryptionMode string `json:"encryptionMode,omitempty"`

	// The name of the SSID.
	Name string `json:"name,omitempty"`

	// The passkey for the SSID. This param is only valid if the authMode is 'psk'.
	Psk string `json:"psk,omitempty"`

	// The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.
	RadiusServers []*UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0 `json:"radiusServers"`

	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible bool `json:"visible,omitempty"`

	// The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' & the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
	// Enum: [WPA1 and WPA2 WPA2 only WPA3 Transition Mode WPA3 only]
	WpaEncryptionMode string `json:"wpaEncryptionMode,omitempty"`
}

// Validate validates this update network appliance ssid body
func (o *UpdateNetworkApplianceSsidBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDhcpEnforcedDeauthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryptionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRadiusServers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWpaEncryptionMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceSsidBodyTypeAuthModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["8021x-meraki","8021x-radius","open","psk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSsidBodyTypeAuthModePropEnum = append(updateNetworkApplianceSsidBodyTypeAuthModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSsidBodyAuthModeNr8021xDashMeraki captures enum value "8021x-meraki"
	UpdateNetworkApplianceSsidBodyAuthModeNr8021xDashMeraki string = "8021x-meraki"

	// UpdateNetworkApplianceSsidBodyAuthModeNr8021xDashRadius captures enum value "8021x-radius"
	UpdateNetworkApplianceSsidBodyAuthModeNr8021xDashRadius string = "8021x-radius"

	// UpdateNetworkApplianceSsidBodyAuthModeOpen captures enum value "open"
	UpdateNetworkApplianceSsidBodyAuthModeOpen string = "open"

	// UpdateNetworkApplianceSsidBodyAuthModePsk captures enum value "psk"
	UpdateNetworkApplianceSsidBodyAuthModePsk string = "psk"
)

// prop value enum
func (o *UpdateNetworkApplianceSsidBody) validateAuthModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSsidBodyTypeAuthModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidBody) validateAuthMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAuthModeEnum("updateNetworkApplianceSsid"+"."+"authMode", "body", o.AuthMode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceSsidBody) validateDhcpEnforcedDeauthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpEnforcedDeauthentication) { // not required
		return nil
	}

	if o.DhcpEnforcedDeauthentication != nil {
		if err := o.DhcpEnforcedDeauthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSsid" + "." + "dhcpEnforcedDeauthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSsid" + "." + "dhcpEnforcedDeauthentication")
			}
			return err
		}
	}

	return nil
}

var updateNetworkApplianceSsidBodyTypeEncryptionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wep","wpa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSsidBodyTypeEncryptionModePropEnum = append(updateNetworkApplianceSsidBodyTypeEncryptionModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSsidBodyEncryptionModeWep captures enum value "wep"
	UpdateNetworkApplianceSsidBodyEncryptionModeWep string = "wep"

	// UpdateNetworkApplianceSsidBodyEncryptionModeWpa captures enum value "wpa"
	UpdateNetworkApplianceSsidBodyEncryptionModeWpa string = "wpa"
)

// prop value enum
func (o *UpdateNetworkApplianceSsidBody) validateEncryptionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSsidBodyTypeEncryptionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidBody) validateEncryptionMode(formats strfmt.Registry) error {
	if swag.IsZero(o.EncryptionMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateEncryptionModeEnum("updateNetworkApplianceSsid"+"."+"encryptionMode", "body", o.EncryptionMode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceSsidBody) validateRadiusServers(formats strfmt.Registry) error {
	if swag.IsZero(o.RadiusServers) { // not required
		return nil
	}

	for i := 0; i < len(o.RadiusServers); i++ {
		if swag.IsZero(o.RadiusServers[i]) { // not required
			continue
		}

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceSsid" + "." + "radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceSsid" + "." + "radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateNetworkApplianceSsidBodyTypeWpaEncryptionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WPA1 and WPA2","WPA2 only","WPA3 Transition Mode","WPA3 only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSsidBodyTypeWpaEncryptionModePropEnum = append(updateNetworkApplianceSsidBodyTypeWpaEncryptionModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA1AndWPA2 captures enum value "WPA1 and WPA2"
	UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA1AndWPA2 string = "WPA1 and WPA2"

	// UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA2Only captures enum value "WPA2 only"
	UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA2Only string = "WPA2 only"

	// UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA3TransitionMode captures enum value "WPA3 Transition Mode"
	UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA3TransitionMode string = "WPA3 Transition Mode"

	// UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA3Only captures enum value "WPA3 only"
	UpdateNetworkApplianceSsidBodyWpaEncryptionModeWPA3Only string = "WPA3 only"
)

// prop value enum
func (o *UpdateNetworkApplianceSsidBody) validateWpaEncryptionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSsidBodyTypeWpaEncryptionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidBody) validateWpaEncryptionMode(formats strfmt.Registry) error {
	if swag.IsZero(o.WpaEncryptionMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateWpaEncryptionModeEnum("updateNetworkApplianceSsid"+"."+"wpaEncryptionMode", "body", o.WpaEncryptionMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update network appliance ssid body based on the context it is used
func (o *UpdateNetworkApplianceSsidBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDhcpEnforcedDeauthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRadiusServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidBody) contextValidateDhcpEnforcedDeauthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.DhcpEnforcedDeauthentication != nil {
		if err := o.DhcpEnforcedDeauthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSsid" + "." + "dhcpEnforcedDeauthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSsid" + "." + "dhcpEnforcedDeauthentication")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkApplianceSsidBody) contextValidateRadiusServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RadiusServers); i++ {

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceSsid" + "." + "radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceSsid" + "." + "radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSsidBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSsidOKBody update network appliance ssid o k body
swagger:model UpdateNetworkApplianceSsidOKBody
*/
type UpdateNetworkApplianceSsidOKBody struct {

	// The association control method for the SSID.
	AuthMode string `json:"authMode,omitempty"`

	// The VLAN ID of the VLAN associated to this SSID.
	DefaultVlanID int64 `json:"defaultVlanId,omitempty"`

	// Whether or not the SSID is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// The psk encryption mode for the SSID.
	EncryptionMode string `json:"encryptionMode,omitempty"`

	// The name of the SSID.
	Name string `json:"name,omitempty"`

	// The number of the SSID.
	Number int64 `json:"number,omitempty"`

	// The RADIUS 802.1x servers to be used for authentication.
	RadiusServers []*UpdateNetworkApplianceSsidOKBodyRadiusServersItems0 `json:"radiusServers"`

	// Boolean indicating whether the MX should advertise or hide this SSID.
	Visible bool `json:"visible,omitempty"`

	// WPA encryption mode for the SSID.
	WpaEncryptionMode string `json:"wpaEncryptionMode,omitempty"`
}

// Validate validates this update network appliance ssid o k body
func (o *UpdateNetworkApplianceSsidOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRadiusServers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidOKBody) validateRadiusServers(formats strfmt.Registry) error {
	if swag.IsZero(o.RadiusServers) { // not required
		return nil
	}

	for i := 0; i < len(o.RadiusServers); i++ {
		if swag.IsZero(o.RadiusServers[i]) { // not required
			continue
		}

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceSsidOK" + "." + "radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceSsidOK" + "." + "radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance ssid o k body based on the context it is used
func (o *UpdateNetworkApplianceSsidOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRadiusServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSsidOKBody) contextValidateRadiusServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RadiusServers); i++ {

		if o.RadiusServers[i] != nil {
			if err := o.RadiusServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceSsidOK" + "." + "radiusServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceSsidOK" + "." + "radiusServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSsidOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSsidOKBodyRadiusServersItems0 update network appliance ssid o k body radius servers items0
swagger:model UpdateNetworkApplianceSsidOKBodyRadiusServersItems0
*/
type UpdateNetworkApplianceSsidOKBodyRadiusServersItems0 struct {

	// The IP address of your RADIUS server.
	Host string `json:"host,omitempty"`

	// The UDP port your RADIUS servers listens on for Access-requests.
	Port int64 `json:"port,omitempty"`
}

// Validate validates this update network appliance ssid o k body radius servers items0
func (o *UpdateNetworkApplianceSsidOKBodyRadiusServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance ssid o k body radius servers items0 based on context it is used
func (o *UpdateNetworkApplianceSsidOKBodyRadiusServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidOKBodyRadiusServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidOKBodyRadiusServersItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSsidOKBodyRadiusServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions >= MX 17.0 where the associated LAN has Mandatory DHCP Enabled
swagger:model UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication
*/
type UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication struct {

	// Enable DCHP Enforced Deauthentication on the SSID.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this update network appliance ssid params body dhcp enforced deauthentication
func (o *UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance ssid params body dhcp enforced deauthentication based on context it is used
func (o *UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSsidParamsBodyDhcpEnforcedDeauthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0 update network appliance ssid params body radius servers items0
swagger:model UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0
*/
type UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0 struct {

	// The IP address of your RADIUS server.
	Host string `json:"host,omitempty"`

	// The UDP port your RADIUS servers listens on for Access-requests.
	Port int64 `json:"port,omitempty"`

	// The RADIUS client shared secret.
	Secret string `json:"secret,omitempty"`
}

// Validate validates this update network appliance ssid params body radius servers items0
func (o *UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance ssid params body radius servers items0 based on context it is used
func (o *UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSsidParamsBodyRadiusServersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
