// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesReader is a Reader for the UpdateNetworkApplianceFirewallInboundCellularFirewallRules structure.
type UpdateNetworkApplianceFirewallInboundCellularFirewallRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK creates a UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK with default headers values
func NewUpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK() *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK {
	return &UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK{}
}

/*
UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK struct {
	Payload []interface{}
}

// IsSuccess returns true when this update network appliance firewall inbound cellular firewall rules o k response has a 2xx status code
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network appliance firewall inbound cellular firewall rules o k response has a 3xx status code
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network appliance firewall inbound cellular firewall rules o k response has a 4xx status code
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network appliance firewall inbound cellular firewall rules o k response has a 5xx status code
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network appliance firewall inbound cellular firewall rules o k response a status code equal to that given
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network appliance firewall inbound cellular firewall rules o k response
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) Code() int {
	return 200
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/firewall/inboundCellularFirewallRules][%d] updateNetworkApplianceFirewallInboundCellularFirewallRulesOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/firewall/inboundCellularFirewallRules][%d] updateNetworkApplianceFirewallInboundCellularFirewallRulesOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody update network appliance firewall inbound cellular firewall rules body
// Example: {"rules":[{"comment":"Allow TCP traffic to subnet with HTTP servers.","destCidr":"192.168.1.0/24","destPort":"443","policy":"allow","protocol":"tcp","srcCidr":"Any","srcPort":"Any","syslogEnabled":false}]}
swagger:model UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody
*/
type UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody struct {

	// An ordered array of the firewall rules (not including the default rule)
	Rules []*UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0 `json:"rules"`
}

// Validate validates this update network appliance firewall inbound cellular firewall rules body
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceFirewallInboundCellularFirewallRules" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceFirewallInboundCellularFirewallRules" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance firewall inbound cellular firewall rules body based on the context it is used
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceFirewallInboundCellularFirewallRules" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceFirewallInboundCellularFirewallRules" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceFirewallInboundCellularFirewallRulesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0 update network appliance firewall inbound cellular firewall rules params body rules items0
swagger:model UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0
*/
type UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0 struct {

	// Description of the rule (optional)
	Comment string `json:"comment,omitempty"`

	// Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
	// Required: true
	DestCidr *string `json:"destCidr"`

	// Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
	DestPort string `json:"destPort,omitempty"`

	// 'allow' or 'deny' traffic specified by this rule
	// Required: true
	// Enum: [allow deny]
	Policy *string `json:"policy"`

	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	// Required: true
	// Enum: [any icmp icmp6 tcp udp]
	Protocol *string `json:"protocol"`

	// Comma-separated list of source IP address(es) (in IP or CIDR notation), or 'any' (note: FQDN not supported for source addresses)
	// Required: true
	SrcCidr *string `json:"srcCidr"`

	// Comma-separated list of source port(s) (integer in the range 1-65535), or 'any'
	SrcPort string `json:"srcPort,omitempty"`

	// Log this rule to syslog (true or false, boolean value) - only applicable if a syslog has been configured (optional)
	SyslogEnabled bool `json:"syslogEnabled,omitempty"`
}

// Validate validates this update network appliance firewall inbound cellular firewall rules params body rules items0
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSrcCidr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validateDestCidr(formats strfmt.Registry) error {

	if err := validate.Required("destCidr", "body", o.DestCidr); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypePolicyPropEnum = append(updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypePolicyPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0PolicyAllow captures enum value "allow"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0PolicyAllow string = "allow"

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0PolicyDeny captures enum value "deny"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0PolicyDeny string = "deny"
)

// prop value enum
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validatePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", o.Policy); err != nil {
		return err
	}

	// value enum
	if err := o.validatePolicyEnum("policy", "body", *o.Policy); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","icmp","icmp6","tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypeProtocolPropEnum = append(updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypeProtocolPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolAny captures enum value "any"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolAny string = "any"

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolIcmp captures enum value "icmp"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolIcmp string = "icmp"

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolIcmp6 captures enum value "icmp6"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolIcmp6 string = "icmp6"

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolTCP captures enum value "tcp"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolTCP string = "tcp"

	// UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolUDP captures enum value "udp"
	UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0ProtocolUDP string = "udp"
)

// prop value enum
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", o.Protocol); err != nil {
		return err
	}

	// value enum
	if err := o.validateProtocolEnum("protocol", "body", *o.Protocol); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) validateSrcCidr(formats strfmt.Registry) error {

	if err := validate.Required("srcCidr", "body", o.SrcCidr); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance firewall inbound cellular firewall rules params body rules items0 based on context it is used
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceFirewallInboundCellularFirewallRulesParamsBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
