// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceSettingsReader is a Reader for the UpdateNetworkApplianceSettings structure.
type UpdateNetworkApplianceSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceSettingsOK creates a UpdateNetworkApplianceSettingsOK with default headers values
func NewUpdateNetworkApplianceSettingsOK() *UpdateNetworkApplianceSettingsOK {
	return &UpdateNetworkApplianceSettingsOK{}
}

/*
UpdateNetworkApplianceSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceSettingsOK struct {
	Payload *UpdateNetworkApplianceSettingsOKBody
}

// IsSuccess returns true when this update network appliance settings o k response has a 2xx status code
func (o *UpdateNetworkApplianceSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network appliance settings o k response has a 3xx status code
func (o *UpdateNetworkApplianceSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network appliance settings o k response has a 4xx status code
func (o *UpdateNetworkApplianceSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network appliance settings o k response has a 5xx status code
func (o *UpdateNetworkApplianceSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network appliance settings o k response a status code equal to that given
func (o *UpdateNetworkApplianceSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network appliance settings o k response
func (o *UpdateNetworkApplianceSettingsOK) Code() int {
	return 200
}

func (o *UpdateNetworkApplianceSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/settings][%d] updateNetworkApplianceSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceSettingsOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/settings][%d] updateNetworkApplianceSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkApplianceSettingsOK) GetPayload() *UpdateNetworkApplianceSettingsOKBody {
	return o.Payload
}

func (o *UpdateNetworkApplianceSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkApplianceSettingsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkApplianceSettingsBody update network appliance settings body
// Example: {"clientTrackingMethod":"MAC address","deploymentMode":"routed","dynamicDns":{"enabled":true,"prefix":"test"}}
swagger:model UpdateNetworkApplianceSettingsBody
*/
type UpdateNetworkApplianceSettingsBody struct {

	// Client tracking method of a network
	// Enum: [IP address MAC address Unique client identifier]
	ClientTrackingMethod string `json:"clientTrackingMethod,omitempty"`

	// Deployment mode of a network
	// Enum: [passthrough routed]
	DeploymentMode string `json:"deploymentMode,omitempty"`

	// dynamic Dns
	DynamicDNS *UpdateNetworkApplianceSettingsParamsBodyDynamicDNS `json:"dynamicDns,omitempty"`
}

// Validate validates this update network appliance settings body
func (o *UpdateNetworkApplianceSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientTrackingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDynamicDNS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceSettingsBodyTypeClientTrackingMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IP address","MAC address","Unique client identifier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSettingsBodyTypeClientTrackingMethodPropEnum = append(updateNetworkApplianceSettingsBodyTypeClientTrackingMethodPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSettingsBodyClientTrackingMethodIPAddress captures enum value "IP address"
	UpdateNetworkApplianceSettingsBodyClientTrackingMethodIPAddress string = "IP address"

	// UpdateNetworkApplianceSettingsBodyClientTrackingMethodMACAddress captures enum value "MAC address"
	UpdateNetworkApplianceSettingsBodyClientTrackingMethodMACAddress string = "MAC address"

	// UpdateNetworkApplianceSettingsBodyClientTrackingMethodUniqueClientIdentifier captures enum value "Unique client identifier"
	UpdateNetworkApplianceSettingsBodyClientTrackingMethodUniqueClientIdentifier string = "Unique client identifier"
)

// prop value enum
func (o *UpdateNetworkApplianceSettingsBody) validateClientTrackingMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSettingsBodyTypeClientTrackingMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsBody) validateClientTrackingMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientTrackingMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validateClientTrackingMethodEnum("updateNetworkApplianceSettings"+"."+"clientTrackingMethod", "body", o.ClientTrackingMethod); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceSettingsBodyTypeDeploymentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["passthrough","routed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSettingsBodyTypeDeploymentModePropEnum = append(updateNetworkApplianceSettingsBodyTypeDeploymentModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSettingsBodyDeploymentModePassthrough captures enum value "passthrough"
	UpdateNetworkApplianceSettingsBodyDeploymentModePassthrough string = "passthrough"

	// UpdateNetworkApplianceSettingsBodyDeploymentModeRouted captures enum value "routed"
	UpdateNetworkApplianceSettingsBodyDeploymentModeRouted string = "routed"
)

// prop value enum
func (o *UpdateNetworkApplianceSettingsBody) validateDeploymentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSettingsBodyTypeDeploymentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsBody) validateDeploymentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.DeploymentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateDeploymentModeEnum("updateNetworkApplianceSettings"+"."+"deploymentMode", "body", o.DeploymentMode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceSettingsBody) validateDynamicDNS(formats strfmt.Registry) error {
	if swag.IsZero(o.DynamicDNS) { // not required
		return nil
	}

	if o.DynamicDNS != nil {
		if err := o.DynamicDNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSettings" + "." + "dynamicDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSettings" + "." + "dynamicDns")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance settings body based on the context it is used
func (o *UpdateNetworkApplianceSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDynamicDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsBody) contextValidateDynamicDNS(ctx context.Context, formats strfmt.Registry) error {

	if o.DynamicDNS != nil {
		if err := o.DynamicDNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSettings" + "." + "dynamicDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSettings" + "." + "dynamicDns")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSettingsOKBody update network appliance settings o k body
swagger:model UpdateNetworkApplianceSettingsOKBody
*/
type UpdateNetworkApplianceSettingsOKBody struct {

	// Client tracking method of a network
	// Enum: [IP address MAC address Unique client identifier]
	ClientTrackingMethod string `json:"clientTrackingMethod,omitempty"`

	// Deployment mode of a network
	// Enum: [passthrough routed]
	DeploymentMode string `json:"deploymentMode,omitempty"`

	// dynamic Dns
	DynamicDNS *UpdateNetworkApplianceSettingsOKBodyDynamicDNS `json:"dynamicDns,omitempty"`
}

// Validate validates this update network appliance settings o k body
func (o *UpdateNetworkApplianceSettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientTrackingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDynamicDNS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceSettingsOKBodyTypeClientTrackingMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IP address","MAC address","Unique client identifier"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSettingsOKBodyTypeClientTrackingMethodPropEnum = append(updateNetworkApplianceSettingsOKBodyTypeClientTrackingMethodPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodIPAddress captures enum value "IP address"
	UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodIPAddress string = "IP address"

	// UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodMACAddress captures enum value "MAC address"
	UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodMACAddress string = "MAC address"

	// UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodUniqueClientIdentifier captures enum value "Unique client identifier"
	UpdateNetworkApplianceSettingsOKBodyClientTrackingMethodUniqueClientIdentifier string = "Unique client identifier"
)

// prop value enum
func (o *UpdateNetworkApplianceSettingsOKBody) validateClientTrackingMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSettingsOKBodyTypeClientTrackingMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsOKBody) validateClientTrackingMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.ClientTrackingMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validateClientTrackingMethodEnum("updateNetworkApplianceSettingsOK"+"."+"clientTrackingMethod", "body", o.ClientTrackingMethod); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceSettingsOKBodyTypeDeploymentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["passthrough","routed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSettingsOKBodyTypeDeploymentModePropEnum = append(updateNetworkApplianceSettingsOKBodyTypeDeploymentModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSettingsOKBodyDeploymentModePassthrough captures enum value "passthrough"
	UpdateNetworkApplianceSettingsOKBodyDeploymentModePassthrough string = "passthrough"

	// UpdateNetworkApplianceSettingsOKBodyDeploymentModeRouted captures enum value "routed"
	UpdateNetworkApplianceSettingsOKBodyDeploymentModeRouted string = "routed"
)

// prop value enum
func (o *UpdateNetworkApplianceSettingsOKBody) validateDeploymentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSettingsOKBodyTypeDeploymentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsOKBody) validateDeploymentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.DeploymentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateDeploymentModeEnum("updateNetworkApplianceSettingsOK"+"."+"deploymentMode", "body", o.DeploymentMode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceSettingsOKBody) validateDynamicDNS(formats strfmt.Registry) error {
	if swag.IsZero(o.DynamicDNS) { // not required
		return nil
	}

	if o.DynamicDNS != nil {
		if err := o.DynamicDNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSettingsOK" + "." + "dynamicDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSettingsOK" + "." + "dynamicDns")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance settings o k body based on the context it is used
func (o *UpdateNetworkApplianceSettingsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDynamicDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSettingsOKBody) contextValidateDynamicDNS(ctx context.Context, formats strfmt.Registry) error {

	if o.DynamicDNS != nil {
		if err := o.DynamicDNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSettingsOK" + "." + "dynamicDns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSettingsOK" + "." + "dynamicDns")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSettingsOKBodyDynamicDNS Dynamic DNS settings for a network
swagger:model UpdateNetworkApplianceSettingsOKBodyDynamicDNS
*/
type UpdateNetworkApplianceSettingsOKBodyDynamicDNS struct {

	// Dynamic DNS enabled
	Enabled bool `json:"enabled,omitempty"`

	// Dynamic DNS url prefix. DDNS must be enabled to update
	Prefix string `json:"prefix,omitempty"`

	// Dynamic DNS url. DDNS must be enabled to update
	URL string `json:"url,omitempty"`
}

// Validate validates this update network appliance settings o k body dynamic DNS
func (o *UpdateNetworkApplianceSettingsOKBodyDynamicDNS) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance settings o k body dynamic DNS based on context it is used
func (o *UpdateNetworkApplianceSettingsOKBodyDynamicDNS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsOKBodyDynamicDNS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsOKBodyDynamicDNS) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSettingsOKBodyDynamicDNS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkApplianceSettingsParamsBodyDynamicDNS Dynamic DNS settings for a network
swagger:model UpdateNetworkApplianceSettingsParamsBodyDynamicDNS
*/
type UpdateNetworkApplianceSettingsParamsBodyDynamicDNS struct {

	// Dynamic DNS enabled
	Enabled bool `json:"enabled,omitempty"`

	// Dynamic DNS url prefix. DDNS must be enabled to update
	Prefix string `json:"prefix,omitempty"`
}

// Validate validates this update network appliance settings params body dynamic DNS
func (o *UpdateNetworkApplianceSettingsParamsBodyDynamicDNS) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance settings params body dynamic DNS based on context it is used
func (o *UpdateNetworkApplianceSettingsParamsBodyDynamicDNS) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsParamsBodyDynamicDNS) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSettingsParamsBodyDynamicDNS) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSettingsParamsBodyDynamicDNS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
