// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkAppliancePortReader is a Reader for the UpdateNetworkAppliancePort structure.
type UpdateNetworkAppliancePortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkAppliancePortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkAppliancePortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkAppliancePortOK creates a UpdateNetworkAppliancePortOK with default headers values
func NewUpdateNetworkAppliancePortOK() *UpdateNetworkAppliancePortOK {
	return &UpdateNetworkAppliancePortOK{}
}

/*
UpdateNetworkAppliancePortOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkAppliancePortOK struct {
	Payload *UpdateNetworkAppliancePortOKBody
}

// IsSuccess returns true when this update network appliance port o k response has a 2xx status code
func (o *UpdateNetworkAppliancePortOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update network appliance port o k response has a 3xx status code
func (o *UpdateNetworkAppliancePortOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update network appliance port o k response has a 4xx status code
func (o *UpdateNetworkAppliancePortOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update network appliance port o k response has a 5xx status code
func (o *UpdateNetworkAppliancePortOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update network appliance port o k response a status code equal to that given
func (o *UpdateNetworkAppliancePortOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update network appliance port o k response
func (o *UpdateNetworkAppliancePortOK) Code() int {
	return 200
}

func (o *UpdateNetworkAppliancePortOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/ports/{portId}][%d] updateNetworkAppliancePortOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkAppliancePortOK) String() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/ports/{portId}][%d] updateNetworkAppliancePortOK  %+v", 200, o.Payload)
}

func (o *UpdateNetworkAppliancePortOK) GetPayload() *UpdateNetworkAppliancePortOKBody {
	return o.Payload
}

func (o *UpdateNetworkAppliancePortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateNetworkAppliancePortOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateNetworkAppliancePortBody update network appliance port body
// Example: {"accessPolicy":"open","allowedVlans":"all","dropUntaggedTraffic":false,"enabled":true,"type":"access","vlan":3}
swagger:model UpdateNetworkAppliancePortBody
*/
type UpdateNetworkAppliancePortBody struct {

	// The name of the policy. Only applicable to Access ports. Valid values are: 'open', '8021x-radius', 'mac-radius', 'hybris-radius' for MX64 or Z3 or any MX supporting the per port authentication feature. Otherwise, 'open' is the only valid value and 'open' is the default value if the field is missing.
	AccessPolicy string `json:"accessPolicy,omitempty"`

	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// Trunk port can Drop all Untagged traffic. When true, no VLAN is required. Access ports cannot have dropUntaggedTraffic set to true.
	DropUntaggedTraffic bool `json:"dropUntaggedTraffic,omitempty"`

	// The status of the port
	Enabled bool `json:"enabled,omitempty"`

	// The type of the port: 'access' or 'trunk'.
	Type string `json:"type,omitempty"`

	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this update network appliance port body
func (o *UpdateNetworkAppliancePortBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance port body based on context it is used
func (o *UpdateNetworkAppliancePortBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkAppliancePortBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkAppliancePortBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkAppliancePortBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateNetworkAppliancePortOKBody update network appliance port o k body
swagger:model UpdateNetworkAppliancePortOKBody
*/
type UpdateNetworkAppliancePortOKBody struct {

	// The name of the policy. Only applicable to Access ports.
	AccessPolicy string `json:"accessPolicy,omitempty"`

	// Comma-delimited list of the VLAN ID's allowed on the port, or 'all' to permit all VLAN's on the port.
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// Whether the trunk port can drop all untagged traffic.
	DropUntaggedTraffic bool `json:"dropUntaggedTraffic,omitempty"`

	// The status of the port
	Enabled bool `json:"enabled,omitempty"`

	// Number of the port
	Number int64 `json:"number,omitempty"`

	// The type of the port: 'access' or 'trunk'.
	Type string `json:"type,omitempty"`

	// Native VLAN when the port is in Trunk mode. Access VLAN when the port is in Access mode.
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this update network appliance port o k body
func (o *UpdateNetworkAppliancePortOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance port o k body based on context it is used
func (o *UpdateNetworkAppliancePortOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkAppliancePortOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkAppliancePortOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkAppliancePortOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
