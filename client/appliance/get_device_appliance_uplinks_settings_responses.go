// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeviceApplianceUplinksSettingsReader is a Reader for the GetDeviceApplianceUplinksSettings structure.
type GetDeviceApplianceUplinksSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceApplianceUplinksSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceApplianceUplinksSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceApplianceUplinksSettingsOK creates a GetDeviceApplianceUplinksSettingsOK with default headers values
func NewGetDeviceApplianceUplinksSettingsOK() *GetDeviceApplianceUplinksSettingsOK {
	return &GetDeviceApplianceUplinksSettingsOK{}
}

/*
GetDeviceApplianceUplinksSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceApplianceUplinksSettingsOK struct {
	Payload *GetDeviceApplianceUplinksSettingsOKBody
}

// IsSuccess returns true when this get device appliance uplinks settings o k response has a 2xx status code
func (o *GetDeviceApplianceUplinksSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get device appliance uplinks settings o k response has a 3xx status code
func (o *GetDeviceApplianceUplinksSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get device appliance uplinks settings o k response has a 4xx status code
func (o *GetDeviceApplianceUplinksSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get device appliance uplinks settings o k response has a 5xx status code
func (o *GetDeviceApplianceUplinksSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get device appliance uplinks settings o k response a status code equal to that given
func (o *GetDeviceApplianceUplinksSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get device appliance uplinks settings o k response
func (o *GetDeviceApplianceUplinksSettingsOK) Code() int {
	return 200
}

func (o *GetDeviceApplianceUplinksSettingsOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/appliance/uplinks/settings][%d] getDeviceApplianceUplinksSettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceApplianceUplinksSettingsOK) String() string {
	return fmt.Sprintf("[GET /devices/{serial}/appliance/uplinks/settings][%d] getDeviceApplianceUplinksSettingsOK  %+v", 200, o.Payload)
}

func (o *GetDeviceApplianceUplinksSettingsOK) GetPayload() *GetDeviceApplianceUplinksSettingsOKBody {
	return o.Payload
}

func (o *GetDeviceApplianceUplinksSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDeviceApplianceUplinksSettingsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBody get device appliance uplinks settings o k body
swagger:model GetDeviceApplianceUplinksSettingsOKBody
*/
type GetDeviceApplianceUplinksSettingsOKBody struct {

	// interfaces
	Interfaces *GetDeviceApplianceUplinksSettingsOKBodyInterfaces `json:"interfaces,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body
func (o *GetDeviceApplianceUplinksSettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBody) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(o.Interfaces) { // not required
		return nil
	}

	if o.Interfaces != nil {
		if err := o.Interfaces.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBody) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	if o.Interfaces != nil {
		if err := o.Interfaces.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBody) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfaces Interface settings.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfaces
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfaces struct {

	// wan1
	Wan1 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1 `json:"wan1,omitempty"`

	// wan2
	Wan2 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2 `json:"wan2,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWan1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWan2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) validateWan1(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan1) { // not required
		return nil
	}

	if o.Wan1 != nil {
		if err := o.Wan1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) validateWan2(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan2) { // not required
		return nil
	}

	if o.Wan2 != nil {
		if err := o.Wan2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWan1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWan2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) contextValidateWan1(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan1 != nil {
		if err := o.Wan1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) contextValidateWan2(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan2 != nil {
		if err := o.Wan2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfaces) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfaces
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1 WAN 1 settings.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1 struct {

	// Enable or disable the interface.
	Enabled bool `json:"enabled,omitempty"`

	// pppoe
	Pppoe *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe `json:"pppoe,omitempty"`

	// svis
	Svis *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis `json:"svis,omitempty"`

	// vlan tagging
	VlanTagging *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging `json:"vlanTagging,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePppoe(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSvis(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVlanTagging(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) validatePppoe(formats strfmt.Registry) error {
	if swag.IsZero(o.Pppoe) { // not required
		return nil
	}

	if o.Pppoe != nil {
		if err := o.Pppoe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) validateSvis(formats strfmt.Registry) error {
	if swag.IsZero(o.Svis) { // not required
		return nil
	}

	if o.Svis != nil {
		if err := o.Svis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) validateVlanTagging(formats strfmt.Registry) error {
	if swag.IsZero(o.VlanTagging) { // not required
		return nil
	}

	if o.VlanTagging != nil {
		if err := o.VlanTagging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "vlanTagging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "vlanTagging")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan1 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePppoe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSvis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVlanTagging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) contextValidatePppoe(ctx context.Context, formats strfmt.Registry) error {

	if o.Pppoe != nil {
		if err := o.Pppoe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) contextValidateSvis(ctx context.Context, formats strfmt.Registry) error {

	if o.Svis != nil {
		if err := o.Svis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) contextValidateVlanTagging(ctx context.Context, formats strfmt.Registry) error {

	if o.VlanTagging != nil {
		if err := o.VlanTagging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "vlanTagging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "vlanTagging")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe Configuration options for PPPoE.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe struct {

	// authentication
	Authentication *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication `json:"authentication,omitempty"`

	// Whether PPPoE is enabled.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 pppoe
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.Authentication) { // not required
		return nil
	}

	if o.Authentication != nil {
		if err := o.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan1 pppoe based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.Authentication != nil {
		if err := o.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "pppoe" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Pppoe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication Settings for PPPoE Authentication.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication struct {

	// Whether PPPoE authentication is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Username for PPPoE authentication.
	Username string `json:"username,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 pppoe authentication
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan1 pppoe authentication based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1PppoeAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis SVI settings by protocol.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis struct {

	// ipv4
	IPV4 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4 `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6 `json:"ipv6,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 svis
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV6) { // not required
		return nil
	}

	if o.IPV6 != nil {
		if err := o.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan1 svis based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV6 != nil {
		if err := o.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1Svis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4 IPv4 settings for static/dynamic mode.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4 struct {

	// IP address and subnet mask when in static mode.
	Address string `json:"address,omitempty"`

	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	// Enum: [dynamic static]
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// Gateway IP address when in static mode.
	Gateway string `json:"gateway,omitempty"`

	// nameservers
	Nameservers *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers `json:"nameservers,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v4
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV4TypeAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV4TypeAssignmentModePropEnum = append(getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV4TypeAssignmentModePropEnum, v)
	}
}

const (

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4AssignmentModeDynamic captures enum value "dynamic"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4AssignmentModeDynamic string = "dynamic"

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4AssignmentModeStatic captures enum value "static"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4AssignmentModeStatic string = "static"
)

// prop value enum
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) validateAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV4TypeAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) validateAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAssignmentModeEnum("getDeviceApplianceUplinksSettingsOK"+"."+"interfaces"+"."+"wan1"+"."+"svis"+"."+"ipv4"+"."+"assignmentMode", "body", o.AssignmentMode); err != nil {
		return err
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) validateNameservers(formats strfmt.Registry) error {
	if swag.IsZero(o.Nameservers) { // not required
		return nil
	}

	if o.Nameservers != nil {
		if err := o.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan1 svis IP v4 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNameservers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) contextValidateNameservers(ctx context.Context, formats strfmt.Registry) error {

	if o.Nameservers != nil {
		if err := o.Nameservers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers The nameserver settings for this SVI.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers struct {

	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v4 nameservers
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v4 nameservers based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV4Nameservers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6 IPv6 settings for static/dynamic mode.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6 struct {

	// Static address that will override the one(s) received by SLAAC.
	Address string `json:"address,omitempty"`

	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	// Enum: [dynamic static]
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// Static gateway that will override the one received by autoconf.
	Gateway string `json:"gateway,omitempty"`

	// nameservers
	Nameservers *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers `json:"nameservers,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v6
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV6TypeAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV6TypeAssignmentModePropEnum = append(getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV6TypeAssignmentModePropEnum, v)
	}
}

const (

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6AssignmentModeDynamic captures enum value "dynamic"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6AssignmentModeDynamic string = "dynamic"

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6AssignmentModeStatic captures enum value "static"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6AssignmentModeStatic string = "static"
)

// prop value enum
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) validateAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIpV6TypeAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) validateAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAssignmentModeEnum("getDeviceApplianceUplinksSettingsOK"+"."+"interfaces"+"."+"wan1"+"."+"svis"+"."+"ipv6"+"."+"assignmentMode", "body", o.AssignmentMode); err != nil {
		return err
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) validateNameservers(formats strfmt.Registry) error {
	if swag.IsZero(o.Nameservers) { // not required
		return nil
	}

	if o.Nameservers != nil {
		if err := o.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan1 svis IP v6 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNameservers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) contextValidateNameservers(ctx context.Context, formats strfmt.Registry) error {

	if o.Nameservers != nil {
		if err := o.Nameservers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan1" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers The nameserver settings for this SVI.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers struct {

	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v6 nameservers
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan1 svis IP v6 nameservers based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1SvisIPV6Nameservers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging VLAN tagging settings.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging struct {

	// Whether VLAN tagging is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// The ID of the VLAN to use for VLAN tagging.
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan1 vlan tagging
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan1 vlan tagging based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan1VlanTagging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2 WAN 2 settings.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2 struct {

	// Enable or disable the interface.
	Enabled bool `json:"enabled,omitempty"`

	// pppoe
	Pppoe *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe `json:"pppoe,omitempty"`

	// svis
	Svis *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis `json:"svis,omitempty"`

	// vlan tagging
	VlanTagging *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging `json:"vlanTagging,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePppoe(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSvis(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVlanTagging(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) validatePppoe(formats strfmt.Registry) error {
	if swag.IsZero(o.Pppoe) { // not required
		return nil
	}

	if o.Pppoe != nil {
		if err := o.Pppoe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) validateSvis(formats strfmt.Registry) error {
	if swag.IsZero(o.Svis) { // not required
		return nil
	}

	if o.Svis != nil {
		if err := o.Svis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) validateVlanTagging(formats strfmt.Registry) error {
	if swag.IsZero(o.VlanTagging) { // not required
		return nil
	}

	if o.VlanTagging != nil {
		if err := o.VlanTagging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "vlanTagging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "vlanTagging")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan2 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePppoe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSvis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVlanTagging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) contextValidatePppoe(ctx context.Context, formats strfmt.Registry) error {

	if o.Pppoe != nil {
		if err := o.Pppoe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) contextValidateSvis(ctx context.Context, formats strfmt.Registry) error {

	if o.Svis != nil {
		if err := o.Svis.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) contextValidateVlanTagging(ctx context.Context, formats strfmt.Registry) error {

	if o.VlanTagging != nil {
		if err := o.VlanTagging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "vlanTagging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "vlanTagging")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe Configuration options for PPPoE.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe struct {

	// authentication
	Authentication *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication `json:"authentication,omitempty"`

	// Whether PPPoE is enabled.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 pppoe
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.Authentication) { // not required
		return nil
	}

	if o.Authentication != nil {
		if err := o.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan2 pppoe based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.Authentication != nil {
		if err := o.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "pppoe" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Pppoe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication Settings for PPPoE Authentication.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication struct {

	// Whether PPPoE authentication is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Username for PPPoE authentication.
	Username string `json:"username,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 pppoe authentication
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan2 pppoe authentication based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2PppoeAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis SVI settings by protocol.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis struct {

	// ipv4
	IPV4 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4 `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6 `json:"ipv6,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 svis
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPV4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPV6(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) validateIPV4(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV4) { // not required
		return nil
	}

	if o.IPV4 != nil {
		if err := o.IPV4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) validateIPV6(formats strfmt.Registry) error {
	if swag.IsZero(o.IPV6) { // not required
		return nil
	}

	if o.IPV6 != nil {
		if err := o.IPV6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan2 svis based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIPV4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIPV6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) contextValidateIPV4(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV4 != nil {
		if err := o.IPV4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4")
			}
			return err
		}
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) contextValidateIPV6(ctx context.Context, formats strfmt.Registry) error {

	if o.IPV6 != nil {
		if err := o.IPV6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2Svis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4 IPv4 settings for static/dynamic mode.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4 struct {

	// IP address and subnet mask when in static mode.
	Address string `json:"address,omitempty"`

	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	// Enum: [dynamic static]
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// Gateway IP address when in static mode.
	Gateway string `json:"gateway,omitempty"`

	// nameservers
	Nameservers *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers `json:"nameservers,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v4
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV4TypeAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV4TypeAssignmentModePropEnum = append(getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV4TypeAssignmentModePropEnum, v)
	}
}

const (

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4AssignmentModeDynamic captures enum value "dynamic"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4AssignmentModeDynamic string = "dynamic"

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4AssignmentModeStatic captures enum value "static"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4AssignmentModeStatic string = "static"
)

// prop value enum
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) validateAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV4TypeAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) validateAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAssignmentModeEnum("getDeviceApplianceUplinksSettingsOK"+"."+"interfaces"+"."+"wan2"+"."+"svis"+"."+"ipv4"+"."+"assignmentMode", "body", o.AssignmentMode); err != nil {
		return err
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) validateNameservers(formats strfmt.Registry) error {
	if swag.IsZero(o.Nameservers) { // not required
		return nil
	}

	if o.Nameservers != nil {
		if err := o.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan2 svis IP v4 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNameservers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) contextValidateNameservers(ctx context.Context, formats strfmt.Registry) error {

	if o.Nameservers != nil {
		if err := o.Nameservers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv4" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers The nameserver settings for this SVI.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers struct {

	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v4 nameservers
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v4 nameservers based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV4Nameservers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6 IPv6 settings for static/dynamic mode.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6 struct {

	// Static address that will override the one(s) received by SLAAC.
	Address string `json:"address,omitempty"`

	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	// Enum: [dynamic static]
	AssignmentMode string `json:"assignmentMode,omitempty"`

	// Static gateway that will override the one received by autoconf.
	Gateway string `json:"gateway,omitempty"`

	// nameservers
	Nameservers *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers `json:"nameservers,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v6
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV6TypeAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV6TypeAssignmentModePropEnum = append(getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV6TypeAssignmentModePropEnum, v)
	}
}

const (

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6AssignmentModeDynamic captures enum value "dynamic"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6AssignmentModeDynamic string = "dynamic"

	// GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6AssignmentModeStatic captures enum value "static"
	GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6AssignmentModeStatic string = "static"
)

// prop value enum
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) validateAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIpV6TypeAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) validateAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.AssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateAssignmentModeEnum("getDeviceApplianceUplinksSettingsOK"+"."+"interfaces"+"."+"wan2"+"."+"svis"+"."+"ipv6"+"."+"assignmentMode", "body", o.AssignmentMode); err != nil {
		return err
	}

	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) validateNameservers(formats strfmt.Registry) error {
	if swag.IsZero(o.Nameservers) { // not required
		return nil
	}

	if o.Nameservers != nil {
		if err := o.Nameservers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get device appliance uplinks settings o k body interfaces wan2 svis IP v6 based on the context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNameservers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) contextValidateNameservers(ctx context.Context, formats strfmt.Registry) error {

	if o.Nameservers != nil {
		if err := o.Nameservers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDeviceApplianceUplinksSettingsOK" + "." + "interfaces" + "." + "wan2" + "." + "svis" + "." + "ipv6" + "." + "nameservers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers The nameserver settings for this SVI.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers struct {

	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v6 nameservers
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan2 svis IP v6 nameservers based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2SvisIPV6Nameservers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging VLAN tagging settings.
swagger:model GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging
*/
type GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging struct {

	// Whether VLAN tagging is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// The ID of the VLAN to use for VLAN tagging.
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this get device appliance uplinks settings o k body interfaces wan2 vlan tagging
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get device appliance uplinks settings o k body interfaces wan2 vlan tagging based on context it is used
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging) UnmarshalBinary(b []byte) error {
	var res GetDeviceApplianceUplinksSettingsOKBodyInterfacesWan2VlanTagging
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
