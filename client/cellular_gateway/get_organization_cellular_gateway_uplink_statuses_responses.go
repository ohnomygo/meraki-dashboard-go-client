// Code generated by go-swagger; DO NOT EDIT.

package cellular_gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOrganizationCellularGatewayUplinkStatusesReader is a Reader for the GetOrganizationCellularGatewayUplinkStatuses structure.
type GetOrganizationCellularGatewayUplinkStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganizationCellularGatewayUplinkStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrganizationCellularGatewayUplinkStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrganizationCellularGatewayUplinkStatusesOK creates a GetOrganizationCellularGatewayUplinkStatusesOK with default headers values
func NewGetOrganizationCellularGatewayUplinkStatusesOK() *GetOrganizationCellularGatewayUplinkStatusesOK {
	return &GetOrganizationCellularGatewayUplinkStatusesOK{}
}

/*
GetOrganizationCellularGatewayUplinkStatusesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOrganizationCellularGatewayUplinkStatusesOK struct {

	/* A comma-separated list of first, last, prev, and next relative links used for subsequent paginated requests.
	 */
	Link string

	Payload []*GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0
}

// IsSuccess returns true when this get organization cellular gateway uplink statuses o k response has a 2xx status code
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get organization cellular gateway uplink statuses o k response has a 3xx status code
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get organization cellular gateway uplink statuses o k response has a 4xx status code
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get organization cellular gateway uplink statuses o k response has a 5xx status code
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get organization cellular gateway uplink statuses o k response a status code equal to that given
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get organization cellular gateway uplink statuses o k response
func (o *GetOrganizationCellularGatewayUplinkStatusesOK) Code() int {
	return 200
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/cellularGateway/uplink/statuses][%d] getOrganizationCellularGatewayUplinkStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOK) String() string {
	return fmt.Sprintf("[GET /organizations/{organizationId}/cellularGateway/uplink/statuses][%d] getOrganizationCellularGatewayUplinkStatusesOK  %+v", 200, o.Payload)
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOK) GetPayload() []*GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0 {
	return o.Payload
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0 get organization cellular gateway uplink statuses o k body items0
swagger:model GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0
*/
type GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0 struct {

	// Last reported time for the device
	// Format: date-time
	LastReportedAt strfmt.DateTime `json:"lastReportedAt,omitempty"`

	// Device model
	Model string `json:"model,omitempty"`

	// Network Id
	NetworkID string `json:"networkId,omitempty"`

	// Serial number of the device
	Serial string `json:"serial,omitempty"`

	// Uplinks info
	Uplinks []*GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0 `json:"uplinks"`
}

// Validate validates this get organization cellular gateway uplink statuses o k body items0
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLastReportedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUplinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) validateLastReportedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.LastReportedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastReportedAt", "body", "date-time", o.LastReportedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) validateUplinks(formats strfmt.Registry) error {
	if swag.IsZero(o.Uplinks) { // not required
		return nil
	}

	for i := 0; i < len(o.Uplinks); i++ {
		if swag.IsZero(o.Uplinks[i]) { // not required
			continue
		}

		if o.Uplinks[i] != nil {
			if err := o.Uplinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get organization cellular gateway uplink statuses o k body items0 based on the context it is used
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUplinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) contextValidateUplinks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Uplinks); i++ {

		if o.Uplinks[i] != nil {
			if err := o.Uplinks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uplinks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uplinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0 get organization cellular gateway uplink statuses o k body items0 uplinks items0
swagger:model GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0
*/
type GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0 struct {

	// Access Point Name
	Apn string `json:"apn,omitempty"`

	// Connection Type
	ConnectionType string `json:"connectionType,omitempty"`

	// Primary DNS IP
	Dns1 string `json:"dns1,omitempty"`

	// Secondary DNS IP
	Dns2 string `json:"dns2,omitempty"`

	// Gateway IP
	Gateway string `json:"gateway,omitempty"`

	// Integrated Circuit Card Identification Number
	Iccid string `json:"iccid,omitempty"`

	// Uplink interface
	Interface string `json:"interface,omitempty"`

	// Uplink IP
	IP string `json:"ip,omitempty"`

	// Uplink model
	Model string `json:"model,omitempty"`

	// Network Provider
	Provider string `json:"provider,omitempty"`

	// Public IP
	PublicIP string `json:"publicIp,omitempty"`

	// signal stat
	SignalStat *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat `json:"signalStat,omitempty"`

	// Signal Type
	SignalType string `json:"signalType,omitempty"`

	// Uplink status
	Status string `json:"status,omitempty"`
}

// Validate validates this get organization cellular gateway uplink statuses o k body items0 uplinks items0
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSignalStat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) validateSignalStat(formats strfmt.Registry) error {
	if swag.IsZero(o.SignalStat) { // not required
		return nil
	}

	if o.SignalStat != nil {
		if err := o.SignalStat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signalStat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signalStat")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get organization cellular gateway uplink statuses o k body items0 uplinks items0 based on the context it is used
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSignalStat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) contextValidateSignalStat(ctx context.Context, formats strfmt.Registry) error {

	if o.SignalStat != nil {
		if err := o.SignalStat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signalStat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signalStat")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0) UnmarshalBinary(b []byte) error {
	var res GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat Tower Signal Status
swagger:model GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat
*/
type GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat struct {

	// Reference Signal Received Power
	Rsrp string `json:"rsrp,omitempty"`

	// Reference Signal Received Quality
	Rsrq string `json:"rsrq,omitempty"`
}

// Validate validates this get organization cellular gateway uplink statuses o k body items0 uplinks items0 signal stat
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get organization cellular gateway uplink statuses o k body items0 uplinks items0 signal stat based on context it is used
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat) UnmarshalBinary(b []byte) error {
	var res GetOrganizationCellularGatewayUplinkStatusesOKBodyItems0UplinksItems0SignalStat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
