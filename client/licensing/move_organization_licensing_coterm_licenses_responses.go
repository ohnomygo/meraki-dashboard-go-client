// Code generated by go-swagger; DO NOT EDIT.

package licensing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveOrganizationLicensingCotermLicensesReader is a Reader for the MoveOrganizationLicensingCotermLicenses structure.
type MoveOrganizationLicensingCotermLicensesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveOrganizationLicensingCotermLicensesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveOrganizationLicensingCotermLicensesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveOrganizationLicensingCotermLicensesOK creates a MoveOrganizationLicensingCotermLicensesOK with default headers values
func NewMoveOrganizationLicensingCotermLicensesOK() *MoveOrganizationLicensingCotermLicensesOK {
	return &MoveOrganizationLicensingCotermLicensesOK{}
}

/*
MoveOrganizationLicensingCotermLicensesOK describes a response with status code 200, with default header values.

Successful operation
*/
type MoveOrganizationLicensingCotermLicensesOK struct {
	Payload *MoveOrganizationLicensingCotermLicensesOKBody
}

// IsSuccess returns true when this move organization licensing coterm licenses o k response has a 2xx status code
func (o *MoveOrganizationLicensingCotermLicensesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this move organization licensing coterm licenses o k response has a 3xx status code
func (o *MoveOrganizationLicensingCotermLicensesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this move organization licensing coterm licenses o k response has a 4xx status code
func (o *MoveOrganizationLicensingCotermLicensesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this move organization licensing coterm licenses o k response has a 5xx status code
func (o *MoveOrganizationLicensingCotermLicensesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this move organization licensing coterm licenses o k response a status code equal to that given
func (o *MoveOrganizationLicensingCotermLicensesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the move organization licensing coterm licenses o k response
func (o *MoveOrganizationLicensingCotermLicensesOK) Code() int {
	return 200
}

func (o *MoveOrganizationLicensingCotermLicensesOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/licensing/coterm/licenses/move][%d] moveOrganizationLicensingCotermLicensesOK  %+v", 200, o.Payload)
}

func (o *MoveOrganizationLicensingCotermLicensesOK) String() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/licensing/coterm/licenses/move][%d] moveOrganizationLicensingCotermLicensesOK  %+v", 200, o.Payload)
}

func (o *MoveOrganizationLicensingCotermLicensesOK) GetPayload() *MoveOrganizationLicensingCotermLicensesOKBody {
	return o.Payload
}

func (o *MoveOrganizationLicensingCotermLicensesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MoveOrganizationLicensingCotermLicensesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
MoveOrganizationLicensingCotermLicensesBody move organization licensing coterm licenses body
// Example: {"destination":{"mode":"addDevices","organizationId":"123"},"licenses":[{"counts":[{"count":5,"model":"MR Enterprise"}],"key":"Z2AA-BBBB-CCCC"}]}
swagger:model MoveOrganizationLicensingCotermLicensesBody
*/
type MoveOrganizationLicensingCotermLicensesBody struct {

	// destination
	// Required: true
	Destination *MoveOrganizationLicensingCotermLicensesParamsBodyDestination `json:"destination"`

	// The list of licenses to move
	// Required: true
	Licenses []*MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0 `json:"licenses"`
}

// Validate validates this move organization licensing coterm licenses body
func (o *MoveOrganizationLicensingCotermLicensesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesBody) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("moveOrganizationLicensingCotermLicenses"+"."+"destination", "body", o.Destination); err != nil {
		return err
	}

	if o.Destination != nil {
		if err := o.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "destination")
			}
			return err
		}
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesBody) validateLicenses(formats strfmt.Registry) error {

	if err := validate.Required("moveOrganizationLicensingCotermLicenses"+"."+"licenses", "body", o.Licenses); err != nil {
		return err
	}

	for i := 0; i < len(o.Licenses); i++ {
		if swag.IsZero(o.Licenses[i]) { // not required
			continue
		}

		if o.Licenses[i] != nil {
			if err := o.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "licenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this move organization licensing coterm licenses body based on the context it is used
func (o *MoveOrganizationLicensingCotermLicensesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesBody) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.Destination != nil {
		if err := o.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "destination")
			}
			return err
		}
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesBody) contextValidateLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Licenses); i++ {

		if o.Licenses[i] != nil {
			if err := o.Licenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "licenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicenses" + "." + "licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesBody) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBody move organization licensing coterm licenses o k body
swagger:model MoveOrganizationLicensingCotermLicensesOKBody
*/
type MoveOrganizationLicensingCotermLicensesOKBody struct {

	// Newly moved licenses created in the destination organization of the license move operation
	MovedLicenses []*MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0 `json:"movedLicenses"`

	// Remainder licenses created in the source organization as a result of moving a subset of the counts of a license
	RemainderLicenses []*MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0 `json:"remainderLicenses"`
}

// Validate validates this move organization licensing coterm licenses o k body
func (o *MoveOrganizationLicensingCotermLicensesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMovedLicenses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRemainderLicenses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBody) validateMovedLicenses(formats strfmt.Registry) error {
	if swag.IsZero(o.MovedLicenses) { // not required
		return nil
	}

	for i := 0; i < len(o.MovedLicenses); i++ {
		if swag.IsZero(o.MovedLicenses[i]) { // not required
			continue
		}

		if o.MovedLicenses[i] != nil {
			if err := o.MovedLicenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "movedLicenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "movedLicenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBody) validateRemainderLicenses(formats strfmt.Registry) error {
	if swag.IsZero(o.RemainderLicenses) { // not required
		return nil
	}

	for i := 0; i < len(o.RemainderLicenses); i++ {
		if swag.IsZero(o.RemainderLicenses[i]) { // not required
			continue
		}

		if o.RemainderLicenses[i] != nil {
			if err := o.RemainderLicenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "remainderLicenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "remainderLicenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this move organization licensing coterm licenses o k body based on the context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMovedLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRemainderLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBody) contextValidateMovedLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MovedLicenses); i++ {

		if o.MovedLicenses[i] != nil {
			if err := o.MovedLicenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "movedLicenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "movedLicenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBody) contextValidateRemainderLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RemainderLicenses); i++ {

		if o.RemainderLicenses[i] != nil {
			if err := o.RemainderLicenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "remainderLicenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("moveOrganizationLicensingCotermLicensesOK" + "." + "remainderLicenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBody) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0 move organization licensing coterm licenses o k body moved licenses items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0 struct {

	// When the license was claimed into the organization
	// Format: date-time
	ClaimedAt strfmt.DateTime `json:"claimedAt,omitempty"`

	// The counts of the license by model type
	Counts []*MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0 `json:"counts"`

	// The duration (term length) of the license, measured in days
	Duration int64 `json:"duration,omitempty"`

	// The editions of the license for each relevant product type
	Editions []*MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0 `json:"editions"`

	// Flag to indicate if the license is expired
	Expired bool `json:"expired,omitempty"`

	// Flag to indicated that the license is invalidated
	Invalidated bool `json:"invalidated,omitempty"`

	// When the license was invalidated. Will be null for active licenses
	// Format: date-time
	InvalidatedAt strfmt.DateTime `json:"invalidatedAt,omitempty"`

	// The key of the license
	Key string `json:"key,omitempty"`

	// The operation mode of the license when it was claimed
	// Enum: [addDevices renew]
	Mode string `json:"mode,omitempty"`

	// The ID of the organization that the license is claimed in
	OrganizationID string `json:"organizationId,omitempty"`

	// When the license's term began (approximately the date when the license was created)
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body moved licenses items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClaimedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvalidatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateClaimedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.ClaimedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("claimedAt", "body", "date-time", o.ClaimedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateCounts(formats strfmt.Registry) error {
	if swag.IsZero(o.Counts) { // not required
		return nil
	}

	for i := 0; i < len(o.Counts); i++ {
		if swag.IsZero(o.Counts[i]) { // not required
			continue
		}

		if o.Counts[i] != nil {
			if err := o.Counts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateEditions(formats strfmt.Registry) error {
	if swag.IsZero(o.Editions) { // not required
		return nil
	}

	for i := 0; i < len(o.Editions); i++ {
		if swag.IsZero(o.Editions[i]) { // not required
			continue
		}

		if o.Editions[i] != nil {
			if err := o.Editions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateInvalidatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.InvalidatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("invalidatedAt", "body", "date-time", o.InvalidatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var moveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["addDevices","renew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0TypeModePropEnum = append(moveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0TypeModePropEnum, v)
	}
}

const (

	// MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0ModeAddDevices captures enum value "addDevices"
	MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0ModeAddDevices string = "addDevices"

	// MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0ModeRenew captures enum value "renew"
	MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0ModeRenew string = "renew"
)

// prop value enum
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, moveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0TypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", o.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move organization licensing coterm licenses o k body moved licenses items0 based on the context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Counts); i++ {

		if o.Counts[i] != nil {
			if err := o.Counts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) contextValidateEditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Editions); i++ {

		if o.Editions[i] != nil {
			if err := o.Editions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0 move organization licensing coterm licenses o k body moved licenses items0 counts items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0 struct {

	// The number of counts the license contains of this model
	Count int64 `json:"count,omitempty"`

	// The license model type
	Model string `json:"model,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body moved licenses items0 counts items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move organization licensing coterm licenses o k body moved licenses items0 counts items0 based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0CountsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0 move organization licensing coterm licenses o k body moved licenses items0 editions items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0 struct {

	// The name of the license edition
	Edition string `json:"edition,omitempty"`

	// The product type of the license edition
	ProductType string `json:"productType,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body moved licenses items0 editions items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move organization licensing coterm licenses o k body moved licenses items0 editions items0 based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyMovedLicensesItems0EditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0 move organization licensing coterm licenses o k body remainder licenses items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0 struct {

	// When the license was claimed into the organization
	// Format: date-time
	ClaimedAt strfmt.DateTime `json:"claimedAt,omitempty"`

	// The counts of the license by model type
	Counts []*MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0 `json:"counts"`

	// The duration (term length) of the license, measured in days
	Duration int64 `json:"duration,omitempty"`

	// The editions of the license for each relevant product type
	Editions []*MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0 `json:"editions"`

	// Flag to indicate if the license is expired
	Expired bool `json:"expired,omitempty"`

	// Flag to indicated that the license is invalidated
	Invalidated bool `json:"invalidated,omitempty"`

	// When the license was invalidated. Will be null for active licenses
	// Format: date-time
	InvalidatedAt strfmt.DateTime `json:"invalidatedAt,omitempty"`

	// The key of the license
	Key string `json:"key,omitempty"`

	// The operation mode of the license when it was claimed
	// Enum: [addDevices renew]
	Mode string `json:"mode,omitempty"`

	// The ID of the organization that the license is claimed in
	OrganizationID string `json:"organizationId,omitempty"`

	// When the license's term began (approximately the date when the license was created)
	// Format: date-time
	StartedAt strfmt.DateTime `json:"startedAt,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body remainder licenses items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClaimedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvalidatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateClaimedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.ClaimedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("claimedAt", "body", "date-time", o.ClaimedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateCounts(formats strfmt.Registry) error {
	if swag.IsZero(o.Counts) { // not required
		return nil
	}

	for i := 0; i < len(o.Counts); i++ {
		if swag.IsZero(o.Counts[i]) { // not required
			continue
		}

		if o.Counts[i] != nil {
			if err := o.Counts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateEditions(formats strfmt.Registry) error {
	if swag.IsZero(o.Editions) { // not required
		return nil
	}

	for i := 0; i < len(o.Editions); i++ {
		if swag.IsZero(o.Editions[i]) { // not required
			continue
		}

		if o.Editions[i] != nil {
			if err := o.Editions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateInvalidatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.InvalidatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("invalidatedAt", "body", "date-time", o.InvalidatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var moveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0TypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["addDevices","renew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0TypeModePropEnum = append(moveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0TypeModePropEnum, v)
	}
}

const (

	// MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0ModeAddDevices captures enum value "addDevices"
	MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0ModeAddDevices string = "addDevices"

	// MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0ModeRenew captures enum value "renew"
	MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0ModeRenew string = "renew"
)

// prop value enum
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, moveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0TypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("startedAt", "body", "date-time", o.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move organization licensing coterm licenses o k body remainder licenses items0 based on the context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Counts); i++ {

		if o.Counts[i] != nil {
			if err := o.Counts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) contextValidateEditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Editions); i++ {

		if o.Editions[i] != nil {
			if err := o.Editions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("editions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("editions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0 move organization licensing coterm licenses o k body remainder licenses items0 counts items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0 struct {

	// The number of counts the license contains of this model
	Count int64 `json:"count,omitempty"`

	// The license model type
	Model string `json:"model,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body remainder licenses items0 counts items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move organization licensing coterm licenses o k body remainder licenses items0 counts items0 based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0CountsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0 move organization licensing coterm licenses o k body remainder licenses items0 editions items0
swagger:model MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0
*/
type MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0 struct {

	// The name of the license edition
	Edition string `json:"edition,omitempty"`

	// The product type of the license edition
	ProductType string `json:"productType,omitempty"`
}

// Validate validates this move organization licensing coterm licenses o k body remainder licenses items0 editions items0
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this move organization licensing coterm licenses o k body remainder licenses items0 editions items0 based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesOKBodyRemainderLicensesItems0EditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesParamsBodyDestination Destination data for the license move
swagger:model MoveOrganizationLicensingCotermLicensesParamsBodyDestination
*/
type MoveOrganizationLicensingCotermLicensesParamsBodyDestination struct {

	// The claim mode of the moved license
	// Enum: [addDevices renew]
	Mode string `json:"mode,omitempty"`

	// The organization to move the license to
	OrganizationID string `json:"organizationId,omitempty"`
}

// Validate validates this move organization licensing coterm licenses params body destination
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var moveOrganizationLicensingCotermLicensesParamsBodyDestinationTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["addDevices","renew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moveOrganizationLicensingCotermLicensesParamsBodyDestinationTypeModePropEnum = append(moveOrganizationLicensingCotermLicensesParamsBodyDestinationTypeModePropEnum, v)
	}
}

const (

	// MoveOrganizationLicensingCotermLicensesParamsBodyDestinationModeAddDevices captures enum value "addDevices"
	MoveOrganizationLicensingCotermLicensesParamsBodyDestinationModeAddDevices string = "addDevices"

	// MoveOrganizationLicensingCotermLicensesParamsBodyDestinationModeRenew captures enum value "renew"
	MoveOrganizationLicensingCotermLicensesParamsBodyDestinationModeRenew string = "renew"
)

// prop value enum
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, moveOrganizationLicensingCotermLicensesParamsBodyDestinationTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("moveOrganizationLicensingCotermLicenses"+"."+"destination"+"."+"mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this move organization licensing coterm licenses params body destination based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyDestination) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesParamsBodyDestination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0 move organization licensing coterm licenses params body licenses items0
swagger:model MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0
*/
type MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0 struct {

	// The counts to move from the license by model type
	// Required: true
	Counts []*MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0 `json:"counts"`

	// The license key to move counts from
	// Required: true
	Key *string `json:"key"`
}

// Validate validates this move organization licensing coterm licenses params body licenses items0
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) validateCounts(formats strfmt.Registry) error {

	if err := validate.Required("counts", "body", o.Counts); err != nil {
		return err
	}

	for i := 0; i < len(o.Counts); i++ {
		if swag.IsZero(o.Counts[i]) { // not required
			continue
		}

		if o.Counts[i] != nil {
			if err := o.Counts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this move organization licensing coterm licenses params body licenses items0 based on the context it is used
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) contextValidateCounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Counts); i++ {

		if o.Counts[i] != nil {
			if err := o.Counts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("counts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("counts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0 move organization licensing coterm licenses params body licenses items0 counts items0
swagger:model MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0
*/
type MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0 struct {

	// The number of counts to move
	// Required: true
	Count *int64 `json:"count"`

	// The license model type to move counts of
	// Required: true
	Model *string `json:"model"`
}

// Validate validates this move organization licensing coterm licenses params body licenses items0 counts items0
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", o.Count); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", o.Model); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this move organization licensing coterm licenses params body licenses items0 counts items0 based on context it is used
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensingCotermLicensesParamsBodyLicensesItems0CountsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
